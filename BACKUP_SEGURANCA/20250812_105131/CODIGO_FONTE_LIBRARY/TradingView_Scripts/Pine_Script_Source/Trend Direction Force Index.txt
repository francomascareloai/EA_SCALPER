
//@version=5
indicator('<<Trend Direction Force Index>>', shorttitle='TDFI')

trendPeriod = input(title='Trend Period', defval=4)
maType = input.string(title='MA Type', defval='LSMA', options=['DEMA', 'EMA', 'HMA', 'JMA', 'LSMA', 'PWMA', 'SMMA', 'SMA', 'SSF2', 'SWMA', 'TEMA', 'TMA', 'VWMA', 'WMA', 'ZLEMA'])
maPeriod = input(title='MA Period', defval=8)
triggerUp = input(title='TriggerUp', defval=0.07)
triggerDown = input(title='TriggerDown', defval=-0.07)
showZeroCrosses = input(title='Show zero cross signals', defval=true)
showLineCrosses = input(title='Show level cross signals', defval=true)

PI = 2 * math.asin(1)
mma = ta.ema(close, trendPeriod)
smma = ta.ema(mma, trendPeriod)

impetmma = ta.change(mma)
impetsmma = ta.change(smma)
divma = math.abs(mma - smma) / syminfo.mintick
averimpet = math.avg(impetmma, impetsmma) / (2 * syminfo.mintick)

tdfRaw = divma * math.pow(averimpet, 3)
tdfAbsRaw = math.abs(tdfRaw)

for i = 1 to 3 * trendPeriod - 1 by 1
    cand = math.abs(nz(tdfRaw[i]))
    tdfAbsRaw := cand > tdfAbsRaw ? cand : tdfAbsRaw
    tdfAbsRaw

ratio = tdfRaw / tdfAbsRaw
smooth = float(na)

//------------------------------------------------------------------------------
// Super Smoother

_ssf2(src, length) =>
    arg = math.sqrt(2) * PI / length
    a1 = math.exp(-arg)
    b1 = 2 * a1 * math.cos(arg)
    c2 = b1
    c3 = -math.pow(a1, 2)
    c1 = 1 - c2 - c3
    ssf = 0.0
    ssf := c1 * src + c2 * nz(ssf[1], nz(src[1], src)) + c3 * nz(ssf[2], nz(src[2], nz(src[1], src)))
    ssf

_ssf2__1 = _ssf2(ratio, maPeriod)
smooth := maType == 'SSF2' ? _ssf2__1 : smooth

//------------------------------------------------------------------------------
// DEMA

_dema(src, length) =>
    ema1 = ta.ema(src, length)
    ema2 = ta.ema(ema1, length)
    2 * ema1 - ema2

_dema__1 = _dema(ratio, maPeriod)
smooth := maType == 'DEMA' ? _dema__1 : smooth

//------------------------------------------------------------------------------
// EMA

ema_1 = ta.ema(ratio, maPeriod)
smooth := maType == 'EMA' ? ema_1 : smooth

//------------------------------------------------------------------------------
// HMA, Hull

_hma(src, length) =>
    ta.wma(2 * ta.wma(src, length / 2) - ta.wma(src, length), math.round(math.sqrt(length)))

_hma__1 = _hma(ratio, maPeriod)
smooth := maType == 'HMA' ? _hma__1 : smooth

//------------------------------------------------------------------------------
// LSMA, Least Squares

linreg_1 = ta.linreg(ratio, maPeriod, 0)
smooth := maType == 'LSMA' ? linreg_1 : smooth

//------------------------------------------------------------------------------
// PWMA, Parabolic Weighted

_pwma(src, length) =>
    sum = 0.0
    weightSum = 0.0
    for i = 0 to length - 1 by 1
        weight = math.pow(length - i, 2)
        sum += nz(src[i]) * weight
        weightSum += weight
        weightSum
    sum / weightSum

_pwma__1 = _pwma(ratio, maPeriod)
smooth := maType == 'PWMA' ? _pwma__1 : smooth

//------------------------------------------------------------------------------
// SMMA

rma_1 = ta.rma(ratio, maPeriod)
smooth := maType == 'SMMA' ? rma_1 : smooth

//------------------------------------------------------------------------------
// SMA

sma_1 = ta.sma(ratio, maPeriod)
smooth := maType == 'SMA' ? sma_1 : smooth

//------------------------------------------------------------------------------
// SWMA

_swma(src, length) =>
    sum = 0.0
    weightSum = 0.0
    for i = 0 to length - 1 by 1
        weight = math.sin(i * PI / (length + 1))
        sum += nz(src[i]) * weight
        weightSum += weight
        weightSum
    sum / weightSum

_swma__1 = _swma(ratio, maPeriod)
smooth := maType == 'SWMA' ? _swma__1 : smooth

//------------------------------------------------------------------------------
// TEMA

_tema(src, length) =>
    ema1 = ta.ema(src, length)
    ema2 = ta.ema(ema1, length)
    ema3 = ta.ema(ema2, length)
    3 * (ema1 - ema2) + ema3

_tema__1 = _tema(ratio, maPeriod)
smooth := maType == 'TEMA' ? _tema__1 : smooth

//------------------------------------------------------------------------------
// TMA

_tma(src, length) =>
    ta.sma(ta.sma(src, math.ceil(length / 2)), math.floor(length / 2) + 1)

_tma__1 = _tma(ratio, maPeriod)
smooth := maType == 'TMA' ? _tma__1 : smooth

//------------------------------------------------------------------------------
// VWMA

vwma_1 = ta.vwma(ratio, maPeriod)
smooth := maType == 'VWMA' ? vwma_1 : smooth

//------------------------------------------------------------------------------
// WMA

wma_1 = ta.wma(ratio, maPeriod)
smooth := maType == 'WMA' ? wma_1 : smooth

//------------------------------------------------------------------------------
// ZLEMA

_zlema(src, length) =>
    lag = length <= 2 ? 1 : math.floor((length - 1) / 2)
    ta.ema(src + src - nz(src[lag]), length)

_zlema__1 = _zlema(ratio, maPeriod)
smooth := maType == 'ZLEMA' ? _zlema__1 : smooth

//------------------------------------------------------------------------------
// JMA

_jma(src, length) =>
    alpha = 0.45 * (length - 1) / (0.45 * (length - 1) + 2)
    out = 0.0
    e0 = 0.0
    e0 := (1 - alpha) * src + alpha * nz(e0[1])
    e1 = 0.0
    e1 := (1 - alpha) * (src - e0) + alpha * nz(e1[1])
    e2 = 0.0
    e2 := math.pow(1 - alpha, 2) * (e0 + e1 - nz(out[1])) + math.pow(alpha, 2) * nz(e2[1])
    out := e2 + nz(out[1])
    out

_jma__1 = _jma(ratio, maPeriod)
smooth := maType == 'JMA' ? _jma__1 : smooth

//------------------------------------------------------------------------------

tdf = tdfAbsRaw > 0 ? math.max(math.min(na(smooth) ? ratio : smooth, 1), -1) : 0.0
tdfColor = tdf > triggerUp ? #008bfc : tdf < triggerDown ? #fd01fd : #f8f9fc
plot(tdf, color=tdfColor, style=plot.style_columns, linewidth=1)
hline(triggerUp, title='Trigger Up', linestyle=hline.style_dotted)
hline(triggerDown, title='Trigger Down', linestyle=hline.style_dotted)

plotshape(ta.crossover(tdf, 0) and showZeroCrosses ? 0 : na, title='Zero Crossover', location=location.absolute, style=shape.circle, size=size.tiny, color=#48f803)
plotshape(ta.crossunder(tdf, 0) and showZeroCrosses ? 0 : na, title='Zero Crossunder', location=location.absolute, style=shape.circle, size=size.tiny, color=#fa0303)

plotshape(ta.crossover(tdf, triggerUp) and showLineCrosses ? triggerUp : na, title='Upper Crossover', location=location.absolute, style=shape.circle, size=size.tiny, color=#02fa0b)
plotshape(ta.crossunder(tdf, triggerUp) and showLineCrosses ? triggerUp : na, title='Upper Crossunder', location=location.absolute, style=shape.circle, size=size.tiny, color=#f80606)
plotshape(ta.crossover(tdf, triggerDown) and showLineCrosses ? triggerDown : na, title='Lower Crossover', location=location.absolute, style=shape.circle, size=size.tiny, color=#04f70d)
plotshape(ta.crossunder(tdf, triggerDown) and showLineCrosses ? triggerDown : na, title='Lower Crossunder', location=location.absolute, style=shape.circle, size=size.tiny, color=#f80606)