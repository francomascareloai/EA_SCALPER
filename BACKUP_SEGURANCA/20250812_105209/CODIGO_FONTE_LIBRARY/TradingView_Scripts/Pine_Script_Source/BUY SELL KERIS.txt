//+------------------------------------------------------------------+
//|                                    BuySellSMCIndicator.mq4        |
//|                        Created by Forex Code Helper               |
//+------------------------------------------------------------------+
#property indicator_separate_window
#property indicator_buffers 10
#property indicator_color1 Red       // Parabolic SAR
#property indicator_color2 Blue      // Stochastic K line
#property indicator_color3 LimeGreen // Stochastic D line
#property indicator_color4 Orange    // Upper Bollinger Band
#property indicator_color5 Orange    // Lower Bollinger Band
#property indicator_color6 Yellow    // ADX
#property indicator_color7 Green     // Buy Arrow
#property indicator_color8 Red       // Sell Arrow
#property indicator_color9 Orange    // Supply Zone
#property indicator_color10 Green    // Demand Zone

//--- indicator buffers
double SarBuffer[];
double StochKBuffer[];
double StochDBuffer[];
double BollUpper[];
double BollLower[];
double ADXBuffer[];
double SignalBuffer[];
double BuyArrowBuffer[];
double SellArrowBuffer[];
double SupplyZoneBuffer[];
double DemandZoneBuffer[];

//--- Input untuk manajemen risiko dan trailing stop
input double StopLossPips = 20;              // Stop Loss dalam pips
input double TakeProfitPips = 40;            // Take Profit dalam pips
input bool UseTrailingStop = true;           // Aktifkan trailing stop
input double TrailingStopPips = 10;          // Jarak trailing stop dalam pips
input bool UseATRForStop = true;             // Gunakan ATR untuk Stop Loss dinamis
input int ATRMultiplier = 2;                 // ATR multiplier untuk Stop Loss
input bool UseATRForTrailing = false;        // Aktifkan Trailing Stop berdasarkan ATR
input int ATRMultiplierForTrailing = 2;      // ATR Multiplier untuk trailing stop

//--- Multi-timeframe input untuk konfirmasi tren
input int HigherTimeframe = PERIOD_H4;       // Timeframe lebih tinggi untuk konfirmasi tren

//--- Deklarasi variabel untuk order management
int ticket;

//--- Deklarasi variabel tambahan SMC
double lastHigh, lastLow;
bool isUpTrendStructure = false;
bool isDownTrendStructure = false;

//+------------------------------------------------------------------+
//| Custom indicator initialization function                         |
//+------------------------------------------------------------------+
int OnInit()
  {
   //--- set the buffers
   SetIndexBuffer(0, SarBuffer);
   SetIndexBuffer(1, StochKBuffer);
   SetIndexBuffer(2, StochDBuffer);
   SetIndexBuffer(3, BollUpper);
   SetIndexBuffer(4, BollLower);
   SetIndexBuffer(5, ADXBuffer);
   SetIndexBuffer(6, BuyArrowBuffer);
   SetIndexBuffer(7, SellArrowBuffer);
   SetIndexBuffer(8, SupplyZoneBuffer);
   SetIndexBuffer(9, DemandZoneBuffer);

   //--- set the indicator properties
   SetIndexStyle(0, DRAW_ARROW);
   SetIndexArrow(6, 233); // Buy arrow symbol
   SetIndexArrow(7, 234); // Sell arrow symbol
   
   SetIndexLabel(0, "Parabolic SAR");
   SetIndexLabel(1, "Stochastic K");
   SetIndexLabel(2, "Stochastic D");
   SetIndexLabel(3, "Bollinger Upper");
   SetIndexLabel(4, "Bollinger Lower");
   SetIndexLabel(5, "ADX");
   SetIndexLabel(6, "Buy Signal");
   SetIndexLabel(7, "Sell Signal");
   SetIndexLabel(8, "Supply Zone");
   SetIndexLabel(9, "Demand Zone");

   return(INIT_SUCCEEDED);
  }
//+------------------------------------------------------------------+
//| Custom indicator iteration function                              |
//+------------------------------------------------------------------+
int OnCalculate(const int rates_total,
                const int prev_calculated,
                const datetime &time[],
                const double &open[],
                const double &high[],
                const double &low[],
                const double &close[],
                const long &tick_volume[],
                const long &volume[],
                const int &spread[])
  {
   int i;

   // Hanya kalkulasi data yang belum dihitung untuk optimasi kinerja
   int limit = rates_total - prev_calculated;
   if (prev_calculated > 0) limit++; // Adjust for previously calculated bars

   // Calculate Parabolic SAR
   for(i = rates_total - limit; i >= 0; i--)
     {
      SarBuffer[i] = iSAR(NULL, 0, 0.01, 0.1, i);
     }

   // Calculate Stochastic Oscillator (K% and D%)
   for(i = rates_total - limit; i >= 0; i--)
     {
      StochKBuffer[i] = iStochastic(NULL, 0, 12, 3, 6, MODE_MAIN, i);
      StochDBuffer[i] = iStochastic(NULL, 0, 12, 3, 6, MODE_SIGNAL, i);
     }

   // Calculate Bollinger Bands
   for(i = rates_total - limit; i >= 0; i--)
     {
      BollUpper[i] = iBands(NULL, 0, 20, 2, 0, PRICE_CLOSE, MODE_UPPER, i);
      BollLower[i] = iBands(NULL, 0, 20, 2, 0, PRICE_CLOSE, MODE_LOWER, i);
     }

   // Calculate ADX
   for(i = rates_total - limit; i >= 0; i--)
     {
      ADXBuffer[i] = iADX(NULL, 0, 14, MODE_MAIN, i);
     }

   // Calculate ATR for dynamic stop loss
   double ATRValue = iATR(NULL, 0, 14, 0); // ATR period 14
   double StopLossATR = ATRValue * ATRMultiplier; // ATR-based stop loss

   // Detect Break of Structure (BOS)
   if(close[1] > high[2] && close[0] > high[1]) // Bullish BOS
     {
      isUpTrendStructure = true;
      isDownTrendStructure = false;
     }
   else if(close[1] < low[2] && close[0] < low[1]) // Bearish BOS
     {
      isUpTrendStructure = false;
      isDownTrendStructure = true;
     }

   // Detect Supply and Demand Zones
   if(isUpTrendStructure) 
     {
      lastLow = iFractals(NULL, 0, MODE_LOWER, 0); // Fractal low untuk demand zone
      for(int j = 0; j < 10; j++) 
      {
         DemandZoneBuffer[i + j] = lastLow; // Plot demand zone at recent low
      }
     }
   else if(isDownTrendStructure) 
     {
      lastHigh = iFractals(NULL, 0, MODE_UPPER, 0); // Fractal high untuk supply zone
      for(int j = 0; j < 10; j++) 
      {
         SupplyZoneBuffer[i + j] = lastHigh; // Plot supply zone at recent high
      }
     }

   // Visualisasi Demand Zone
   if(DemandZoneBuffer[i] > 0)
   {
      ObjectCreate(0, "DemandZone"+IntegerToString(i), OBJ_RECTANGLE, 0, Time[i], DemandZoneBuffer[i], Time[i-5], low[i]);
      ObjectSetInteger(0, "DemandZone"+IntegerToString(i), OBJPROP_COLOR, clrGreen);
      ObjectSetInteger(0, "DemandZone"+IntegerToString(i), OBJPROP_STYLE, STYLE_SOLID);
      ObjectSetInteger(0, "DemandZone"+IntegerToString(i), OBJPROP_WIDTH, 2);
   }

   // Visualisasi Supply Zone
   if(SupplyZoneBuffer[i] > 0)
   {
      ObjectCreate(0, "SupplyZone"+IntegerToString(i), OBJ_RECTANGLE, 0, Time[i], SupplyZoneBuffer[i], Time[i-5], high[i]);
      ObjectSetInteger(0, "SupplyZone"+IntegerToString(i), OBJPROP_COLOR, clrOrange);
      ObjectSetInteger(0, "SupplyZone"+IntegerToString(i), OBJPROP_STYLE, STYLE_SOLID);
      ObjectSetInteger(0, "SupplyZone"+IntegerToString(i), OBJPROP_WIDTH, 2);
   }

   // Check higher timeframe trend confirmation (filter to avoid whipsaw)
   double HigherSAR = iSAR(NULL, HigherTimeframe, 0.01, 0.1, 0);
   double HigherTimeframeMA = iMA(NULL, HigherTimeframe, 50, 0, MODE_SMA, PRICE_CLOSE, 0); // Higher timeframe MA
   double HigherADX = iADX(NULL, HigherTimeframe, 14, MODE_MAIN, 0); // Higher timeframe ADX
   bool isUpTrend = (close[0] > HigherSAR) && (close[0] > HigherTimeframeMA && HigherADX > 25);
   bool isDownTrend = (close[0] < HigherSAR) && (close[0] < HigherTimeframeMA && HigherADX > 25);

   // Tambahan validasi dengan RSI
   double RSIValue = iRSI(NULL, 0, 14, PRICE_CLOSE, 0);

   // Generate Buy/Sell signals
   for(i = rates_total - limit; i >= 0; i--)
     {
      // Buy Condition
      if(close[i] > SarBuffer[i] && StochKBuffer[i] < 20 && StochDBuffer[i] < 20 && StochKBuffer[i] > StochDBuffer[i] 
         && ADXBuffer[i] > 25 && isUpTrend && isUpTrendStructure && RSIValue < 30)
        {
         BuyArrowBuffer[i] = low[i] - (Point * 10); // Show Buy arrow below the candle
         SignalBuffer[i] = 1; // Buy signal
        }
      // Sell Condition
      else if(close[i] < SarBuffer[i] && StochKBuffer[i] > 80 && StochDBuffer[i] > 80 && StochKBuffer[i] < StochDBuffer[i] 
         && ADXBuffer[i] > 25 && isDownTrend && isDownTrendStructure && RSIValue > 70)
        {
         SellArrowBuffer[i] = high[i] + (Point * 10); // Show Sell arrow above the candle
         SignalBuffer[i] = -1; // Sell signal
        }
      else
        {
         SignalBuffer[i] = 0; // No signal
        }
     }

   return(rates_total);
  }
//+------------------------------------------------------------------+
//| Function to manage trailing stop                                 |
//+------------------------------------------------------------------+
void ManageTrailingStop() 
{
   if (UseTrailingStop && OrderSelect(ticket, SELECT_BY_TICKET)) 
   {
      double ATRValue = iATR(NULL, 0, 14, 0); // ATR untuk trailing stop
      double ATRTrailingStop = ATRValue * ATRMultiplierForTrailing;

      double stopLoss = OrderType() == OP_BUY ? Bid - (UseATRForTrailing ? ATRTrailingStop : TrailingStopPips * Point) :
                                               Ask + (UseATRForTrailing ? ATRTrailingStop : TrailingStopPips * Point);

      if ((OrderType() == OP_BUY && stopLoss > OrderStopLoss()) || 
          (OrderType() == OP_SELL && stopLoss < OrderStopLoss())) 
      {
         OrderModify(ticket, OrderOpenPrice(), stopLoss, OrderTakeProfit(), 0, clrNONE);
      }
   }
}
