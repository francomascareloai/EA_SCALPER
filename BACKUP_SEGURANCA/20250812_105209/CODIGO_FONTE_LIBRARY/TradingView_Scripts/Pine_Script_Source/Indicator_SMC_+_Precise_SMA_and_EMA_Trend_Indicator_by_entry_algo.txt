// This Pine Scriptâ„¢ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Join our channel for more free tools: https://t.me/simpleforextools

//@version=5
indicator("SMC + Precise SMA and EMA Trend Indicator by entry algo ", overlay=true, max_bars_back=5000, max_boxes_count=500, max_labels_count=500, max_lines_count=500)

// Import Libraries
import TFlab/OrderBlockRefiner_TradingFinder/2 as Refiner
import TFlab/OrderBlockDrawing_TradingFinder/1 as Drawing
import TFlab/FVGDetectorLibrary/1 as FVG
import TFlab/LiquidityFinderLibrary/1 as Liq
import TFlab/AlertSenderLibrary_TradingFinder/1 as Alert
import TradingView/ta/7

// Inputs for SMC
PP = input.int(5, 'Pivot Period of Order Blocks Detector', group = 'Logic Parameter', minval = 1)
OBVaP = input.int(500, 'Order Block Validity Period (Bar)', group = 'Logic Parameter', maxval = 4998, minval = 10, tooltip = 'You can set the validity period of each Order Block based on the number of candles that have passed since the origin of the Order Block.')

// Display Order Blocks
ShowDmainCh = input.bool(true, 'Demand Main Zone, "ChoCh" Origin.', group = 'Order Blocks Display', inline = 'OB 1')
ColorDmainCh = input.color(color.rgb(60, 176, 68, 65), '', group = 'Order Blocks Display', inline = 'OB 1')
ShowSmainCh = input.bool(true, 'Supply Main Zone, "ChoCh" Origin...', group ='Order Blocks Display', inline = 'OB 4')
ColorSmainCh = input.color(color.rgb(191, 10, 48, 75), '', group = 'Order Blocks Display', inline = 'OB 4')

// FVG
PShowDeFVG = input.bool(true, ' Show Demand FVG', group = 'FVG')
PShowSuFVG = input.bool(true, ' Show Supply FVG', group = 'FVG')
PFVGFilter = input.bool(true, 'FVG Filter ............', group = 'FVG', inline = 'FVG Filter')
PFVGFilterType = input.string('Very Defensive', '', ['Very Aggressive', 'Aggressive', 'Defensive', 'Very Defensive'], group = 'FVG', inline = 'FVG Filter', tooltip = 'If it is "On", this filter will filter "FVGs" based on the width of the Zone.' + 'From "Very Aggressive" to "Very Defensive" the width of the "FVG" decreases.')

// Liquidity
ShowSHLL = input.bool(true , 'Show Statics High Liquidity Line', group = 'Liquidity')
ShowSLLL = input.bool(true , 'Show Statics Low Liquidity Line', group = 'Liquidity')
ShowDHLL = input.bool(true , 'Show Dynamics High Liquidity Line', group = 'Liquidity')
ShowDLLL = input.bool(true , 'Show Dynamics Low Liquidity Line', group = 'Liquidity')
SPP = input.int(8 , 'Statics Period Pivot', group = 'Liquidity') // Statics Period Pivot
DPP = input.int(3 , 'Dynamics Period Pivot', group = 'Liquidity') // Dynamics Period Pivot
SLLS = input.float(0.30 , 'Statics Liquidity Line Sensitivity', maxval = 0.4 , minval = 0.0, step = 0.01, group = 'Liquidity') // Statics Liquidity Line Sensitivity
DLLS = input.float(1.00 , 'Dynamics Liquidity Line Sensitivity', maxval = 1.95 , minval = 0.4, step = 0.01, group = 'Liquidity') // Dynamics Liquidity Line Sensitivity

// Variables for SMC
Open = open
High = high
Low = low
Close = close
Bar_Index = bar_index
HighPivot = ta.pivothigh(PP, PP)
LowPivot = ta.pivotlow(PP, PP)
HighValue = ta.valuewhen(HighPivot, High[PP], 0)
LowValue = ta.valuewhen(LowPivot, Low[PP], 0)
HighIndex = ta.valuewhen(HighPivot, Bar_Index[PP], 0)
LowIndex = ta.valuewhen(LowPivot, Bar_Index[PP], 0)

// Plot Highs and Lows
plotshape(series=HighPivot, location=location.abovebar, color=color.red, style=shape.labelup, title="High Pivot")
plotshape(series=LowPivot, location=location.belowbar, color=color.green, style=shape.labeldown, title="Low Pivot")

// FVG
if (PShowDeFVG or PShowSuFVG)
    FVG.FVGDetector(PFVGFilter ? 'On' : 'Off', PFVGFilterType, PShowDeFVG, PShowSuFVG)

// Liquidity
Liq.LLF(SPP, DPP, SLLS, DLLS, ShowSHLL, ShowSLLL, ShowDHLL, ShowDLLL)

// Inputs for SMA and EMA Trend Indicator
smaLength = input.int(20, title="SMA Length")
emaLength = input.int(20, title="EMA Length")
reactionEmaLength = input.int(3, title="Reaction EMA Length")
lookbackPeriod = input.int(50, title="Lookback Period for Normalization")

// Calculations for SMA and EMA Trend Indicator
sma = ta.sma(close, smaLength)
ema = ta.ema(close, emaLength)
reactionEma = ta.ema(close, reactionEmaLength)

// Trend colors
upColor = input.color(color.new(color.green, 80), title="Up Trend Color")
downColor = input.color(color.new(color.red, 80), title="Down Trend Color")
neutralColor = input.color(color.new(color.gray, 80), title="Neutral Trend Color")

// Determine trend color
trendColor = close > ema ? upColor : downColor

// Plot EMAs
plot1 = plot(ema, title="EMA", color=input.color(color.new(color.blue, 0), title="EMA Color"))
plot2 = plot(reactionEma, title="Reaction EMA", color=input.color(color.new(color.blue, 0), title="Reaction EMA Color"))

// Fill area between EMAs
fill(plot1, plot2, color=trendColor, title="Trend Fill")

// Entry signals based on EMA crossovers and trend color with 2 candle confirmation
longCondition = ta.crossover(reactionEma, sma) and trendColor == upColor
shortCondition = ta.crossunder(reactionEma, sma) and trendColor == downColor

// 2 candle confirmation
longConditionConfirmed = longCondition and close[1] > ema[1] and close > ema
shortConditionConfirmed = shortCondition and close[1] < ema[1] and close < ema

// Calculate signal strength
distFromEmaLong = math.abs(close - ema) / ema * 100
distFromEmaShort = math.abs(close - ema) / ema * 100

// Normalize over the lookback period
maxDistLong = ta.highest(distFromEmaLong, lookbackPeriod)
maxDistShort = ta.highest(distFromEmaShort, lookbackPeriod)

strengthLong = (distFromEmaLong / maxDistLong) * 100
strengthShort = (distFromEmaShort / maxDistShort) * 100

// State variable to track the last signal type
var string lastSignal = na

// Entry labels with strength on two lines and no consecutive same signals
if longConditionConfirmed and (na(lastSignal) or lastSignal == "Sell")
    label.new(bar_index, low, text="Buy\n" + str.tostring(strengthLong, "#.##") + "% Strong", color=color.green, textcolor=color.white, style=label.style_label_up, yloc=yloc.belowbar)
    lastSignal := "Buy"
else if shortConditionConfirmed and (na(lastSignal) or lastSignal == "Buy")
    label.new(bar_index, high, text="Sell\n" + str.tostring(strengthShort, "#.##") + "% Strong", color=color.red, textcolor=color.white, style=label.style_label_down, yloc=yloc.abovebar)
    lastSignal := "Sell"

// Alert conditions
alertcondition(longConditionConfirmed and (na(lastSignal) or lastSignal == "Sell"), title="Long Signal", message="Long Signal Generated")
alertcondition(shortConditionConfirmed and (na(lastSignal) or lastSignal == "Buy"), title="Short Signal", message="Short Signal Generated")

// Existing SMC Calculations, FVG, Liquidity, Alerts

// Moving Average Bands with Signals [UAlgo]
maLength2 = input.int(21, minval=1, title='Moving Average Length', group = "Moving Average Bands with Signals General Settings" )
atrLength = input.int(14, minval=1, title='ATR Length', group = "Moving Average Bands with Signals General Settings")
srMultiplier = input.float(2.618, minval=0.1, title='Band Multiplier', step=0.1, group = "Moving Average Bands with Signals General Settings")
signalType = input.string("Wick", title = "Signal Type", options = ["Wick","Close"], group = "Moving Average Bands with Signals General Settings", tooltip = "It determines whether the wick value or the closing value will be taken as basis when generating signals.")
bandWidth = input.int(15, minval=1, title='Band Width', group = "Moving Average Bands with Signals General Settings")
maType = input.string(title='Type', defval='Arnaud Legoux Moving Average - ALMA', options=['Arnaud Legoux Moving Average - ALMA', 'Exponential Moving Average - EMA','Double Exponential - DEMA', 'Triple Exponential - TEMA',  'Kaufman Adaptive - KAMA', 'Hull - HMA', 'Least Squares - LSMA', 'Simple - SMA', 'Triangular - TMA', 'Volume-Weighted - VWMA', 'Weighted - WMA', 'Zero-Lag - ZLMA'], group='Moving Average Settings')
colorUp = input.color(color.new(#089981,70), title = "Upper Band Color", group = "Visual Settings", inline = "colors")
colorDn = input.color(color.new(#F23645,70), title = "Lower Band Color", group = "Visual Settings", inline = "colors")

// Moving Average Settings

//ALMA Settings
almaOffset = input.float(title='ALMA Offset', step=0.05, defval=0.85, inline='0', group='Moving Average Settings')
almaSigma = input.float(title='ALMA Sigma', step=0.5, defval=6, inline='0', group='Moving Average Settings')

//KAMA Settings
kamaFast=input.float(title='KAMA Fast Period', defval=0.7, minval=0.01, step=0.01, inline='2', group='Moving Average Settings')
kamaSlow=input.float(title='KAMA Slow Period', defval=0.065, minval=0.01, step=0.0025, inline='2', group='Moving Average Settings')

//LSMA Settings
lsmaOffset = input.int(title='Least Squares Offset', defval=9, inline='3', group='Moving Average Settings')

// Moving Average Calculations
kama(src, maLength2, kamaFast, kamaSlow) =>
    logSrc = math.abs(src - src[1])
    signal = math.abs(src - src[maLength2])
    noise = math.sum(logSrc, maLength2)
    ratio = noise != 0 ? signal / noise : 0
    smooth = math.pow(ratio * (kamaFast - kamaSlow) + kamaSlow, 2)
    kama = 0.0
    kama := nz(kama[1]) + smooth * (src - nz(kama[1]))
    kama

zlma(src, maLength2)=>
    alpha = 2.0/(1.0 + maLength2)
    per = math.ceil((maLength2 - 1.0) / 2.0 )
    zlma = 0.
    zlma := nz(zlma[1]) + alpha * (2.0 * src - nz(zlma[per]) - nz(zlma[1]))
    zlma

tma(src, maLength2)=>
    filter = 0.0, coef = 0.0, length2 = maLength2 / 2.0
    for i = 1 to maLength2
        c = i < length2 ? i : i > length2 ? maLength2 + 1 - i : length2
        filter := filter + (c * nz(src[i - 1]))
        coef := coef + c
    filter := coef != 0 ? filter / coef : 0
    filter

dema(src, maLength2)=>
    ema = ta.ema(src, maLength2)
    dema = 2 * ta.ema(src, maLength2) - ta.ema(ema, maLength2)
    dema

tema(src, maLength2)=>
    ema1 = ta.ema(src, maLength2)
    ema2 = ta.ema(ema1, maLength2)
    ema3 = ta.ema(ema2, maLength2)
    tema = 3 * (ema1 - ema2) + ema3
    tema

lsma(src, maLength2, offset)=>
    output = ta.linreg(src, maLength2, offset)
    output

calcMa(typeMa, src, maLength2) =>
    maValFunc = 0.0
    switch typeMa
        'Arnaud Legoux Moving Average - ALMA' =>
            maValFunc := ta.alma(src, maLength2, almaOffset, almaSigma)
        'Exponential Moving Average - EMA' =>
            maValFunc := ta.ema(src, maLength2)
        'Double Exponential - DEMA' =>
            maValFunc := dema(src, maLength2)
        'Triple Exponential - TEMA' =>
            maValFunc := tema(src, maLength2)
        'Kaufman Adaptive - KAMA' =>
            maValFunc := kama(src, maLength2, kamaFast, kamaSlow)
        'Least Squares - LSMA' =>
            maValFunc := lsma(src, maLength2, lsmaOffset)
        'Hull - HMA' =>
            maValFunc := ta.hma(src, maLength2)
        'Simple - SMA' =>
            maValFunc := ta.sma(src, maLength2)
        'Volume-Weighted - VWMA' =>
            maValFunc := ta.vwma(src, maLength2)
        'Zero-Lag - ZLMA' =>
            maValFunc := zlma(src, maLength2)
        'Triangular - TMA' =>
            maValFunc := tma(src, maLength2)
        'Weighted - WMA' =>
            maValFunc := ta.wma(src, maLength2)
    maValFunc

maVal = calcMa(maType, close, maLength2)
atr = ta.atr(length = atrLength)

supportVal = maVal - atr * srMultiplier
resistanceVal = maVal + atr * srMultiplier

plot(supportVal, title='Support Band', color=colorUp, linewidth=bandWidth)
plot(resistanceVal, title='Resistance Band', color=colorDn, linewidth=bandWidth)
signalValSupport = signalType == "Wick" ? low : close
signalValResistance = signalType == "Wick" ? high : close
supportSignal = signalValSupport <= supportVal ? true : false
resistanceSignal = signalValResistance >= resistanceVal ? true : false

plotshape(series=supportSignal, title="Support Signal", location=location.belowbar, color=color.green, text="ðŸŸ¢", size=size.small)
plotshape(series=resistanceSignal, title="Resistance Signal", location=location.abovebar, color=color.red, text="ðŸ”´", size=size.small)

// alert
alertcondition(supportSignal, title="Support Signal Alert", message="Support signal triggered!")
alertcondition(resistanceSignal, title="Resistance Signal Alert", message="Resistance signal triggered!")


// ==========================================================================================

// === Dashboard with Telegram Link ===
var table myTable = table.new(position.top_center, 1, 1, border_width=1, frame_color=color.black, bgcolor=color.white)

// Add Telegram Message to Dashboard
table.cell(myTable, 0, 0, "Join Telegram @simpleforextools", bgcolor=color.blue, text_color=color.white, text_size=size.normal)