/*
   Generated by EX4-TO-MQ4 decompiler V4.0.479.3 [-]
   Website: https://purebeam.biz
   E-mail : purebeam@gmail.com
*/
#property copyright "Copyright © 2007-2013,Robot Cerdas Indonesia"
#property link      "http://www.robottradingcerdas.com"

extern bool TradeEnable = TRUE;
extern bool AutoDetect5Digits = TRUE;
extern int MagicNumber = 888;
extern bool UseSpesificProfitByMagicNumber = FALSE;
extern int MagicNumberTarget = 888;
int gi_96;
bool gi_100 = TRUE;
bool gi_104 = FALSE;
bool gi_108 = TRUE;
bool gi_112 = FALSE;
bool gi_116 = TRUE;
bool gi_120 = FALSE;
double gd_124 = 20.0;
bool gi_132 = FALSE;
extern double MaxTotalOpenForEach = 50.0;
extern bool AutoOrderDistanceSize = FALSE;
extern double OrderDistanceSize = 10.0;
extern bool UseTradingBuy = FALSE;
extern bool UseTradingSell = FALSE;
bool gi_164 = FALSE;
extern string TechnicalAnalysis = "Choose the combination of Technical Analysis";
extern bool UseSmartSupportResitant = FALSE;
bool gi_180 = TRUE;
extern bool UseNeuralNetwork = TRUE;
string gs_unused_188 = "0:RSP, 1:RSI, 3:DontCare";
int gi_196 = 3;
int g_period_200 = 14;
int gi_unused_204 = 70;
int gi_unused_208 = 30;
string gs_unused_212 = "0: Pivot, 1:R/S Level-1, 2: R/S Level-2, 3:R/S Level-3";
int gi_220 = 2;
double g_price_224;
double g_price_232;
extern double Balance = 1000.0;
double gd_248;
extern double EndTarget = 20000.0;
extern bool UseTargetRollover = TRUE;
extern double ProfitRollover = 200.0;
double gd_276;
double gd_284;
double gd_292;
extern double StepGainProfitTotal = 40.0;
double gd_308;
double gd_316;
extern double StepGainProfitBuy = 40.0;
extern double StepGainProfitSell = 40.0;
double gd_340;
double gd_348;
double gd_356;
double gd_364;
extern bool UseAutoSmartCloseProfit = FALSE;
extern double ScaleProfitClose = 1.0;
double gd_384;
double gd_392;
double gd_400;
double gd_unused_408;
extern int MinDifferenceBuySell = 1;
extern double  LotSize  = 0.01;
extern bool UseAutoLotSize = FALSE;
bool gi_432 = FALSE;
bool gi_unused_436 = FALSE;
double gd_440;
extern double BaseEquity = 1000.0;
double gd_456 = 2000.0;
bool gi_464 = FALSE;
extern double TakeProfit = 4000.0;
extern double TPBand = 7.0;
extern bool UseExtraPip = FALSE;
extern double ExtraPipBuy = 3.0;
extern double ExtraPipSell = 3.0;
double gd_unused_504;
double gd_unused_512;
extern double StopLoss = 0.0;
extern double TrailingStopBuy = 0.0;
double gd_unused_536;
extern double TrailingStopSell = 0.0;
double gd_unused_552;
extern double Slippage = 2.0;
extern bool ConsiderSpread = FALSE;
extern bool CloseAllManually = FALSE;
extern bool UseCutlossMinusBuySellProfit = FALSE;
extern double CutlossMinusProfitBuy = -99.0;
extern double CutlossMinusProfitSell = -99.0;
double gd_596 = 0.0;
double gd_604 = 0.0;
double gd_612 = 0.0;
bool gi_620 = TRUE;
bool gi_624 = TRUE;
bool gi_unused_628 = TRUE;
bool gi_632 = TRUE;
bool gi_unused_636 = FALSE;
bool gi_unused_640 = FALSE;
bool gi_unused_644 = TRUE;
bool gi_unused_648 = TRUE;
int g_day_652;
string g_comment_656 = "RTC4NNCS-TRIAL";
double gd_664 = 0.0;
int gi_672 = 20;
int gi_676 = 3;
bool gi_680 = TRUE;
int gi_684 = 1;
bool gi_688 = TRUE;
int gi_692 = 9221330;
int gi_696 = 8;
string gs_700;
int gi_708 = 16777215;
double gd_712;
double gd_720;
int gi_728 = 0;
int gi_732 = 0;
string gsa_736[] = {"Resetting", "Direction", " Up Trend ", " Down Trend ", "Down-Up Trend ", "Up-Down Trend"};
double gd_740;
double gd_unused_748 = 0.0;
double gd_756 = 0.0;
double gd_764;
double gd_772;
double gd_780;
double gd_788;
bool gi_796 = FALSE;
bool gi_800 = FALSE;
int gi_804;
double gd_808;
double gd_816;
double g_price_832 = 0.0;
double g_price_840 = 0.0;
double g_price_848 = 0.0;
double g_price_856 = 0.0;
double g_price_864 = 0.0;
double g_price_872 = 0.0;
double g_price_880 = 0.0;
double g_price_888 = 0.0;
double g_price_896 = 0.0;
double g_price_904 = 0.0;
double g_price_912 = 0.0;
double g_price_920 = 0.0;
double gd_928 = 0.0;
double gd_936 = 0.0;
double gd_944 = 0.0;
double gd_unused_952 = 0.0;
double gd_960 = 0.0;
double gd_unused_968 = 0.0;
double gd_unused_976 = 0.0;
double gd_unused_984 = 0.0;
double gd_unused_992 = 0.0;
double g_price_1000 = 0.0;
double gd_unused_1008 = 0.0;
double gd_unused_1016 = 0.0;
double gd_unused_1024 = 0.0;
double gd_unused_1032 = 0.0;
double gda_1040[2][6];
double gda_1044[2][6];
double gda_unused_1048[13];
double gd_unused_1052 = 0.0;
double gd_1060 = 0.0;
double gd_unused_1068 = 0.0;
double gd_unused_1076 = 0.0;
double gd_unused_1084 = 0.0;
double gd_1092 = 0.0;
double gd_1100 = 0.0;
double gd_1108 = 0.0;
double gd_1116 = 0.0;
double gda_unused_1124[2][6];
double gda_unused_1128[13];
int gi_1132 = 2;
double gd_unused_1136;
double g_irsi_1144;
double gd_1152;
double gd_1160;
int gi_unused_1168;
int gi_unused_1172;
bool gi_unused_1176;
bool gi_unused_1180;
int gi_unused_1184;
int gi_unused_1188;
double gd_unused_1192;
double gd_unused_1200;
double gd_unused_1208;
bool gi_unused_1216;
double gd_unused_1220;
double gd_unused_1228;
extern int LevelF = 2;
double gda_1240[];
double gda_1244[];
extern int Trend = 2;
double gda_1252[24];
double g_price_1256;
double g_price_1264;
double g_price_1272;
double g_price_1280;
double g_price_1440;
int gi_unused_1448 = 0;
extern int lastBar = 0;
extern int futBars = 5;
extern int smoothPer = 6;
extern int numLayers = 3;
extern int numInputs = 12;
extern int numNeurons1 = 5;
extern int numNeurons2 = 1;
extern int numNeurons3 = 0;
extern int numNeurons4 = 0;
extern int numNeurons5 = 0;
extern int ntr = 500;
extern int nep = 1000;
extern int maxMSEpwr = -20;
extern int AFT = 2;
double gd_1540;
double gd_1548;
double gd_1564 = 20.0;
int gi_1572;
string gs_dummy_1576;
string g_time2str_1584;
int gia_1592[];

// E37F0136AA3FFAF149B351F6A4C948E9
int init() {
   if (AutoDetect5Digits) {
      if (Digits == 5 || Digits == 3) {
         gd_740 = 10.0 * Point;
         OrderDistanceSize = 10.0 * OrderDistanceSize;
         TakeProfit = 10.0 * TakeProfit;
         Slippage = 10.0 * Slippage;
         StopLoss = 10.0 * StopLoss;
         TrailingStopBuy = 10.0 * TrailingStopBuy;
         TrailingStopSell = 10.0 * TrailingStopSell;
         ExtraPipBuy = 10.0 * ExtraPipBuy;
         ExtraPipSell = 10.0 * ExtraPipSell;
         gd_1564 = 10.0 * gd_1564;
      } else gd_740 = Point;
   } else gd_740 = Point;
   gd_440 =  LotSize ;
   gd_248 = Balance;
   if (AccountBalance() != gd_248) Balance = AccountBalance();
   g_day_652 = 500;
   gi_unused_1168 = gi_100;
   gi_unused_1172 = gi_104;
   gi_unused_1176 = UseTradingBuy;
   gi_unused_1180 = UseTradingSell;
   gi_unused_1184 = gi_164;
   gi_unused_1188 = gi_196;
   gd_unused_1192 = StepGainProfitTotal;
   gd_unused_1200 = StepGainProfitBuy;
   gd_unused_1208 = StepGainProfitSell;
   gi_unused_1216 = UseExtraPip;
   gd_unused_1220 = ExtraPipBuy;
   gd_unused_1228 = ExtraPipSell;
   gi_96 = MagicNumber;
   gi_804 = OrderDistanceSize;
   if (Digits == 5 || Digits == 3) {
      if (OrderDistanceSize == 200.0) {
         gd_356 = StepGainProfitBuy;
         gd_364 = StepGainProfitSell;
         gd_316 = StepGainProfitTotal;
         gd_284 = ProfitRollover;
         gd_340 = gd_356;
         gd_348 = gd_364;
         gd_308 = gd_316;
         gd_276 = gd_284;
      }
      if (OrderDistanceSize == 100.0) {
         gd_316 = 1.75 * StepGainProfitTotal;
         gd_356 = 1.75 * StepGainProfitBuy;
         gd_364 = 1.75 * StepGainProfitSell;
         gd_284 = 1.75 * ProfitRollover;
         gd_340 = gd_356;
         gd_348 = gd_364;
         gd_308 = gd_316;
         gd_276 = gd_284;
      }
      if (OrderDistanceSize == 50.0) {
         gd_316 = 3.5 * StepGainProfitTotal;
         gd_356 = 3.5 * StepGainProfitBuy;
         gd_364 = 3.5 * StepGainProfitSell;
         gd_284 = 3.5 * ProfitRollover;
         gd_340 = gd_356;
         gd_348 = gd_364;
         gd_308 = gd_316;
         gd_276 = gd_284;
      }
   } else {
      if (OrderDistanceSize == 20.0) {
         gd_356 = StepGainProfitBuy;
         gd_364 = StepGainProfitSell;
         gd_316 = StepGainProfitTotal;
         gd_284 = ProfitRollover;
         gd_340 = gd_356;
         gd_348 = gd_364;
         gd_308 = gd_316;
         gd_276 = gd_284;
      }
      if (OrderDistanceSize == 10.0) {
         gd_316 = 1.75 * StepGainProfitTotal;
         gd_356 = 1.75 * StepGainProfitBuy;
         gd_364 = 1.75 * StepGainProfitSell;
         gd_284 = 1.75 * ProfitRollover;
         gd_340 = gd_356;
         gd_348 = gd_364;
         gd_308 = gd_316;
         gd_276 = gd_284;
      }
      if (OrderDistanceSize == 5.0) {
         gd_316 = 3.5 * StepGainProfitTotal;
         gd_356 = 3.5 * StepGainProfitBuy;
         gd_364 = 3.5 * StepGainProfitSell;
         gd_284 = 3.5 * ProfitRollover;
         gd_340 = gd_356;
         gd_348 = gd_364;
         gd_308 = gd_316;
         gd_276 = gd_284;
      }
   }
   gd_unused_1136 = gi_220;
   gd_unused_408 = ScaleProfitClose;
   gd_440 =  LotSize ;
   gd_unused_504 = ExtraPipBuy;
   gd_unused_512 = ExtraPipSell;
   gd_unused_536 = TrailingStopBuy;
   gd_unused_552 = TrailingStopSell;
   gd_292 = AccountBalance() + gd_276;
   double ld_unused_0 = f0_0(gi_672);
   gd_unused_748 = 0;
   gi_728 = 0;
   f0_18(0);
   return (0);
}
	 	 	 	 		   					  		   	 		 	   	   		 	  	 	 		 	  		  	 	  	 			  		   		       		 				  	  		  	  			    	  			 	    			 		  		   		    			 
// 52D46093050F38C27267BCE42543EF60
int deinit() {
   return (0);
}
	     					 			 			  	 	 			  		    	 	  		   							 	          	 		 	   		   	  	  	  		  		 				     			 	 		 	 			 	   	  	    		   	 	 			  
// EA2B2676C28C0DB26D39331A336C6B92
int start() {
   int li_4;
   int cmd_8;
   int ticket_12;
   int cmd_16;
   int order_total_20;
   int count_24;
   int count_28;
   double point_36;
   double ld_44;
   double price_52;
   double price_68;
   double lots_76;
   double lots_84;
   int day_of_week_100;
   string ls_108;
   int li_124;
   bool li_128;
   int li_unused_132;
   int li_136;
   int timeframe_140;
   int li_144;
   int li_148;
   double high_152;
   double high_160;
   double high_168;
   int li_176;
   int li_180;
   int li_unused_228;
   double ld_236;
   int li_244;
   double price_248;
   string time2str_92 = TimeToStr(TimeCurrent(), TIME_SECONDS);
   g_time2str_1584 = TimeToStr(TimeLocal(), TIME_MINUTES);
   if (UseNeuralNetwork) {
      day_of_week_100 = DayOfWeek();
      for (int li_104 = 4; li_104 >= 0; li_104--) {
         gda_1252[li_104] = iCustom(Symbol(), PERIOD_D1, "NN", lastBar, futBars, smoothPer, numLayers, numInputs, numNeurons1, numNeurons2, numNeurons3, numNeurons4, numNeurons5,
            ntr, nep, maxMSEpwr, AFT, 0, (-li_104) - 1);
      }
      if (day_of_week_100 == 1) {
         g_price_1440 = 1.003 * gda_1252[0];
         g_price_1256 = 1.003 * gda_1252[1];
         g_price_1264 = 1.003 * gda_1252[2];
         g_price_1272 = 1.003 * gda_1252[3];
         g_price_1280 = 1.003 * gda_1252[4];
         Comment("Prediction list for this week. Predictions are median price closed for each bars.", Time[DayOfWeek()], " ", Time[DayOfWeek() + 1], 
            "\nH0 Closed ", g_price_1440, 
            "\nH+1 Closed ", g_price_1256, 
            "\nH+2 Closed ", g_price_1264, 
            "\nH+3 Closed ", g_price_1272, 
            "\nH+4 Closed ", g_price_1280, 
         "\nAccount  :   ", AccountNumber(), "---", AccountName(), "  Waktu :", g_time2str_1584, " DayOfWeek: ", DayOfWeek(), "  Formasi: ", gi_1572, " : ", ls_108, " TempDay: ",
            g_day_652, "  Day: ", Day());
         ObjectDelete("Prediction0");
         ObjectCreate("Prediction0", OBJ_ARROW, 0, Time[DayOfWeek() - 1], g_price_1440);
         ObjectSet("Prediction0", OBJPROP_COLOR, Orange);
      }
      if (day_of_week_100 == 2) {
         if (g_price_1440 == 0.0 || g_price_1440 > 10000.0) {
            g_price_1440 = Close[1];
            g_price_1256 = 1.003 * gda_1252[1];
            g_price_1264 = 1.003 * gda_1252[2];
            g_price_1272 = 1.003 * gda_1252[3];
            g_price_1280 = 1.003 * gda_1252[4];
         }
         Comment("Prediction list for this week. Predictions are median price closed for each bars.", Time[DayOfWeek()], " ", Time[DayOfWeek() + 1], 
            "\nH0 Closed ", g_price_1440, 
            "\nH+1 Closed ", g_price_1256, 
            "\nH+2 Closed ", g_price_1264, 
            "\nH+3 Closed ", g_price_1272, 
            "\nH+4 Closed ", g_price_1280, 
         "\nAccount  :   ", AccountNumber(), "---", AccountName(), "  Waktu :", g_time2str_1584, " DayOfWeek: ", DayOfWeek(), "  Formasi: ", gi_1572, " : ", ls_108, " TempDay: ",
            g_day_652, "  Day: ", Day());
         ObjectDelete("Prediction2");
         ObjectCreate("Prediction2", OBJ_ARROW, 0, Time[DayOfWeek() - 2], g_price_1256);
         ObjectSet("Prediction2", OBJPROP_COLOR, Orange);
      }
      if (day_of_week_100 == 3) {
         if (g_price_1256 == 0.0 || g_price_1256 > 10000.0) {
            g_price_1440 = Close[2];
            g_price_1256 = Close[1];
            g_price_1264 = 1.003 * gda_1252[2];
            g_price_1272 = 1.003 * gda_1252[3];
            g_price_1280 = 1.003 * gda_1252[4];
         }
         Comment("Prediction list for this week. Predictions are median price closed for each bars.", Time[DayOfWeek()], " ", Time[DayOfWeek() + 1], 
            "\nH0 Closed ", g_price_1440, 
            "\nH+1 Closed ", g_price_1256, 
            "\nH+2 Closed ", g_price_1264, 
            "\nH+3 Closed ", g_price_1272, 
            "\nH+4 Closed ", g_price_1280, 
         "\nAccount  :   ", AccountNumber(), "---", AccountName(), "  Waktu :", g_time2str_1584, " DayOfWeek: ", DayOfWeek(), "  Formasi: ", gi_1572, " : ", ls_108, " TempDay: ",
            g_day_652, "  Day: ", Day());
         ObjectDelete("Prediction3");
         ObjectCreate("Prediction3", OBJ_ARROW, 0, Time[DayOfWeek() - 3], g_price_1264);
         ObjectSet("Prediction3", OBJPROP_COLOR, Orange);
      }
      if (day_of_week_100 == 4) {
         if (g_price_1264 == 0.0 || g_price_1264 > 10000.0) {
            g_price_1440 = Close[3];
            g_price_1256 = Close[2];
            g_price_1264 = Close[1];
            g_price_1272 = 1.003 * gda_1252[3];
            g_price_1280 = 1.003 * gda_1252[4];
         }
         Comment("Prediction list for this week. Predictions are median price closed for each bars.", Time[DayOfWeek()], " ", Time[DayOfWeek() + 1], 
            "\nH0 Closed ", g_price_1440, 
            "\nH+1 Closed ", g_price_1256, 
            "\nH+2 Closed ", g_price_1264, 
            "\nH+3 Closed ", g_price_1272, 
            "\nH+4 Closed ", g_price_1280, 
         "\nAccount  :   ", AccountNumber(), "---", AccountName(), "  Waktu :", g_time2str_1584, " DayOfWeek: ", DayOfWeek(), "  Formasi: ", gi_1572, " : ", ls_108, " TempDay: ",
            g_day_652, "  Day: ", Day());
         ObjectDelete("Prediction4");
         ObjectCreate("Prediction4", OBJ_ARROW, 0, Time[DayOfWeek() - 4], g_price_1272);
         ObjectSet("Prediction4", OBJPROP_COLOR, Orange);
      }
      if (day_of_week_100 == 5) {
         if (g_price_1264 == 0.0 || g_price_1264 > 10000.0) {
            g_price_1440 = Close[4];
            g_price_1256 = Close[3];
            g_price_1264 = Close[2];
            g_price_1272 = Close[1];
            g_price_1280 = 1.003 * gda_1252[4];
         }
         Comment("Prediction list for this week. Predictions are median price closed for each bars.", Time[DayOfWeek()], " ", Time[DayOfWeek() + 1], 
            "\nH0 Closed ", g_price_1440, 
            "\nH+1 Closed ", g_price_1256, 
            "\nH+2 Closed ", g_price_1264, 
            "\nH+3 Closed ", g_price_1272, 
            "\nH+4 Closed ", g_price_1280, 
         "\nAccount  :   ", AccountNumber(), "---", AccountName(), "  Waktu :", g_time2str_1584, " DayOfWeek: ", DayOfWeek(), "  Formasi: ", gi_1572, " : ", ls_108, " TempDay: ",
            g_day_652, "  Day: ", Day());
         ObjectDelete("Prediction5");
         ObjectCreate("Prediction5", OBJ_ARROW, 0, Time[DayOfWeek() - 5], g_price_1280);
         ObjectSet("Prediction5", OBJPROP_COLOR, Orange);
      }
   }
   string time2str_116 = TimeToStr(TimeCurrent(), TIME_SECONDS);
   Print(time2str_116 + " Formasi : " + gi_1572 + " Equity : " + AccountEquity());
   if (gi_180) {
      if (ArraySize(gia_1592) < li_124 + 1) ArrayResize(gia_1592, li_124 + 1);
      if (!li_128) li_unused_132 = 1;
      else li_unused_132 = 0;
      li_136 = gia_1592[li_124];
      timeframe_140 = 60;
      li_144 = 0;
      li_148 = 0;
      high_152 = 0;
      high_160 = 0;
      li_176 = iBars(Symbol(), timeframe_140);
      li_180 = li_176 - LevelF;
      if (li_180 > LevelF) li_180 = li_180 - LevelF - 1;
      if (li_136 == 0) {
         while (li_180 > LevelF - 1) {
            gda_1240[li_180] = 0;
            high_168 = Low[li_180];
            for (int li_184 = 1; li_184 <= LevelF; li_184++)
               if (Low[li_180 + li_184] < Low[li_180] || Low[li_180 - li_184] < Low[li_180]) high_168 = 0;
            if (high_168 > 0.0) {
               if (high_160 != 0.0) {
                  switch (Trend) {
                  case 1:
                     if (high_168 >= high_160) break;
                     gda_1240[li_144] = high_152;
                     Trend = 2;
                     break;
                  case 2:
                     if (high_168 <= high_160) break;
                     gda_1240[li_148] = high_160;
                     Trend = 1;
                     if (li_144 < li_148) break;
                     high_152 = 0;
                     li_144 = 0;
                  }
               }
               high_160 = high_168;
               li_148 = li_180;
               gda_1244[li_148] = high_160;
            }
            high_168 = High[li_180];
            for (li_184 = 1; li_184 <= LevelF; li_184++)
               if (High[li_180 + li_184] > High[li_180] || High[li_180 - li_184] > High[li_180]) high_168 = 0;
            if (high_168 > 0.0) {
               if (high_152 != 0.0) {
                  switch (Trend) {
                  case 1:
                     if (high_168 >= high_152) break;
                     gda_1240[li_144] = high_152;
                     Trend = 2;
                     if (li_148 < li_144) break;
                     high_160 = 0;
                     li_148 = 0;
                     break;
                  case 2:
                     if (high_168 <= high_152) break;
                     gda_1240[li_148] = high_160;
                     Trend = 1;
                  }
               }
               high_152 = high_168;
               li_144 = li_180;
               gda_1244[li_144] = high_152;
            }
            li_180--;
         }
      }
      if (Trend == 1) {
         gda_1240[li_144] = high_152;
         gi_728 = 2;
      } else {
         gda_1240[li_148] = high_160;
         gi_728 = 3;
      }
   }
   if (g_price_1440 > g_price_1280) gi_732 = 3;
   if (g_price_1440 < g_price_1280) gi_732 = 2;
   g_irsi_1144 = iRSI(NULL, 0, g_period_200, PRICE_CLOSE, 0);
   double icustom_196 = iCustom(NULL, 0, "SmartBB", 1, 0);
   gd_1540 = icustom_196 - TPBand * Point;
   double icustom_204 = iCustom(NULL, 0, "SmartBB", 0, 0);
   double icustom_212 = iCustom(NULL, 0, "SmartBB", 2, 0);
   gd_1548 = icustom_212 - TPBand * Point;
   gd_1160 = f0_0(gi_672);
   gd_1152 = f0_19(gi_676);
   if (AutoOrderDistanceSize) {
      OrderDistanceSize = (gd_1160 + gd_1152) / 2.0 / (gd_124 / 2.0);
      if (Digits == 5 || Digits == 3) OrderDistanceSize = 10.0 * OrderDistanceSize;
   }
   double ld_60 = Ask - Bid;
   gd_808 = 0;
   gd_816 = 0;
   if (gi_728 != 2 && gi_728 != 3) gi_728 = 1;
   if (!IsDemo()) {
      if (!f0_9()) {
         Comment("No. Account Trading Anda tidak sesuai dengan data robot sewaktu membeli Robot ini!");
         return;
      }
   }
   string name_220 = "DateOfTrade";
   ObjectDelete(name_220);
   ObjectCreate(name_220, OBJ_LABEL, 0, 0, 0);
   ObjectSetText(name_220, "" + TimeToStr(TimeCurrent()) + " Day " + DayOfWeek(), 11, "Arial Bold", Lime);
   ObjectSet(name_220, OBJPROP_CORNER, 2);
   ObjectSet(name_220, OBJPROP_XDISTANCE, 5);
   ObjectSet(name_220, OBJPROP_YDISTANCE, 5);
   ObjectDelete("R1 Label");
   ObjectDelete("R1 Line");
   ObjectDelete("R2 Label");
   ObjectDelete("R2 Line");
   ObjectDelete("R3 Label");
   ObjectDelete("R3 Line");
   ObjectDelete("S1 Label");
   ObjectDelete("S1 Line");
   ObjectDelete("S2 Label");
   ObjectDelete("S2 Line");
   ObjectDelete("S3 Label");
   ObjectDelete("S3 Line");
   ObjectDelete("P Label");
   ObjectDelete("P Line");
   ObjectDelete("M5 Label");
   ObjectDelete("M5 Line");
   ObjectDelete("M4 Label");
   ObjectDelete("M4 Line");
   ObjectDelete("M3 Label");
   ObjectDelete("M3 Line");
   ObjectDelete("M2 Label");
   ObjectDelete("M2 Line");
   ObjectDelete("M1 Label");
   ObjectDelete("M1 Line");
   ObjectDelete("M0 Label");
   if (UseSmartSupportResitant) {
      li_unused_228 = 0;
      if (Period() > PERIOD_D1) {
         Comment("Error - Chart period is greater than 1 day.");
         return (-1);
      }
      ArrayCopyRates(gda_1044, Symbol(), PERIOD_D1);
      gd_944 = gda_1044[1][3];
      gd_960 = gda_1044[1][2];
      gd_928 = gda_1044[0][3];
      gd_936 = gda_1044[0][2];
      ArrayCopyRates(gda_1040, Symbol(), PERIOD_H1);
      for (int pos_0 = 0; pos_0 <= 25; pos_0++) {
         if (TimeMinute(gda_1040[pos_0][0]) == 0 && TimeHour(gda_1040[pos_0][0]) - gi_1132 == 0) {
            gd_1060 = gda_1040[pos_0 + 1][4];
            gd_unused_1052 = gda_1040[pos_0 + 24][1];
            gd_unused_1068 = gda_1040[pos_0][1];
            break;
         }
      }
      gd_1116 = gd_928 - gd_936;
      gd_1092 = gd_944 - gd_960;
      g_price_1000 = (gd_944 + gd_960 + gd_1060) / 3.0;
      g_price_832 = g_price_1000 + (gd_944 - gd_960) / 2.0;
      g_price_904 = g_price_1000 - (gd_944 - gd_960) / 2.0;
      g_price_840 = g_price_1000 + 0.618 * (gd_944 - gd_960);
      g_price_912 = g_price_1000 - 0.618 * (gd_944 - gd_960);
      g_price_848 = g_price_1000 + 1.0 * (gd_944 - gd_960);
      g_price_920 = g_price_1000 - 1.0 * (gd_944 - gd_960);
      g_price_896 = (g_price_840 + g_price_848) / 2.0;
      g_price_888 = (g_price_832 + g_price_840) / 2.0;
      g_price_880 = (g_price_1000 + g_price_832) / 2.0;
      g_price_872 = (g_price_1000 + g_price_904) / 2.0;
      g_price_864 = (g_price_904 + g_price_912) / 2.0;
      g_price_856 = (g_price_912 + g_price_920) / 2.0;
      if (Digits == 5) {
         g_price_848 = NormalizeDouble(g_price_848, 5);
         g_price_840 = NormalizeDouble(g_price_840, 5);
         g_price_832 = NormalizeDouble(g_price_832, 5);
         g_price_1000 = NormalizeDouble(g_price_1000, 5);
         g_price_904 = NormalizeDouble(g_price_904, 5);
         g_price_912 = NormalizeDouble(g_price_912, 5);
         g_price_920 = NormalizeDouble(g_price_920, 5);
         g_price_896 = NormalizeDouble(g_price_896, 5);
         g_price_888 = NormalizeDouble(g_price_888, 5);
         g_price_880 = NormalizeDouble(g_price_880, 5);
         g_price_872 = NormalizeDouble(g_price_872, 5);
         g_price_864 = NormalizeDouble(g_price_864, 5);
         g_price_856 = NormalizeDouble(g_price_856, 5);
      } else {
         if (Digits == 3) {
            g_price_848 = NormalizeDouble(g_price_848, 3);
            g_price_840 = NormalizeDouble(g_price_840, 3);
            g_price_832 = NormalizeDouble(g_price_832, 3);
            g_price_1000 = NormalizeDouble(g_price_1000, 3);
            g_price_904 = NormalizeDouble(g_price_904, 3);
            g_price_912 = NormalizeDouble(g_price_912, 3);
            g_price_920 = NormalizeDouble(g_price_920, 3);
            g_price_896 = NormalizeDouble(g_price_896, 3);
            g_price_888 = NormalizeDouble(g_price_888, 3);
            g_price_880 = NormalizeDouble(g_price_880, 3);
            g_price_872 = NormalizeDouble(g_price_872, 3);
            g_price_864 = NormalizeDouble(g_price_864, 3);
            g_price_856 = NormalizeDouble(g_price_856, 3);
         } else {
            if (Digits == 2) {
               g_price_848 = NormalizeDouble(g_price_848, 2);
               g_price_840 = NormalizeDouble(g_price_840, 2);
               g_price_832 = NormalizeDouble(g_price_832, 2);
               g_price_1000 = NormalizeDouble(g_price_1000, 2);
               g_price_904 = NormalizeDouble(g_price_904, 2);
               g_price_912 = NormalizeDouble(g_price_912, 2);
               g_price_920 = NormalizeDouble(g_price_920, 2);
               g_price_896 = NormalizeDouble(g_price_896, 2);
               g_price_888 = NormalizeDouble(g_price_888, 2);
               g_price_880 = NormalizeDouble(g_price_880, 2);
               g_price_872 = NormalizeDouble(g_price_872, 2);
               g_price_864 = NormalizeDouble(g_price_864, 2);
               g_price_856 = NormalizeDouble(g_price_856, 2);
            } else {
               g_price_848 = NormalizeDouble(g_price_848, 4);
               g_price_840 = NormalizeDouble(g_price_840, 4);
               g_price_832 = NormalizeDouble(g_price_832, 4);
               g_price_1000 = NormalizeDouble(g_price_1000, 4);
               g_price_904 = NormalizeDouble(g_price_904, 4);
               g_price_912 = NormalizeDouble(g_price_912, 4);
               g_price_920 = NormalizeDouble(g_price_920, 4);
               g_price_896 = NormalizeDouble(g_price_896, 4);
               g_price_888 = NormalizeDouble(g_price_888, 4);
               g_price_880 = NormalizeDouble(g_price_880, 4);
               g_price_872 = NormalizeDouble(g_price_872, 4);
               g_price_864 = NormalizeDouble(g_price_864, 4);
               g_price_856 = NormalizeDouble(g_price_856, 4);
            }
         }
      }
   }
   if (gd_1092 > 5.0) gd_1100 = gd_1092;
   else gd_1100 = 10000.0 * gd_1092;
   if (gd_1116 > 5.0) gd_1108 = gd_1116;
   else gd_1108 = 10000.0 * gd_1116;
   if (gd_1092 > 5.0) gd_1100 = gd_1092;
   else gd_1100 = 10000.0 * gd_1092;
   if (gd_1116 > 5.0) gd_1108 = gd_1116;
   else gd_1108 = 10000.0 * gd_1116;
   if (ObjectFind("R1 label") != 0) {
      ObjectCreate("R1 label", OBJ_TEXT, 0, Time[20], g_price_832);
      ObjectSetText("R1 label", " R1", 8, "Arial", Yellow);
   } else ObjectMove("R1 label", 0, Time[20], g_price_832);
   if (ObjectFind("R2 label") != 0) {
      ObjectCreate("R2 label", OBJ_TEXT, 0, Time[20], g_price_840);
      ObjectSetText("R2 label", " R2", 8, "Arial", Orange);
   } else ObjectMove("R2 label", 0, Time[20], g_price_840);
   if (ObjectFind("R3 label") != 0) {
      ObjectCreate("R3 label", OBJ_TEXT, 0, Time[20], g_price_848);
      ObjectSetText("R3 label", " R3", 8, "Arial", Red);
   } else ObjectMove("R3 label", 0, Time[20], g_price_848);
   if (ObjectFind("P label") != 0) {
      ObjectCreate("P label", OBJ_TEXT, 0, Time[20], g_price_1000);
      ObjectSetText("P label", "Pivot", 8, "Arial", DeepPink);
   } else ObjectMove("P label", 0, Time[20], g_price_1000);
   if (ObjectFind("S1 label") != 0) {
      ObjectCreate("S1 label", OBJ_TEXT, 0, Time[20], g_price_904);
      ObjectSetText("S1 label", "S1", 8, "Arial", Yellow);
   } else ObjectMove("S1 label", 0, Time[20], g_price_904);
   if (ObjectFind("S2 label") != 0) {
      ObjectCreate("S2 label", OBJ_TEXT, 0, Time[20], g_price_912);
      ObjectSetText("S2 label", "S2", 8, "Arial", Orange);
   } else ObjectMove("S2 label", 0, Time[20], g_price_912);
   if (ObjectFind("S3 label") != 0) {
      ObjectCreate("S3 label", OBJ_TEXT, 0, Time[20], g_price_920);
      ObjectSetText("S3 label", "S3", 8, "Arial", Red);
   } else ObjectMove("S3 label", 0, Time[20], g_price_920);
   if (ObjectFind("M5 line") != 0) {
      ObjectCreate("M5 line", OBJ_HLINE, 0, Time[40], g_price_896);
      ObjectSet("M5 line", OBJPROP_STYLE, STYLE_DOT);
      ObjectSet("M5 line", OBJPROP_COLOR, White);
   } else ObjectMove("M5 line", 0, Time[40], g_price_896);
   if (ObjectFind("M4 line") != 0) {
      ObjectCreate("M4 line", OBJ_HLINE, 0, Time[40], g_price_888);
      ObjectSet("M4 line", OBJPROP_STYLE, STYLE_DOT);
      ObjectSet("M4 line", OBJPROP_COLOR, White);
   } else ObjectMove("M4 line", 0, Time[40], g_price_888);
   if (ObjectFind("M3 line") != 0) {
      ObjectCreate("M3 line", OBJ_HLINE, 0, Time[40], g_price_880);
      ObjectSet("M3 line", OBJPROP_STYLE, STYLE_DOT);
      ObjectSet("M3 line", OBJPROP_COLOR, White);
   } else ObjectMove("M3 line", 0, Time[40], g_price_880);
   if (ObjectFind("M2 line") != 0) {
      ObjectCreate("M2 line", OBJ_HLINE, 0, Time[40], g_price_872);
      ObjectSet("M2 line", OBJPROP_STYLE, STYLE_DOT);
      ObjectSet("M2 line", OBJPROP_COLOR, White);
   } else ObjectMove("M2 line", 0, Time[40], g_price_872);
   if (ObjectFind("M1 line") != 0) {
      ObjectCreate("M1 line", OBJ_HLINE, 0, Time[40], g_price_864);
      ObjectSet("M1 line", OBJPROP_STYLE, STYLE_DOT);
      ObjectSet("M1 line", OBJPROP_COLOR, White);
   } else ObjectMove("M1 line", 0, Time[40], g_price_864);
   if (ObjectFind("M0 line") != 0) {
      ObjectCreate("M0 line", OBJ_HLINE, 0, Time[40], g_price_856);
      ObjectSet("M0 line", OBJPROP_STYLE, STYLE_DOT);
      ObjectSet("M0 line", OBJPROP_COLOR, White);
   } else ObjectMove("M0 line", 0, Time[40], g_price_856);
   if (ObjectFind("S1 line") != 0) {
      ObjectCreate("S1 line", OBJ_HLINE, 0, Time[40], g_price_904);
      ObjectSet("S1 line", OBJPROP_STYLE, STYLE_SOLID);
      ObjectSet("S1 line", OBJPROP_COLOR, Yellow);
   } else ObjectMove("S1 line", 0, Time[40], g_price_904);
   if (ObjectFind("S2 line") != 0) {
      ObjectCreate("S2 line", OBJ_HLINE, 0, Time[40], g_price_912);
      ObjectSet("S2 line", OBJPROP_STYLE, STYLE_SOLID);
      ObjectSet("S2 line", OBJPROP_COLOR, Orange);
   } else ObjectMove("S2 line", 0, Time[40], g_price_912);
   if (ObjectFind("S3 line") != 0) {
      ObjectCreate("S3 line", OBJ_HLINE, 0, Time[40], g_price_920);
      ObjectSet("S3 line", OBJPROP_STYLE, STYLE_SOLID);
      ObjectSet("S3 line", OBJPROP_COLOR, Red);
   } else ObjectMove("S3 line", 0, Time[40], g_price_920);
   if (ObjectFind("P line") != 0) {
      ObjectCreate("P line", OBJ_HLINE, 0, Time[40], g_price_1000);
      ObjectSet("P line", OBJPROP_STYLE, STYLE_SOLID);
      ObjectSet("P line", OBJPROP_COLOR, DeepPink);
   } else ObjectMove("P line", 0, Time[40], g_price_1000);
   if (ObjectFind("R1 line") != 0) {
      ObjectCreate("R1 line", OBJ_HLINE, 0, Time[40], g_price_832);
      ObjectSet("R1 line", OBJPROP_STYLE, STYLE_SOLID);
      ObjectSet("R1 line", OBJPROP_COLOR, Yellow);
   } else ObjectMove("R1 line", 0, Time[40], g_price_832);
   if (ObjectFind("R2 line") != 0) {
      ObjectCreate("R2 line", OBJ_HLINE, 0, Time[40], g_price_840);
      ObjectSet("R2 line", OBJPROP_STYLE, STYLE_SOLID);
      ObjectSet("R2 line", OBJPROP_COLOR, Orange);
   } else ObjectMove("R2 line", 0, Time[40], g_price_840);
   if (ObjectFind("R3 line") != 0) {
      ObjectCreate("R3 line", OBJ_HLINE, 0, Time[40], g_price_848);
      ObjectSet("R3 line", OBJPROP_STYLE, STYLE_SOLID);
      ObjectSet("R3 line", OBJPROP_COLOR, Red);
   } else ObjectMove("R3 line", 0, Time[40], g_price_848);
   if (UseSmartSupportResitant) {
      if (gi_196 == 0) {
         switch (gi_220) {
         case 0:
            g_price_224 = g_price_1000;
            g_price_232 = g_price_1000;
            break;
         case 1:
            g_price_224 = g_price_832;
            g_price_232 = g_price_904;
            break;
         case 2:
            g_price_224 = g_price_840;
            g_price_232 = g_price_912;
            break;
         case 3:
            g_price_224 = g_price_848;
            g_price_232 = g_price_920;
         }
         if (gi_164 && gi_220 < 4) {
            if (Bid < g_price_232) {
               UseTradingSell = FALSE;
               UseTradingBuy = TRUE;
            }
            if (Bid > g_price_224) {
               UseTradingSell = TRUE;
               UseTradingBuy = FALSE;
            }
         }
         if (!gi_164 && gi_220 < 4) {
            if (Bid < g_price_232) {
               UseTradingSell = TRUE;
               UseTradingBuy = FALSE;
            }
            if (Bid > g_price_224) {
               UseTradingSell = FALSE;
               UseTradingBuy = TRUE;
            }
         }
      }
   }
   if (gi_196 == 3) {
      UseTradingBuy = FALSE;
      UseTradingSell = FALSE;
      if (g_day_652 != Day()) TradeEnable = TRUE;
      else TradeEnable = FALSE;
      if (gi_728 == 3 && gi_732 == 2 && TradeEnable) {
         if (Open[2] > Close[2] && Open[1] < Close[1] && Open[1] < Low[2] && Close[1] < Open[2] && Close[1] > Open[2] - (Open[2] - Close[2]) / 2.0) {
            UseTradingBuy = TRUE;
            gi_1572 = 28;
         }
         if (Open[2] > Close[2] && Open[2] == High[2] && Close[2] == Low[2] && Open[1] < Close[1] && Open[1] == Low[1] && Close[1] == High[1] && Open[1] - Open[2] > 0.0) {
            UseTradingBuy = TRUE;
            gi_1572 = 29;
         }
         if (Open[3] > Close[3] && Open[1] < Close[1] && Open[3] > Close[1] && Close[3] >= Open[1] && f0_10(2) && Low[3] - High[2] > 0.0 && Low[1] - High[2] > 0.0 && Low[1] != Low[3]) {
            UseTradingBuy = TRUE;
            gi_1572 = 30;
         }
         if (Open[3] > Close[3] && f0_10(2) && Open[1] < Close[1] && (Low[3] - High[2] > 0.0 && Low[3] >= High[2] && High[3] >= High[1]) && (High[2] - Low[1] >= 0.0 && Low[1] <= High[2] &&
            High[2] >= Low[1]) && Close[3] >= Open[1] && Open[3] > Close[1]) {
            UseTradingBuy = TRUE;
            gi_1572 = 31;
         }
         if (Open[3] > Close[3] && Open[2] > Close[2] || Open[2] < Close[2] && (Open[2] - Close[2] > 0.0 && Open[2] - Close[2] < (Open[3] - Close[3]) / 2.0 || Close[2] - Open[2] > 0.0 &&
            Close[2] - Open[2] < (Open[3] - Close[3]) / 2.0) && Open[1] < Close[1] && Low[3] - High[2] > 0.0 || Low[3] >= High[2] || High[2] >= Low[3] && Low[1] - High[2] > 0.0 ||
            Low[1] >= High[2] || High[2] >= Low[1] && Close[3] >= Open[1] && Open[3] > Close[1]) {
            UseTradingBuy = TRUE;
            gi_1572 = 34;
         }
         if (Open[3] > Close[3] && Open[2] < Close[2] && Open[1] < Close[1] && Open[3] - Close[3] > Close[2] - Open[2] && Close[1] > Close[2] && Open[1] >= Close[1] || Open[1] < Close[2] &&
            Close[1] > Open[3] && Close[1] > Close[2] && Close[3] < Open[2] && Open[3] > Close[2]) {
            UseTradingBuy = TRUE;
            gi_1572 = 37;
         }
         if (Open[3] > Close[3] && Open[2] < Close[2] && Open[1] < Close[1] && Open[3] - Close[3] < Close[2] - Open[2] && Open[1] < Close[2] && Close[3] > Open[2] && Close[2] > Open[3] &&
            Close[2] > Open[1] && Open[3] < Close[2] && Close[1] > Close[2]) {
            UseTradingBuy = TRUE;
            gi_1572 = 38;
         }
         if (Open[4] < Close[4] && Open[3] < Close[3] && Open[2] < Close[2] && Open[1] < Close[1] && Open[4] == High[4] && Close[4] == Low[4] && Open[3] == High[3] && Close[3] == Low[3] &&
            Open[1] == High[1] && Close[1] == Low[1] && High[2] - Open[2] > 2.0 * (Open[2] - Close[2]) && Close[3] - Open[2] > 0.0 && Open[2] < Close[3] && Open[4] > Open[3] && Close[4] > Close[3] && Close[1] < Close[2] && Open[1] > High[2] && Open[4] > Open[1]) {
            UseTradingBuy = TRUE;
            gi_1572 = 41;
         }
         if (Open[1] > Close[1] && (Open[1] - Close[1] > 0.0 && Open[1] - Close[1] < 0.2 * (High[1] - Low[1])) && (High[2] - Open[2] < 0.3 * (High[2] - Low[2]) && Close[1] - Low[1] > 0.7 * (High[1] - Low[1])) &&
            High[1] - Low[1] > 100.0 * Point) {
            UseTradingBuy = TRUE;
            gi_1572 = 42;
         }
         if (Open[1] < Close[1] && (Close[1] - Open[1] > 0.0 && Close[1] - Open[1] < 0.2 * (High[1] - Low[1])) && (High[2] - Close[2] < 0.3 * (High[2] - Low[2]) && Open[1] - Low[1] > 0.7 * (High[1] - Low[1])) &&
            High[1] - Low[1] > 100.0 * Point) {
            UseTradingBuy = TRUE;
            gi_1572 = 42;
         }
         if (Open[1] > Close[1] && (Open[1] - Close[1] > 0.0 && Open[1] - Close[1] < (High[1] - Open[1]) / 50.0) && Close[1] == Low[1] && High[1] - Close[1] > 100.0 * Point) {
            UseTradingBuy = TRUE;
            gi_1572 = 42;
         }
         if (Open[1] < Close[1] && (Close[1] - Open[1] > 0.0 && Close[1] - Open[1] < (High[1] - Close[1]) / 50.0) && Open[1] == Low[1] && High[1] - Open[1] > 100.0 * Point) {
            UseTradingBuy = TRUE;
            gi_1572 = 42;
         }
         if (Open[1] == Close[1] == Low[1] && High[1] - Close[1] > 100.0 * Point) {
            UseTradingBuy = TRUE;
            gi_1572 = 42;
         }
         if (Open[1] == Close[1] && High[1] - Close[1] > 100.0 * Point) {
            UseTradingBuy = TRUE;
            gi_1572 = 42;
         }
         if ((Open[1] - Close[1] >= 0.0 && Open[1] - Close[1] <= 10.0 * Point) || (Close[1] - Open[1] >= 0.0 && Close[1] - Open[1] <= 10.0 * Point) && Open[1] < Close[1] ||
            Open[1] < Close[1] && ((High[1] - Open[1] / Close[1] - Low[1] >= 1.0 && High[1] - Open[1] / Close[1] - Low[1] < 2.0) || High[1] - Close[1] / Open[1] - Low[1] >= 1.0 &&
            High[1] - Close[1] / Open[1] - Low[1] < 2.0)) {
            UseTradingBuy = TRUE;
            gi_1572 = 43;
         }
         if (Open[2] > Close[2] && Open[1] < Close[1] && Close[2] > Open[1] && Open[2] < Close[1] && Close[1] - Open[1] > 1.2 * (Open[2] - Close[2]) && Open[0] - Close[1] > 0.0) {
            UseTradingBuy = TRUE;
            gi_1572 = 44;
         }
         if (Open[2] > Close[2] && Open[1] > Close[1] || Open[1] < Close[1] && Open[1] > Close[1] || Open[1] < Close[1] && (Open[1] - Close[1] >= 0.0 && Open[1] - Close[1] <= 10.0 * Point) ||
            (Close[1] - Open[1] >= 0.0 && Close[1] - Open[1] <= 10.0 * Point) && Open[1] < Close[1] || Open[1] > Close[1] && (Low[1] - Close[1] / Open[1] - High[1] >= 0.0 && Low[1] - Close[1] / Open[1] - High[1] < 0.03) ||
            (Low[1] - Open[1] / Close[1] - High[1] >= 1.0 && Low[1] - Open[1] / Close[1] - High[1] < 0.03)) {
            UseTradingBuy = TRUE;
            gi_1572 = 45;
         }
         if (Open[2] > Close[2] && Open[1] > Close[1] && (Open[1] - Close[1] >= 0.0 && Open[1] - Close[1] <= 5.0 * Point) || (Close[1] - Open[1] >= 0.0 && Close[1] - Open[1] <= 5.0 * Point) &&
            Open[1] < Close[1] || Open[1] < Close[1] && (Low[1] - Close[1] / Open[1] - High[1] >= 1.0 && Low[1] - Close[1] / Open[1] - High[1] < 1.2) || (Low[1] - Open[1] / Close[1] - High[1] >= 1.0 &&
            Low[1] - Open[1] / Close[1] - High[1] < 1.2) && Open[1] < Close[1] || Open[1] > Close[1] && Close[1] - High[1] > 0.0) {
            UseTradingBuy = TRUE;
            gi_1572 = 46;
         }
         if (Open[2] > Close[2] && (Open[1] - Close[1] >= 0.0 && Open[1] - Close[1] <= 10.0 * Point) || (Close[1] - Open[1] >= 0.0 && Close[1] - Open[1] <= 10.0 * Point) &&
            Open[1] < Close[1] || Open[1] < Close[1] && (Low[1] - Close[1] / Open[1] - High[1] >= 1.0 && Low[1] - Close[1] / Open[1] - High[1] < 1.2) || (Low[1] - Open[1] / Close[1] - High[1] >= 1.0 &&
            Low[1] - Open[1] / Close[1] - High[1] < 1.2) && Open[1] < Close[1] || Open[1] > Close[1] && Open[1] < Open[2] && Close[1] > Close[2]) {
            UseTradingBuy = TRUE;
            gi_1572 = 47;
         }
         if (Open[2] > Close[2] && Open[1] > Close[1] && Open[2] > Open[1] && Close[2] < Close[1] && Open[2] - Close[2] > 2.0 * (Close[1] - Open[1])) {
            UseTradingBuy = TRUE;
            gi_1572 = 48;
         }
         if (Open[2] > Close[2] && Open[1] > Close[1] && Open[2] > Open[1] && (Close[2] <= Close[1] && Close[2] > 1.02 * Close[1]) || (Close[1] <= Close[2] && Close[1] > 1.02 * Close[2]) &&
            Open[2] - Close[2] > 1.5 * (Open[1] - Close[1])) {
            UseTradingBuy = TRUE;
            gi_1572 = 49;
         }
         if (Open[2] > Close[2] && Open[1] < Close[1] && Open[1] <= Close[2] && Open[2] - Close[2] > 50.0 * Point && Close[1] - Open[1] > 50.0 * Point && (Close[1] >= Close[2] &&
            Close[1] < 1.001 * Close[2])) {
            UseTradingBuy = TRUE;
            gi_1572 = 50;
         }
         if (Open[3] > Close[3] && Open[2] < Close[2] && Open[1] > Close[1] && Close[3] == Low[3] && Close[1] == Low[1] && Open[2] > Close[3] && Close[2] > Open[3] && Open[1] > Close[2] &&
            Open[1] > Open[3] && Close[3] - Close[1] < 10.0 * Point || Close[1] - Close[3] < 10.0 * Point) {
            UseTradingBuy = TRUE;
            gi_1572 = 51;
         }
         if (Open[3] > Close[3] && Open[2] > Close[2] && Open[1] > Close[1] && High[3] == Open[3] && High[2] == Open[2] && High[1] == Open[1] && Low[1] == Close[1] || Close[1] - Low[1] > 0.0 * Point &&
            Open[3] > Open[2] && Open[2] > Open[1] && Close[3] > Close[2] && Close[2] > Close[1]) {
            UseTradingBuy = TRUE;
            gi_1572 = 801;
         }
         if (f0_10(3) && f0_10(2) && f0_10(1) && Low[2] < Low[3] && High[2] < High[3] && High[2] < High[1] && Low[2] < Low[1]) {
            UseTradingBuy = TRUE;
            gi_1572 = 52;
         }
         if (Open[3] > Close[3] && Open[2] > Close[2] && High[2] == Open[2] || High[2] - Open[2] > 0.0 * Point && Open[1] < Close[1] && Open[3] > Open[2] && Close[2] > Close[1] &&
            Low[2] < Close[3] && Low[2] < Open[1]) {
            UseTradingBuy = TRUE;
            gi_1572 = 527;
         }
         if (Open[5] > Close[5] && Open[4] > Close[4] && Open[3] > Close[3] || Open[3] < Close[3] && Open[2] > Close[2] && Open[1] < Close[1] && Open[5] > Close[1] && Close[1] > Open[4] &&
            Close[1] > Open[3] || Close[1] > Close[3] && Close[1] > Open[2] && Open[1] < Close[5] && Close[2] < Open[1] && Close[5] > Open[4] && Open[4] > Open[3] || Open[4] > Close[3] &&
            Open[3] > Open[2] || Close[3] > Open[2] && Close[2] < Close[3] || Close[2] < Open[3] && Close[2] < Close[4]) {
            UseTradingBuy = TRUE;
            gi_1572 = 777;
         }
         if (Open[5] > Close[5] && Open[4] > Close[4] && Open[3] > Close[3] && Open[2] > Close[2] && Close[2] == Low[2] || Close[2] - Low[2] > 0.0 * Point && Open[1] < Close[1] &&
            Open[5] > Close[1] && Open[5] > Open[4] && Open[5] > Open[3] && Open[5] > High[2] && Close[5] > Close[4] && Close[4] > Close[3] && Close[3] > Close[2] && Open[2] < Open[1] &&
            Close[2] < Open[1] && Open[5] - Close[5] > 40.0 * Point && Open[4] - Close[5] > 40.0 * Point && Open[3] - Close[5] > 40.0 * Point && Close[1] - Open[5] > 40.0 * Point) {
            UseTradingBuy = TRUE;
            gi_1572 = 888;
         }
         if (Open[5] < Close[5] && Open[4] > Close[4] && Open[3] > Close[3] && Open[2] > Close[2] && Open[1] < Close[1] && Close[5] > High[4] && Close[4] < High[3] && Close[3] < High[2] &&
            Open[1] <= Close[1] && Low[1] < Low[5]) {
            UseTradingBuy = TRUE;
            gi_1572 = 53;
         }
         if (Open[2] > Close[2] && Open[2] - Close[2] > 1.5 * (Close[1] - Open[1]) && Open[1] < Close[1] && Open[2] > Close[1] && Close[2] < Open[1]) {
            UseTradingBuy = TRUE;
            gi_1572 = 5400;
         }
         if (Open[2] > Close[2] && (Open[2] - Close[2] > 0.0 && Open[2] - Close[2] < 0.2 * (High[2] - Low[2])) && (High[2] - Open[2] < 0.6 * (High[2] - Low[2]) && Close[2] - Low[2] < 0.6 * (High[2] - Low[2])) &&
            High[2] - Low[2] > 60.0 * Point && Open[1] < Close[1] && Close[1] > Open[2]) {
            UseTradingBuy = TRUE;
            gi_1572 = 717;
         }
         if (Open[1] < Close[1] && (Close[1] - Open[1] > 0.0 && Close[1] - Open[1] < 0.2 * (High[1] - Low[1])) && (High[2] - Close[1] < 0.6 * (High[1] - Low[1]) && Open[1] - Low[1] < 0.6 * (High[1] - Low[1])) &&
            High[1] - Low[1] > 60.0 * Point && Open[1] < Close[1] && Close[1] > Open[2]) {
            UseTradingBuy = TRUE;
            gi_1572 = 717;
         }
         if (Open[2] < Close[2] && Open[1] > Close[1] && Open[2] - Open[1] >= Close[2] - Open[2] && Low[2] > High[1]) {
            UseTradingBuy = TRUE;
            gi_1572 = 56;
         }
         if (Open[4] < Close[4] && Open[3] > Close[3] && Open[3] <= Open[4] && Open[3] >= Low[4] && Low[3] < Close[4] && Low[3] > Open[4] && Open[2] - Close[2] == Open[1] - Close[1]) {
            UseTradingBuy = TRUE;
            gi_1572 = 57;
         }
         if (Open[2] < Close[2] && Open[2] - Low[2] > 4.0 * (Close[2] - Open[2]) && Open[2] - Low[2] > 4.0 * (High[2] - Close[2]) && Open[1] < Close[1]) {
            UseTradingBuy = TRUE;
            gi_1572 = 58;
         }
         if (Open[2] > Close[2] && Close[2] - Low[2] > 4.0 * (Open[2] - Close[2]) && Close[2] - Low[2] > 4.0 * (High[2] - Open[2]) && Open[1] < Close[1]) {
            UseTradingBuy = TRUE;
            gi_1572 = 58;
         }
         if (Open[2] > Close[2] && High[2] == Open[2] && Close[2] - Low[2] > 2.0 * (Open[2] - Close[2]) && Open[1] > Close[1] && Close[1] < Close[2]) {
            UseTradingBuy = TRUE;
            gi_1572 = 600;
         }
         if (Open[2] > Close[2] && Close[2] - Low[2] > 2.0 * (Open[2] - Close[2]) && (High[2] - Open[2]) / (Close[2] - Low[2]) < 0.05 && Open[1] > Close[1] && Close[1] < Close[2]) {
            UseTradingBuy = TRUE;
            gi_1572 = 600;
         }
         if (Open[2] < Close[2] && High[2] == Close[2] && Open[2] - Low[2] > 2.0 * (Close[2] - Open[2]) && Open[1] > Close[1] && Close[1] < Close[2]) {
            UseTradingBuy = TRUE;
            gi_1572 = 600;
         }
         if (Open[2] < Close[2] && Open[2] - Low[2] > 2.0 * (Close[2] - Open[2]) && (High[2] - Close[2]) / (Open[2] - Low[2]) < 0.05 && Open[1] > Close[1] && Close[1] < Close[2]) {
            UseTradingBuy = TRUE;
            gi_1572 = 600;
         }
         if (Open[2] > Close[2] > Open[2] - Close[2] && (30.0 * Point && Open[2] - Close[2] < 100.0 * Point) && High[2] - Open[2] > 2.0 * Open[2] - Close[2] && Close[2] - Low[2] > 2.0 * Open[2] - Close[2] &&
            Open[1] < Close[1] && Ask > Open[0]) {
            UseTradingBuy = TRUE;
            gi_1572 = 2226;
         }
         if (Open[2] < Close[2] > Close[2] - Open[2] && (30.0 * Point && Close[2] - Open[2] < 100.0 * Point) && High[2] - Close[2] > 2.0 * Close[2] - Open[2] && Open[2] - Low[2] > 2.0 * Close[2] - Open[2] &&
            Open[1] < Close[1] && Ask > Open[0]) {
            UseTradingBuy = TRUE;
            gi_1572 = 2226;
         }
         gd_764 += gd_756 * gd_740;
         gd_788 = gd_764 - (gd_756 + gi_804) * gd_740;
         gi_796 = TRUE;
         gi_800 = FALSE;
      }
      if (gi_728 == 2 && gi_732 == 3 && TradeEnable) {
         if (Open[2] < Close[2] && Open[1] > Close[1] && (Close[1] < Close[2] - (Close[2] - Open[2]) / 2.0 && Close[1] > Open[2]) && (Close[2] > Open[1] - (Open[1] - Close[1]) / 2.0 &&
            Close[2] < Open[1])) {
            UseTradingSell = TRUE;
            gi_1572 = 1;
         }
         if (Open[3] < Close[3] && Open[3] == Low[3] && Close[3] == High[3] && Open[2] > Close[2] && Open[2] == High[2] && Close[2] == Low[2] && Open[3] - Open[2] > 0.0 && Open[1] < Close[1]) {
            UseTradingSell = TRUE;
            gi_1572 = 2;
         }
         if (Open[3] < Close[3] && Open[1] > Close[1] && Close[3] > Open[1] && Open[3] <= Close[1] && Open[2] == Close[2] == High[2] == Low[2] || High[2] - Open[2] >= Close[2] - Low[2] ||
            High[2] - Open[2] <= Close[2] - Low[2] && Low[2] - High[3] > 0.0 && Low[2] - High[1] > 0.0 && High[1] != Low[3]) {
            UseTradingSell = TRUE;
            gi_1572 = 3;
         }
         if (Open[3] < Close[3] && Open[2] == Close[2] == High[2] == Low[2] || High[2] - Open[2] >= Close[2] - Low[2] || High[2] - Open[2] <= Close[2] - Low[2] && Open[1] > Close[1] &&
            Low[2] - High[3] > 0.0 || Low[2] >= High[3] || Low[2] > High[3] && High[2] - High[1] > 0.0 || High[1] >= Low[2] || Low[2] >= High[1] && Close[3] <= Open[1] && Open[3] < Close[1]) {
            UseTradingSell = TRUE;
            gi_1572 = 4;
         }
         if (Open[4] < Close[4] && Open[3] == Close[3] == High[3] == Low[3] || High[3] - Open[3] >= Close[3] - Low[3] || High[2] - Open[3] <= Close[3] - Low[3] && Open[2] == Close[2] == High[2] == Low[2] ||
            High[2] - Open[2] >= Close[2] - Low[2] || High[2] - Open[2] <= Close[2] - Low[2] && Open[1] > Close[1] && Low[3] - High[4] > 0.0 || Low[3] >= High[4] || Low[4] >= Low[3] &&
            High[3] - High[1] > 0.0 || High[1] >= Low[3] || Low[3] >= High[1] && Low[2] - High[4] > 0.0 || Low[2] >= High[4] || Low[4] >= Low[2] && High[2] - High[1] > 0.0 || High[1] >= Low[2] ||
            Low[2] >= High[1] && Close[4] <= Open[1] && Open[4] < Close[1]) {
            UseTradingSell = TRUE;
            gi_1572 = 5;
         }
         if (Open[5] < Close[5] && Open[4] == Close[4] == High[4] == Low[4] || High[4] - Open[4] >= Close[4] - Low[4] || High[4] - Open[4] <= Close[4] - Low[4] && Open[3] == Close[3] == High[3] == Low[3] ||
            High[3] - Open[3] >= Close[3] - Low[3] || High[3] - Open[3] <= Close[3] - Low[3] && Open[2] == Close[2] == High[2] == Low[2] || High[2] - Open[2] >= Close[2] - Low[2] ||
            High[2] - Open[2] <= Close[2] - Low[2] && Open[1] > Close[1] && Low[4] - High[5] > 0.0 || Low[4] >= High[5] || Low[5] >= Low[4] && High[4] - High[1] > 0.0 || High[1] >= Low[4] ||
            Low[4] >= High[1] && Low[3] - High[5] > 0.0 || Low[3] >= High[5] || Low[5] >= Low[3] && High[3] - High[1] > 0.0 || High[1] >= Low[3] || Low[3] >= High[1] && Low[2] - High[5] > 0.0 ||
            Low[2] >= High[5] || Low[5] >= Low[2] && High[2] - High[1] > 0.0 || High[1] >= Low[2] || Low[2] >= High[1] && Close[5] <= Open[1] && Open[5] < Close[1]) {
            UseTradingSell = TRUE;
            gi_1572 = 6;
         }
         if (Open[3] < Close[3] && Open[2] > Close[2] || Open[2] < Close[2] && (Open[2] - Close[2] > 0.0 && Open[2] - Close[2] < (Open[3] - Close[3]) / 2.0 || Close[2] - Open[2] > 0.0 &&
            Close[2] - Open[2] < (Open[3] - Close[3]) / 2.0) && Open[1] > Close[1] && Low[2] - High[3] > 0.0 || Low[2] >= High[3] || Low[2] >= High[3] && High[1] - Low[2] >= 0.0 ||
            Low[1] <= High[2] || High[2] >= High[1] && Close[3] <= Open[1] && Open[3] < Close[1]) {
            UseTradingSell = TRUE;
            gi_1572 = 7;
         }
         if (Open[4] < Close[4] && Open[3] > Close[3] || Open[3] < Close[3] && (Open[3] - Close[3] > 0.0 && Open[3] - Close[3] < (Open[4] - Close[4]) / 2.0 || Close[3] - Open[3] > 0.0 &&
            Close[3] - Open[3] < (Open[4] - Close[4]) / 2.0) && Open[2] > Close[2] || Open[2] < Close[2] && (Open[2] - Close[2] > 0.0 && Open[2] - Close[2] < (Open[3] - Close[3]) / 2.0 ||
            Close[2] - Open[2] > 0.0 && Close[2] - Open[2] < (Open[4] - Close[4]) / 2.0) && Open[1] > Close[1] && Low[3] - High[4] > 0.0 || Low[3] >= High[4] || Low[3] >= High[4] &&
            High[1] - Low[3] >= 0.0 || Low[1] <= High[3] || High[3] >= High[1] && Low[2] - High[4] > 0.0 || Low[2] >= High[4] || Low[2] >= High[4] && High[1] - Low[2] >= 0.0 ||
            Low[1] <= High[2] || High[2] >= High[1] && Close[4] <= Open[1] && Open[4] < Close[1]) {
            UseTradingSell = TRUE;
            gi_1572 = 8;
         }
         if (Open[5] < Close[5] && Open[4] > Close[4] || Open[4] < Close[4] && (Open[4] - Close[4] > 0.0 && Open[4] - Close[4] < (Open[5] - Close[5]) / 2.0 || Close[4] - Open[4] > 0.0 &&
            Close[4] - Open[4] < (Open[5] - Close[5]) / 2.0) && Open[2] > Close[2] || Open[2] < Close[2] && (Open[3] - Close[3] > 0.0 && Open[3] - Close[3] < (Open[5] - Close[5]) / 2.0 ||
            Close[3] - Open[3] > 0.0 && Close[3] - Open[3] < (Open[5] - Close[5]) / 2.0) && Open[2] > Close[2] || Open[2] < Close[2] && (Open[2] - Close[2] > 0.0 && Open[2] - Close[2] < (Open[5] - Close[5]) / 2.0 ||
            Close[2] - Open[2] > 0.0 && Close[2] - Open[2] < (Open[5] - Close[5]) / 2.0) && Open[1] > Close[1] && Low[4] - High[5] > 0.0 || Low[4] >= High[5] || Low[4] >= High[5] &&
            High[1] - Low[4] >= 0.0 || Low[1] <= High[4] || High[4] >= High[1] && Low[3] - High[5] > 0.0 || Low[3] >= High[5] || Low[3] >= High[5] && High[1] - Low[3] >= 0.0 ||
            Low[1] <= High[3] || High[3] >= High[1] && Low[2] - High[5] > 0.0 || Low[2] >= High[5] || Low[2] >= High[5] && High[1] - Low[2] >= 0.0 || Low[1] <= High[2] || High[2] >= High[1] &&
            Close[5] <= Open[1] && Open[5] < Close[1]) {
            UseTradingSell = TRUE;
            gi_1572 = 9;
         }
         if (Open[3] < Close[3] && Open[2] > Close[2] && Open[3] - Close[3] > Close[2] - Open[2] && Close[1] < Close[2] && Open[1] < Open[2] || Open[1] > Close[2] && Close[1] < Open[3] &&
            Close[1] < Close[3] && Close[3] < Close[2] && Open[3] < Close[2]) {
            UseTradingSell = TRUE;
            gi_1572 = 10;
         }
         if (Open[3] < Close[3] && Open[2] > Close[2] && Open[1] > Close[2] && Close[3] - Open[3] < Open[2] - Close[2] && Close[3] < Open[2] && Close[2] > Close[1] && Open[3] < Close[2] &&
            Open[2] <= Open[1]) {
            UseTradingSell = TRUE;
            gi_1572 = 11;
         }
         if (Open[3] > Close[3] && Open[2] > Close[2] && Open[1] > Close[1] && (Open[2] >= Close[3] && Open[2] < Open[3]) && (Open[1] >= Close[2] && Open[1] < Open[2]) && Close[3] > Close[2] &&
            Close[2] > Close[1] && Open[3] > Open[2] && Open[2] > Open[1]) {
            UseTradingSell = TRUE;
            gi_1572 = 12;
         }
         if (Open[3] < Close[3] && Open[2] > Close[2] && Open[1] > Close[1] && Close[3] - Close[2] > 0.0 && Open[1] > Open[2] && Close[1] < Close[2] && Close[1] >= Close[3] &&
            Close[2] > Close[3]) {
            UseTradingSell = TRUE;
            gi_1572 = 13;
         }
         if (Open[1] > Close[1] && (Open[1] - Close[1] > 0.0 && Open[1] - Close[1] < 0.2 * (High[1] - Low[1])) && (High[2] - Open[2] < 0.3 * (High[2] - Low[2]) && Close[1] - Low[1] > 0.7 * (High[1] - Low[1])) &&
            High[1] - Low[1] > 100.0 * Point) {
            UseTradingSell = TRUE;
            gi_1572 = 422;
         }
         if (Open[1] < Close[1] && (Close[1] - Open[1] > 0.0 && Close[1] - Open[1] < 0.2 * (High[1] - Low[1])) && (High[2] - Close[2] < 0.3 * (High[2] - Low[2]) && Open[1] - Low[1] > 0.7 * (High[1] - Low[1])) &&
            High[1] - Low[1] > 100.0 * Point) {
            UseTradingSell = TRUE;
            gi_1572 = 422;
         }
         if (Open[1] > Close[1] && (Open[1] - Close[1] > 0.0 && Open[1] - Close[1] < (High[1] - Open[1]) / 50.0) && Close[1] == Low[1] && High[1] - Close[1] > 100.0 * Point) {
            UseTradingSell = TRUE;
            gi_1572 = 422;
         }
         if (Open[1] < Close[1] && (Close[1] - Open[1] > 0.0 && Close[1] - Open[1] < (High[1] - Close[1]) / 50.0) && Open[1] == Low[1] && High[1] - Open[1] > 100.0 * Point) {
            UseTradingSell = TRUE;
            gi_1572 = 422;
         }
         if (Open[1] == Close[1] == Low[1] && High[1] - Close[1] > 100.0 * Point) {
            UseTradingSell = TRUE;
            gi_1572 = 422;
         }
         if (Open[1] == Close[1] && High[1] - Close[1] > 100.0 * Point) {
            UseTradingSell = TRUE;
            gi_1572 = 422;
         }
         if ((Open[1] - Close[1] >= 0.0 && Open[1] - Close[1] <= 10.0 * Point) || (Close[1] - Open[1] >= 0.0 && Close[1] - Open[1] <= 10.0 * Point) && Open[1] < Close[1] ||
            Open[1] < Close[1] && ((High[1] - Open[1] / Close[1] - Low[1] >= 1.0 && High[1] - Open[1] / Close[1] - Low[1] < 2.0) || High[1] - Close[1] / Open[1] - Low[1] >= 1.0 &&
            High[1] - Close[1] / Open[1] - Low[1] < 2.0)) {
            UseTradingSell = TRUE;
            gi_1572 = 4333;
         }
         if (Open[2] < Close[2] && Open[1] > Close[1] && Close[2] < Open[1] && Open[2] > Close[1] && Open[1] - Close[1] > 1.2 * (Close[2] - Open[2]) && Close[1] - Open[0] > 0.0) {
            UseTradingSell = TRUE;
            gi_1572 = 14;
         }
         if (Open[3] > Close[3] && Open[2] > Close[2] && Open[1] <= Close[1] && High[1] - Open[1] > 3.0 * (Close[1] - Low[1])) {
            UseTradingSell = TRUE;
            gi_1572 = 15;
         }
         if (Open[2] < Close[2] && Open[1] < Close[1] && (Open[1] - Close[1] >= 0.0 && Open[1] - Close[1] <= 5.0 * Point) || (Close[1] - Open[1] >= 0.0 && Close[1] - Open[1] <= 5.0 * Point) &&
            Open[1] < Close[1] || Open[1] < Close[1] && (Low[1] - Close[1] / Open[1] - High[1] >= 1.0 && Low[1] - Close[1] / Open[1] - High[1] < 1.2) || (Low[1] - Open[1] / Close[1] - High[1] >= 1.0 &&
            Low[1] - Open[1] / Close[1] - High[1] < 1.2) && Open[1] < Close[1] || Open[1] > Close[1] && Close[1] - High[1] > 0.0) {
            UseTradingSell = TRUE;
            gi_1572 = 446;
         }
         if (Open[2] < Close[2] && Open[1] == Close[1] && High[1] - Open[1] >= Open[1] - Low[1] && High[1] < High[2] && Low[1] > Low[2]) {
            UseTradingSell = TRUE;
            gi_1572 = 16;
         }
         if (Open[2] < Close[2] && Open[1] > Close[1] && Close[1] > Close[2] && Close[1] < High[2] && High[1] > High[2]) {
            UseTradingSell = TRUE;
            gi_1572 = 17;
         }
         if (Open[3] < Close[3] && Open[2] < Close[3] && Open[1] < Close[1] && Close[3] > (Close[2] - Open[2]) / 2.0 && Close[3] < Close[2] && Close[2] > (Close[1] - Open[1]) / 2.0 &&
            Close[2] < Close[1] && Open[3] < Open[2] && Open[2] < Open[1] && Close[3] - Open[3] > 40.0 * Point && Close[2] - Open[2] > 40.0 * Point) {
            UseTradingSell = TRUE;
            gi_1572 = 20;
         }
         if (Open[3] < Close[3] && Open[2] < Close[3] && Open[1] < Close[1] && Close[3] > (Close[2] - Open[2]) / 2.0 && Close[3] < Close[2] && Open[1] - Close[2] > 0.0 * Point &&
            Open[3] < Open[2] && Open[2] < Open[1] && Close[3] - Open[3] > 40.0 * Point && Close[2] - Open[2] > 40.0 * Point) {
            UseTradingSell = TRUE;
            gi_1572 = 2000;
         }
         if (f0_10(3) && f0_10(2) && f0_10(1) && Low[2] > Low[3] && High[2] > High[3] && High[2] > High[1] && Low[2] > Low[1]) {
            UseTradingSell = TRUE;
            gi_1572 = 18;
         }
         if (Open[3] < Close[3] && Open[2] > Close[2] && Open[1] > Close[1] && Close[3] - Open[3] > 40.0 * Point && Open[2] - Close[2] > 40.0 * Point && Close[2] - Close[3] > 0.0 * Point &&
            Open[1] > Close[2] && Open[2] > Open[1] && Close[3] > Close[1] && Close[2] > Close[1]) {
            UseTradingSell = TRUE;
            gi_1572 = 333;
         }
         if (Open[5] < Close[5] && Open[4] < Close[4] && Open[3] > Close[3] || Open[3] < Close[3] && Open[2] < Close[2] && Open[1] > Close[1] && Close[5] < Close[1] && Close[1] > Close[5] &&
            Close[1] < Open[3] || Close[1] < Close[3] && Close[1] < Open[2] && Close[1] < Open[4] && Close[1] > Close[5] && Close[2] > Open[1] && Close[5] < Open[4] && Open[4] < Open[3] ||
            Open[4] < Close[3] && Open[3] < Open[2] || Close[3] < Open[2] && Close[2] > Close[3] || Close[2] > Open[3] && Close[2] > Close[4] && Close[2] > Open[5]) {
            UseTradingSell = TRUE;
            gi_1572 = 1900;
         }
         if (Open[5] > Close[5] && Open[4] < Close[4] && Open[3] < Close[3] && Open[2] < Close[2] && Open[1] > Close[1] && Close[5] < Low[4] && Close[4] > Low[3] && Close[3] < Low[2] &&
            Open[1] >= Close[1] && Low[1] < Low[5]) {
            UseTradingSell = TRUE;
            gi_1572 = 19;
         }
         if (Open[2] < Close[2] && Close[2] - Open[2] > 1.5 * (Open[1] - Close[1]) && Open[1] > Close[1] && Close[2] > Open[1] && Open[2] < Close[1]) {
            UseTradingSell = TRUE;
            gi_1572 = 21;
         }
         if (Open[2] < Close[2] && Open[1] > Close[1] && Close[1] - Close[2] >= Close[2] - Open[2] && Low[1] > High[2]) {
            UseTradingSell = TRUE;
            gi_1572 = 23;
         }
         if (Open[2] < Close[2] && High[2] - Close[2] > 4.0 * (Close[2] - Open[2]) && High[2] - Close[2] > 4.0 * (Open[2] - Low[2]) && Open[1] > Close[1]) {
            UseTradingSell = TRUE;
            gi_1572 = 24;
         }
         if (Open[2] > Close[2] && High[2] - Open[2] > 4.0 * (Open[2] - Close[2]) && High[2] - Open[2] > 4.0 * (Close[2] - Low[2]) && Open[1] > Close[1]) {
            UseTradingSell = TRUE;
            gi_1572 = 24;
         }
         if (Open[1] > Close[1] && High[1] == Open[1] && Close[1] - Low[1] > 2.0 * (Open[1] - Close[1])) {
            UseTradingSell = TRUE;
            gi_1572 = 26;
         }
         if (Open[1] > Close[1] && Close[1] - Low[1] > 2.0 * (Open[1] - Close[1]) && (High[1] - Open[1]) / (Close[1] - Low[1]) < 0.05) {
            UseTradingSell = TRUE;
            gi_1572 = 26;
         }
         if (Open[1] < Close[1] && High[1] == Close[1] && Open[1] - Low[1] > 2.0 * (Close[1] - Open[1])) {
            UseTradingSell = TRUE;
            gi_1572 = 26;
         }
         if (Open[1] < Close[1] && Open[1] - Low[1] > 2.0 * (Close[1] - Open[1]) && (High[1] - Close[1]) / (Open[1] - Low[1]) < 0.05) {
            UseTradingSell = TRUE;
            gi_1572 = 26;
         }
         if (Open[3] < Close[3] && Close[2] - Open[2] > 2.0 * (Open[1] - Close[1]) && Open[2] < Close[2] && Open[1] > Close[1] && Close[1] < Low[2] && Close[1] < Low[3] && High[2] < High[3] &&
            Low[2] > Low[3]) {
            UseTradingSell = TRUE;
            gi_1572 = 28;
         }
         gd_772 -= gd_756 * gd_740;
         gd_780 = gd_772 + (gd_756 + gi_804) * gd_740;
         gi_796 = FALSE;
         gi_800 = TRUE;
      }
      if (gi_728 == 2 && gi_732 == 2 && TradeEnable) {
         if (Open[3] < Close[3] && Open[2] < Close[3] && Open[1] < Close[1] && Close[3] - Open[3] >= 50.0 * Point && Close[2] - Open[2] >= 50.0 * Point && Close[1] - Open[1] >= 50.0 * Point &&
            Open[2] - Close[3] > 0.0 && Open[1] - Close[3] > 0.0 && High[2] - High[3] > 0.0 && High[1] - High[3] > 0.0 && High[1] - Close[1] > High[2] - Close[2]) {
            UseTradingBuy = TRUE;
            gi_1572 = 54;
         }
         if (Open[5] < Close[5] && Open[4] > Close[4] && Open[3] > Close[3] || Open[3] < Close[3] && Open[2] > Close[2] && Open[1] < Close[1] && Open[4] > Open[2] && Close[4] > Close[2] &&
            Open[4] > Open[3] || Open[4] > Close[3] && Open[3] > Open[2] || Close[3] > Open[2] && Open[5] < Open[1] && Open[5] < Close[2] && Open[5] < Close[3] || Open[5] < Open[3] &&
            Open[5] < Close[4] && Close[4] - Close[5] > 0.0 && Close[1] > Open[4] && Close[1] > Open[3] || Close[1] > Close[3] && Close[1] > Open[2] && Close[1] > Close[5]) {
            UseTradingBuy = TRUE;
            gi_1572 = 55;
         }
         if (Open[5] < Close[5] && Open[4] > Close[4] && Open[3] > Close[3] || Open[3] < Close[3] && Open[2] > Close[2] && Open[1] < Close[1] && Open[4] > Open[2] && Close[4] > Close[2] &&
            Open[4] > Open[3] || Open[4] > Close[3] && Open[3] > Open[2] || Close[3] > Open[2] && Close[4] < Close[5] && Open[5] < Close[4] && Open[5] < Close[3] || Open[5] < Open[3] &&
            Open[5] < Close[2] && Open[5] < Open[1] && Close[1] > Close[4] && Close[1] > Close[3] || Close[5] > Open[3] && Close[1] > Close[2] && Close[1] > Close[5]) {
            UseTradingBuy = TRUE;
            gi_1572 = 56;
         }
         if (Open[3] < Close[3] && Open[2] < Close[2] && Open[1] > Close[1] && Close[3] - Open[3] >= 50.0 * Point && Close[2] - Open[2] >= 50.0 * Point && Open[1] - Close[1] >= 50.0 * Point &&
            Close[2] > Open[1] && Open[2] - Close[3] > 0.0 && Close[1] < Close[3] && Open[2] > Close[1]) {
            UseTradingBuy = TRUE;
            gi_1572 = 57;
         }
         if (Open[3] < Close[3] && Open[2] < Close[2] && Open[1] > Close[1] && Open[3] - Close[3] >= 50.0 * Point && Open[2] - Close[2] >= 50.0 * Point && Close[1] - Open[1] >= 50.0 * Point &&
            Low[2] - High[3] > 0.0 && Close[1] < Open[2] && Close[1] > Close[3]) {
            UseTradingBuy = TRUE;
            gi_1572 = 588;
         }
         if (Open[2] > Close[2] && Open[1] < Close[1] && Open[1] == Low[1] && Open[2] - Close[2] > 50.0 * Point && Close[1] - Open[1] > 50.0 * Point && Open[1] < Open[2] &&
            Open[1] >= Open[2] - (Open[2] - Close[2]) / 10.0 && Open[1] < High[2]) {
            UseTradingBuy = TRUE;
            gi_1572 = 509;
         }
         if (Open[4] < Close[4] && Open[3] < Close[3] && Open[2] < Close[2] && Open[1] > Close[1] && Close[4] - Open[4] > 50.0 * Point && Close[3] - Open[3] > 50.0 * Point &&
            Close[2] - Open[2] > 50.0 * Point && Open[1] - Close[1] > 70.0 * Point && Open[4] < Open[3] && Open[3] < Open[2] && Open[2] > Close[1] && Close[1] < Open[4] && Close[4] < Close[3] &&
            Close[3] < Close[2] && Close[2] < Open[1]) {
            UseTradingBuy = TRUE;
            gi_1572 = 60;
         }
         if (Open[1] > Close[1] && (Open[1] - Close[1] > 0.0 && Open[1] - Close[1] < 0.2 * (High[1] - Low[1])) && (High[1] - Open[1] < 0.6 * (High[1] - Low[1]) && Close[1] - Low[1] < 0.6 * (High[1] - Low[1])) &&
            High[1] - Low[1] > 60.0 * Point && Ask > Open[0]) {
            UseTradingBuy = TRUE;
            gi_1572 = 787;
         }
         if (Open[1] < Close[1] && (Close[1] - Open[1] > 0.0 && Close[1] - Open[1] < 0.2 * (High[1] - Low[1])) && (High[1] - Close[1] < 0.6 * (High[1] - Low[1]) && Open[1] - Low[1] < 0.6 * (High[1] - Low[1])) &&
            High[1] - Low[1] > 60.0 * Point && Ask > Open[0]) {
            UseTradingBuy = TRUE;
            gi_1572 = 787;
         }
         if (Open[2] < Close[2] && Open[1] < Close[1] || Open[1] > Close[1] && Open[1] == Close[1] || Open[1] - Close[1] < 10.0 * Point || Close[1] - Open[1] < 10.0 * Point ||
            Open[1] == Low[1] || Open[1] == High[1] || Close[1] == Low[1] || Close[1] == High[1] && High[1] - Open[1] < 0.6 * (High[1] - Low[1]) || High[1] - Close[1] > 0.6 * (High[1] - Low[1]) && Close[2] - Open[1] > 50.0 * Point && Close[1] - Open[2] > 0.0 ||
            Close[1] - Close[2] > 0.0) {
            UseTradingBuy = TRUE;
            gi_1572 = 422;
         }
         if (Open[2] > Close[2] && Open[2] - Close[2] > 1.5 * (Close[1] - Open[1]) && Open[1] < Close[1] && Open[2] > Close[1] && Close[2] < Open[1]) {
            UseTradingBuy = TRUE;
            gi_1572 = 544;
         }
         if (Open[2] > Close[2] && (Open[1] - Close[1] >= 0.0 && Open[1] - Close[1] <= 10.0 * Point) || (Close[1] - Open[1] >= 0.0 && Close[1] - Open[1] <= 10.0 * Point) &&
            Open[1] < Close[1] || Open[1] < Close[1] && (Low[1] - Close[1] / Open[1] - High[1] >= 1.0 && Low[1] - Close[1] / Open[1] - High[1] < 1.2) || (Low[1] - Open[1] / Close[1] - High[1] >= 1.0 &&
            Low[1] - Open[1] / Close[1] - High[1] < 1.2) && Open[1] < Close[1] || Open[1] > Close[1] && Open[1] < Open[2] && Close[1] > Close[2]) {
            UseTradingBuy = TRUE;
            gi_1572 = 477;
         }
         if (Open[2] > Close[2] && Open[2] == High[2] && Close[2] == Low[2] && Open[1] < Close[1] && Open[1] == Low[1] && Close[1] == High[1] && Open[1] - Open[2] > 0.0) {
            UseTradingBuy = TRUE;
            gi_1572 = 29;
         }
         if (Open[2] > Close[2] && Open[1] < Close[1] && Close[2] > Open[1] && Open[2] < Close[1] && Close[1] - Open[1] > 1.2 * (Open[2] - Close[2]) && Open[0] - Close[1] > 0.0) {
            UseTradingBuy = TRUE;
            gi_1572 = 122;
         }
         if (Open[2] > Close[2] && Open[1] < Close[1] && Open[1] <= Close[2] && Open[2] - Close[2] >= Close[1] - Open[1] && Open[2] - Close[2] > 50.0 * Point && Close[1] - Open[1] > 50.0 * Point) {
            UseTradingBuy = TRUE;
            gi_1572 = 500;
         }
         if (Open[2] < Close[2] || Open[2] > Close[2] && Open[1] < Close[1] || Open[1] > Close[1] && High[2] - Open[2] > Close[2] - Low[2] || High[2] - Close[2] < Open[2] - Low[2] &&
            High[1] - Open[1] > Close[1] - Low[1] || High[1] - Close[1] < Open[1] - Low[1] && (Open[2] > Close[2] && Open[2] - Close[2] < (High[2] - Low[2]) / 50.0) || (Open[2] < Close[2] &&
            Close[2] - Open[2] < (High[2] - Low[2]) / 50.0) && (Open[1] > Close[1] && Open[1] - Close[1] < (High[1] - Low[1]) / 50.0) || (Open[1] < Close[1] && Close[1] - Open[1] < (High[1] - Low[1]) / 50.0) &&
            High[1] < High[2]) {
            UseTradingBuy = TRUE;
            gi_1572 = 61;
         }
         if (Open[2] > Close[2] && Open[1] < Close[1] && Low[2] - High[1] > 0.0 && Open[2] - Close[2] > 50.0 * Point && Close[1] - Open[1] > 50.0 * Point) {
            UseTradingBuy = TRUE;
            gi_1572 = 62;
         }
         if (Open[2] > Close[2] && Open[1] < Close[1] && Open[1] < Close[2] && Close[1] < Open[2] && Close[1] > Open[2] - (Open[2] - Close[2]) / 2.0) {
            UseTradingBuy = TRUE;
            gi_1572 = 81;
         }
         if (Open[3] < Close[3] && Open[2] < Close[3] && Open[1] < Close[1] && Open[3] < Open[2] && Open[2] < Open[1] && Close[3] < Close[2] && Close[2] < Close[1] && Close[3] - Open[3] > 2.0 * (Close[1] - Open[1]) &&
            Close[2] - Open[2] > 2.0 * (Close[1] - Open[1])) {
            UseTradingBuy = TRUE;
            gi_1572 = 466;
         }
         if (Open[4] > Close[4] && Open[3] > Close[3] && Open[2] > Close[2] && Open[1] > Close[1] && Open[4] == High[4] && Close[4] == Low[4] && Open[3] == High[3] && Close[3] == Low[3] &&
            Open[1] == High[1] && Close[1] == Low[1] || Close[1] - Low[1] > 0.0 && High[2] - Open[2] > 2.0 * (Open[2] - Close[2]) && Close[3] - Open[2] > 0.0 && Open[2] < Close[3] && Open[4] > Open[3] && Close[4] > Close[3] && Close[1] < Close[2] && Open[4] > Open[1]) {
            UseTradingSell = TRUE;
            gi_1572 = 99;
         }
      }
      if (gi_728 == 3 && gi_732 == 3 && TradeEnable) {
         if (Open[5] > Close[5] && Open[4] < Close[4] && Open[3] > Close[3] || Open[3] < Close[3] && Open[2] < Close[2] && Open[1] > Close[1] && Open[5] > Close[4] && Open[5] > Close[3] ||
            Open[5] > Open[3] && Open[5] > Close[2] && Open[5] > Open[1] && Close[5] < Open[4] && Open[4] < Open[3] || Open[4] < Close[3] && Close[3] < Open[2] || Open[3] < Open[2] &&
            Close[1] < Close[5]) {
            UseTradingSell = TRUE;
            gi_1572 = 63;
         }
         if (Open[2] > Close[2] && Open[1] < Close[1] && Open[2] - Close[2] > 50.0 * Point && Close[1] - Open[1] > 50.0 * Point && Close[1] <= 0.07 * (Open[2] - (Open[2] - Close[2])) &&
            Open[1] > Low[2]) {
            UseTradingSell = TRUE;
            gi_1572 = 64;
         }
         if (Open[2] > Close[2] && Open[1] < Close[1] && Open[2] - Close[2] > 50.0 * Point && Close[1] - Open[1] > 50.0 * Point && Close[1] < Low[2] && Open[1] < Low[2]) {
            UseTradingSell = TRUE;
            gi_1572 = 65;
         }
         if (Open[3] > Close[3] && Open[2] > Close[2] && Open[1] < Close[1] && Open[3] - Close[3] >= 50.0 * Point && Open[2] - Close[2] >= 50.0 * Point && Close[1] - Open[1] >= 50.0 * Point &&
            Close[2] > Open[1] && Close[3] - Close[2] > 0.0 && Close[1] > Close[3] && Open[1] > Close[2]) {
            UseTradingSell = TRUE;
            gi_1572 = 66;
         }
         if (Open[3] > Close[3] && Open[2] > Close[2] && Open[1] < Close[1] && Open[3] - Close[3] >= 50.0 * Point && Open[2] - Close[2] >= 50.0 * Point && Close[1] - Open[1] >= 50.0 * Point &&
            Low[3] - High[2] > 0.0 && Close[1] > Open[2] && Close[1] > High[3] && Close[2] < Open[1] && Close[1] < Close[3]) {
            UseTradingSell = TRUE;
            gi_1572 = 67;
         }
         if (Open[3] > Close[3] && Open[2] < Close[3] && Open[1] < Close[1] && Open[3] - Close[3] >= 50.0 * Point && Close[2] - Open[2] >= 50.0 * Point && Close[1] - Open[1] >= 50.0 * Point &&
            Close[3] - Close[2] > 0.0 && Close[3] - Close[1] > 0.0 && Low[2] - Low[1] > 0.0 && Close[3] > Close[2] && Close[3] > Close[1] && Close[3] >= High[2] && Close[3] >= High[1]) {
            UseTradingSell = TRUE;
            gi_1572 = 68;
         }
         if (Open[2] < Close[2] && Open[1] > Close[1] && Open[1] == High[1] && Close[2] - Open[2] > 50.0 * Point && Open[1] - Close[1] > 50.0 * Point && Open[1] > Open[2] &&
            Open[1] <= Open[2] + (Open[2] - Close[2]) / 10.0 && Open[1] > Low[2]) {
            UseTradingSell = TRUE;
            gi_1572 = 69;
         }
         if (Open[2] > Close[2] && Open[1] < Close[1] && Open[2] - Close[2] > 50.0 * Point && Close[1] - Open[1] > 50.0 * Point && Close[1] < (Open[2] - (Open[2] - Close[2])) / 2.0 &&
            Close[2] < Open[1] && Open[1] < Low[2] && High[1] < Open[2]) {
            UseTradingSell = TRUE;
            gi_1572 = 70;
         }
         if (Open[4] > Close[4] && Open[3] > Close[3] && Open[2] > Close[2] && Open[1] < Close[1] && Open[4] - Close[4] > 50.0 * Point && Open[3] - Close[3] > 50.0 * Point &&
            Open[2] - Close[2] > 50.0 * Point && Close[1] - Open[1] > 70.0 * Point && Open[4] > Open[3] && Open[3] > Open[2] && Open[2] < Close[1] && Close[1] > Open[4] && Close[4] > Close[3] &&
            Close[3] > Close[2] && Close[2] > Open[1]) {
            UseTradingSell = TRUE;
            gi_1572 = 71;
         }
         if (Open[2] > Close[2] && Open[1] > Close[1] && (Open[1] - Close[1] >= 0.0 && Open[1] - Close[1] <= 5.0 * Point) || (Close[1] - Open[1] >= 0.0 && Close[1] - Open[1] <= 5.0 * Point) &&
            Open[1] < Close[1] || Open[1] < Close[1] && (Low[1] - Close[1] / Open[1] - High[1] >= 1.0 && Low[1] - Close[1] / Open[1] - High[1] < 1.2) || (Low[1] - Open[1] / Close[1] - High[1] >= 1.0 &&
            Low[1] - Open[1] / Close[1] - High[1] < 1.2) && Open[1] < Close[1] || Open[1] > Close[1] && Close[1] - High[1] > 0.0) {
            UseTradingSell = TRUE;
            gi_1572 = 346;
         }
         if (Open[2] < Close[2] && Open[1] == Close[1] && High[1] - Close[1] >= Open[1] - Low[1] && High[1] < High[2] && Low[1] > Low[2]) {
            UseTradingSell = TRUE;
            gi_1572 = 166;
         }
         if (Open[3] < Close[3] && Close[2] - Open[2] > 2.0 * (Open[1] - Close[1]) && Open[2] < Close[2] && Open[1] > Close[1] && Close[1] < Low[2] && Close[1] < Low[3] && High[2] < High[3] &&
            Low[2] > Low[3]) {
            UseTradingSell = TRUE;
            gi_1572 = 288;
         }
         if (Open[2] > Close[2] && Open[1] > Close[1] || Open[1] < Close[1] && High[1] - Close[1] > 2.0 * (Close[1] - Open[1]) || High[1] - Open[1] > 2.0 * (Open[1] - Close[1]) &&
            Close[2] > Close[1] || Close[2] > Open[1] && Open[2] > High[1] && Open[2] - Close[2] > 2.0 * Open[1] - Close[1] || Open[2] - Close[2] > 2.0 * Close[1] - Open[1] &&
            Open[1] - Close[2] > 0.0 || Close[2] - Close[1] > 0.0) {
            UseTradingSell = TRUE;
            gi_1572 = 277;
         }
         if (Open[2] < Close[2] && Open[1] == Close[1] && High[1] - Open[1] >= Open[1] - Low[1] && High[1] < High[2] && Low[1] > Low[2]) {
            UseTradingSell = TRUE;
            gi_1572 = 1666;
         }
         if (Open[2] > Close[2] && Open[2] == High[2] && Close[2] == Low[2] && Open[1] < Close[1] && Open[1] == Low[1] && Close[1] == High[1] && Open[1] - Open[2] > 0.0) {
            UseTradingSell = TRUE;
            gi_1572 = 299;
         }
         if (Open[2] < Close[2] && Open[1] > Close[1] && Close[2] < Open[1] && Open[2] > Close[1] && Open[1] - Close[1] > 1.2 * (Close[2] - Open[2]) && Close[1] - Open[0] > 0.0) {
            UseTradingSell = TRUE;
            gi_1572 = 144;
         }
         if (Open[2] > Close[2] && Open[1] < Close[1]) {
            if (Close[2] <= Open[1] && Close[2] > 1.01 * Open[1]) {
               if (Ask > Open[0]) {
                  UseTradingBuy = TRUE;
                  gi_1572 = 59;
               }
            }
            if (Open[1] <= Close[2] && Open[1] > 1.01 * Close[2]) {
               if (Ask > Open[0]) {
                  UseTradingBuy = TRUE;
                  gi_1572 = 59;
               }
            }
         }
         if (Open[2] < Close[2] && Open[1] > Close[1]) {
            if (Open[2] <= Close[1] && Open[2] > 1.01 * Close[1]) {
               if (Ask > Open[0]) {
                  UseTradingBuy = TRUE;
                  gi_1572 = 59;
               }
            }
            if (Close[1] <= Open[2] && Close[1] > 1.01 * Open[2]) {
               if (Ask > Open[0]) {
                  UseTradingBuy = TRUE;
                  gi_1572 = 59;
               }
            }
         }
         if (Open[2] < Close[2] && Open[1] < Close[1]) {
            if (Open[2] <= Open[1] && Open[2] > 1.01 * Open[1]) {
               if (Ask > Open[0]) {
                  UseTradingBuy = TRUE;
                  gi_1572 = 59;
               }
            }
            if (Open[1] <= Open[2] && Open[1] > 1.01 * Open[2]) {
               if (Ask > Open[0]) {
                  UseTradingBuy = TRUE;
                  gi_1572 = 59;
               }
            }
         }
         if (Open[2] > Close[2] && Open[1] > Close[1]) {
            if (Close[2] <= Close[1] && Close[2] > 1.01 * Close[1]) {
               if (Ask > Open[0]) {
                  UseTradingBuy = TRUE;
                  gi_1572 = 59;
               }
            }
            if (Close[1] <= Close[2] && Close[1] > 1.01 * Close[2]) {
               if (Ask > Open[0]) {
                  UseTradingBuy = TRUE;
                  gi_1572 = 559;
               }
            }
         }
         if (Open[2] < Close[2] || Open[2] > Close[2] && Open[1] < Close[1] || Open[1] > Close[1] && High[2] - Open[2] > Close[2] - Low[2] || High[2] - Close[2] < Open[2] - Low[2] &&
            High[1] - Open[1] > Close[1] - Low[1] || High[1] - Close[1] < Open[1] - Low[1] && (Open[2] > Close[2] && Open[2] - Close[2] < (High[2] - Low[2]) / 50.0) || (Open[2] < Close[2] &&
            Close[2] - Open[2] < (High[2] - Low[2]) / 50.0) && (Open[1] > Close[1] && Open[1] - Close[1] < (High[1] - Low[1]) / 50.0) || (Open[1] < Close[1] && Close[1] - Open[1] < (High[1] - Low[1]) / 50.0) &&
            High[1] > High[2]) {
            UseTradingSell = TRUE;
            gi_1572 = 72;
         }
         if (Open[5] < Close[5] && Open[4] > Close[4] && Close[5] < Open[4] && Open[5] > Close[4] && Open[3] > Close[3] && Open[2] < Close[2] && Open[3] < Close[2] && Close[3] > Open[2] &&
            Open[1] > Close[1]) {
            UseTradingSell = TRUE;
            gi_1572 = 73;
         }
         if (Open[4] > Close[3] && Open[3] > Close[2] && Open[2] > Close[1] && Open[1] > Close[1] && Open[4] - Close[4] > 50.0 * Point && Open[3] - Close[3] > 50.0 * Point &&
            Open[2] - Close[2] > 50.0 * Point && Open[3] >= Close[4] || Open[3] <= Close[4] && Open[2] >= Close[3] || Open[2] <= Close[3] && Close[4] > Close[3] && Close[3] > Close[2] &&
            Close[1] < Close[2]) {
            UseTradingSell = TRUE;
            gi_1572 = 75;
         }
         if (Open[3] > Close[3] || Open[3] < Close[3] && Open[2] > Close[2] && Open[1] > Close[1] && Open[2] - Close[2] > 40.0 * Point && Open[1] - Close[1] > 40.0 * Point &&
            Open[2] - Close[2] >= Open[1] - Close[1] && Low[3] - High[2] > 0.0) {
            UseTradingSell = TRUE;
            gi_1572 = 755;
         }
         if (Open[2] > Close[2] && Open[1] > Close[1] && Open[2] > Open[1] && Open[1] > Open[2] - (Open[2] - Close[2]) / 2.0 && Close[2] == Close[1] || Close[2] - Close[1] < 10.0 * Point ||
            Close[1] - Close[2] < 10.0 * Point && High[2] < Open[1]) {
            UseTradingSell = TRUE;
            gi_1572 = 177;
         }
         if (Open[2] < Close[2] && Open[1] > Close[1] && Open[1] == High[1] && Close[2] - Open[2] > 50.0 * Point && Open[1] - Close[1] > 50.0 * Point && Open[1] > Open[2] &&
            Open[1] <= Open[2] + (Open[2] - Close[2]) / 10.0 && Open[1] > Low[2]) {
            UseTradingSell = TRUE;
            gi_1572 = 22;
         }
      }
      if (Ask <= gd_788 && gi_796) {
         gd_788 -= gd_756 * gd_740;
         gd_764 -= gd_756 * gd_740;
      }
      if (Bid >= gd_780 && gi_800) {
         gd_780 += gd_756 * gd_740;
         gd_772 += gd_756 * gd_740;
      }
      if (gi_728 == 3) {
      }
      if (gi_728 == 3) {
      }
   }
   if (MathAbs(TimeCurrent() - gd_664) > 60.0 * gd_612) {
      gd_664 = TimeCurrent();
      point_36 = MarketInfo(Symbol(), MODE_POINT);
      if (ConsiderSpread == TRUE) {
         ld_60 = MarketInfo(Symbol(), MODE_SPREAD);
         ld_60 = point_36 * ld_60;
      } else ld_60 = 0;
      lots_76 =  LotSize ;
      lots_84 =  LotSize ;
      if (UseAutoLotSize && f0_6() == 0 && f0_11() == 0) {
         if (AccountEquity() < 2.0 * BaseEquity) {
             LotSize  = 1.0 * gd_440;
            gd_308 = 1.0 * gd_316;
            gd_340 = 1.0 * gd_356;
            gd_348 = 1.0 * gd_364;
            gd_276 = 1.0 * gd_284;
         } else {
            if (AccountEquity() > 2.0 * BaseEquity && AccountEquity() < 4.0 * BaseEquity) {
                LotSize  = 2.0 * gd_440;
               gd_308 = 2.0 * gd_316;
               gd_340 = 2.0 * gd_356;
               gd_348 = 2.0 * gd_364;
               gd_276 = 2.0 * gd_284;
            } else {
               if (AccountEquity() > 4.0 * BaseEquity && AccountEquity() < 6.0 * BaseEquity) {
                   LotSize  = 3.0 * gd_440;
                  gd_308 = 3.0 * gd_316;
                  gd_340 = 3.0 * gd_356;
                  gd_348 = 3.0 * gd_364;
                  gd_276 = 3.0 * gd_284;
               } else {
                  if (AccountEquity() > 6.0 * BaseEquity && AccountEquity() < 8.0 * BaseEquity) {
                      LotSize  = 4.0 * gd_440;
                     gd_308 = 4.0 * gd_316;
                     gd_340 = 4.0 * gd_356;
                     gd_348 = 4.0 * gd_364;
                     gd_276 = 4.0 * gd_284;
                  } else {
                     if (AccountEquity() > 8.0 * BaseEquity && AccountEquity() < 10.0 * BaseEquity) {
                         LotSize  = 5.0 * gd_440;
                        gd_308 = 5.0 * gd_316;
                        gd_340 = 5.0 * gd_356;
                        gd_348 = 5.0 * gd_364;
                        gd_276 = 5.0 * gd_284;
                     } else {
                        if (AccountEquity() > 10.0 * BaseEquity && AccountEquity() < 12.0 * BaseEquity) {
                            LotSize  = 6.0 * gd_440;
                           gd_308 = 6.0 * gd_316;
                           gd_340 = 6.0 * gd_356;
                           gd_348 = 6.0 * gd_364;
                           gd_276 = 6.0 * gd_284;
                        } else {
                           if (AccountEquity() > 12.0 * BaseEquity && AccountEquity() < 14.0 * BaseEquity) {
                               LotSize  = 7.0 * gd_440;
                              gd_308 = 7.0 * gd_316;
                              gd_340 = 7.0 * gd_356;
                              gd_348 = 7.0 * gd_364;
                              gd_276 = 7.0 * gd_284;
                           } else {
                              if (AccountEquity() > 14.0 * BaseEquity && AccountEquity() < 16.0 * BaseEquity) {
                                  LotSize  = 8.0 * gd_440;
                                 gd_308 = 8.0 * gd_316;
                                 gd_340 = 8.0 * gd_356;
                                 gd_348 = 8.0 * gd_364;
                                 gd_276 = 8.0 * gd_284;
                              } else {
                                 if (AccountEquity() > 16.0 * BaseEquity && AccountEquity() < 18.0 * BaseEquity) {
                                     LotSize  = 9.0 * gd_440;
                                    gd_308 = 9.0 * gd_316;
                                    gd_340 = 9.0 * gd_356;
                                    gd_348 = 9.0 * gd_364;
                                    gd_276 = 9.0 * gd_284;
                                 } else {
                                    if (AccountEquity() > 18.0 * BaseEquity && AccountEquity() < 20.0 * BaseEquity) {
                                        LotSize  = 10.0 * gd_440;
                                       gd_308 = 10.0 * gd_316;
                                       gd_340 = 10.0 * gd_356;
                                       gd_348 = 10.0 * gd_364;
                                       gd_276 = 10.0 * gd_284;
                                    } else {
                                       if (AccountEquity() > 20.0 * BaseEquity && AccountEquity() < 22.0 * BaseEquity) {
                                           LotSize  = 11.0 * gd_440;
                                          gd_308 = 11.0 * gd_316;
                                          gd_340 = 11.0 * gd_356;
                                          gd_348 = 11.0 * gd_364;
                                          gd_276 = 11.0 * gd_284;
                                       } else {
                                          if (AccountEquity() > 22.0 * BaseEquity && AccountEquity() < 24.0 * BaseEquity) {
                                              LotSize  = 12.0 * gd_440;
                                             gd_308 = 12.0 * gd_316;
                                             gd_340 = 12.0 * gd_356;
                                             gd_348 = 1.0 * gd_364;
                                             gd_276 = 12.0 * gd_284;
                                          } else {
                                             if (AccountEquity() > 24.0 * BaseEquity && AccountEquity() < 26.0 * BaseEquity) {
                                                 LotSize  = 13.0 * gd_440;
                                                gd_308 = 13.0 * gd_316;
                                                gd_340 = 13.0 * gd_356;
                                                gd_348 = 13.0 * gd_364;
                                                gd_276 = 13.0 * gd_284;
                                             } else {
                                                if (AccountEquity() > 26.0 * BaseEquity && AccountEquity() < 28.0 * BaseEquity) {
                                                    LotSize  = 14.0 * gd_440;
                                                   gd_308 = 14.0 * gd_316;
                                                   gd_340 = 14.0 * gd_356;
                                                   gd_348 = 14.0 * gd_364;
                                                   gd_276 = 14.0 * gd_284;
                                                } else {
                                                   if (AccountEquity() > 28.0 * BaseEquity && AccountEquity() < 30.0 * BaseEquity) {
                                                       LotSize  = 15.0 * gd_440;
                                                      gd_308 = 15.0 * gd_316;
                                                      gd_340 = 15.0 * gd_356;
                                                      gd_348 = 15.0 * gd_364;
                                                      gd_276 = 15.0 * gd_284;
                                                   } else {
                                                      if (AccountEquity() > 30.0 * BaseEquity && AccountEquity() < 32.0 * BaseEquity) {
                                                          LotSize  = 16.0 * gd_440;
                                                         gd_308 = 16.0 * gd_316;
                                                         gd_340 = 16.0 * gd_356;
                                                         gd_348 = 16.0 * gd_364;
                                                         gd_276 = 16.0 * gd_284;
                                                      } else {
                                                         if (AccountEquity() > 32.0 * BaseEquity && AccountEquity() < 34.0 * BaseEquity) {
                                                             LotSize  = 17.0 * gd_440;
                                                            gd_308 = 17.0 * gd_316;
                                                            gd_340 = 17.0 * gd_356;
                                                            gd_348 = 17.0 * gd_364;
                                                            gd_276 = 17.0 * gd_284;
                                                         } else {
                                                            if (AccountEquity() > 34.0 * BaseEquity && AccountEquity() < 36.0 * BaseEquity) {
                                                                LotSize  = 18.0 * gd_440;
                                                               gd_308 = 18.0 * gd_316;
                                                               gd_340 = 18.0 * gd_356;
                                                               gd_348 = 18.0 * gd_364;
                                                               gd_276 = 18.0 * gd_284;
                                                            } else {
                                                               if (AccountEquity() > 36.0 * BaseEquity && AccountEquity() < 38.0 * BaseEquity) {
                                                                   LotSize  = 19.0 * gd_440;
                                                                  gd_308 = 19.0 * gd_316;
                                                                  gd_340 = 19.0 * gd_356;
                                                                  gd_348 = 19.0 * gd_364;
                                                                  gd_276 = 19.0 * gd_284;
                                                               } else {
                                                                  if (AccountEquity() > 38.0 * BaseEquity && AccountEquity() < 40.0 * BaseEquity) {
                                                                      LotSize  = 20.0 * gd_440;
                                                                     gd_308 = 20.0 * gd_316;
                                                                     gd_340 = 20.0 * gd_356;
                                                                     gd_348 = 20.0 * gd_364;
                                                                     gd_276 = 20.0 * gd_284;
                                                                  } else {
                                                                     if (AccountEquity() > 40.0 * BaseEquity && AccountEquity() < 42.0 * BaseEquity) {
                                                                         LotSize  = 21.0 * gd_440;
                                                                        gd_308 = 21.0 * gd_316;
                                                                        gd_340 = 21.0 * gd_356;
                                                                        gd_348 = 21.0 * gd_364;
                                                                        gd_276 = 21.0 * gd_284;
                                                                     } else {
                                                                        if (AccountEquity() > 42.0 * BaseEquity && AccountEquity() < 44.0 * BaseEquity) {
                                                                            LotSize  = 22.0 * gd_440;
                                                                           gd_308 = 22.0 * gd_316;
                                                                           gd_340 = 22.0 * gd_356;
                                                                           gd_348 = 22.0 * gd_364;
                                                                           gd_276 = 22.0 * gd_284;
                                                                        } else {
                                                                           if (AccountEquity() > 44.0 * BaseEquity && AccountEquity() < 46.0 * BaseEquity) {
                                                                               LotSize  = 23.0 * gd_440;
                                                                              gd_308 = 23.0 * gd_316;
                                                                              gd_340 = 23.0 * gd_356;
                                                                              gd_348 = 23.0 * gd_364;
                                                                              gd_276 = 23.0 * gd_284;
                                                                           } else {
                                                                              if (AccountEquity() > 46.0 * BaseEquity && AccountEquity() < 48.0 * BaseEquity) {
                                                                                  LotSize  = 24.0 * gd_440;
                                                                                 gd_308 = 24.0 * gd_316;
                                                                                 gd_340 = 24.0 * gd_356;
                                                                                 gd_348 = 24.0 * gd_364;
                                                                                 gd_276 = 24.0 * gd_284;
                                                                              } else {
                                                                                 if (AccountEquity() > 48.0 * BaseEquity && AccountEquity() < 50.0 * BaseEquity) {
                                                                                     LotSize  = 25.0 * gd_440;
                                                                                    gd_308 = 25.0 * gd_316;
                                                                                    gd_340 = 25.0 * gd_356;
                                                                                    gd_348 = 25.0 * gd_364;
                                                                                    gd_276 = 25.0 * gd_284;
                                                                                 } else {
                                                                                    if (AccountEquity() > 50.0 * BaseEquity) {
                                                                                        LotSize  = 26.0 * gd_440;
                                                                                       gd_308 = 26.0 * gd_316;
                                                                                       gd_340 = 26.0 * gd_356;
                                                                                       gd_348 = 26.0 * gd_364;
                                                                                       gd_276 = 26.0 * gd_284;
                                                                                    } else {
                                                                                        LotSize  = 1.0 * gd_440;
                                                                                       gd_308 = 1.0 * gd_316;
                                                                                       gd_340 = 1.0 * gd_356;
                                                                                       gd_348 = 1.0 * gd_364;
                                                                                       gd_276 = 1.0 * gd_284;
                                                                                    }
                                                                                 }
                                                                              }
                                                                           }
                                                                        }
                                                                     }
                                                                  }
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
         lots_76 =  LotSize ;
         lots_84 =  LotSize ;
      }
      order_total_20 = OrdersTotal();
      count_24 = 0;
      count_28 = 0;
      for (pos_0 = 0; pos_0 < order_total_20; pos_0++) {
         OrderSelect(pos_0, SELECT_BY_POS);
         cmd_8 = OrderType();
         if (cmd_8 == OP_BUY) count_24++;
         else
            if (cmd_8 == OP_SELL) count_28++;
      }
      if (gi_432) {
         if (count_24 >= 10 || count_28 >= 10 &&  LotSize  > 0.1) {
            lots_76 =  LotSize  * (2.0 * count_28 / (count_24 + count_28));
            lots_76 = NormalizeDouble(lots_76, 2);
            lots_84 = 2.0 *  LotSize  - lots_76;
            if (lots_76 == 0.0) {
               lots_76 += gd_440;
               lots_84 -= gd_440;
            } else {
               if (lots_84 == 0.0) {
                  lots_84 += gd_440;
                  lots_76 -= gd_440;
               }
            }
         }
         Print("LongOpenOrders::::::::::::::", count_24);
         Print(":::::::ShortOpenOrders::::::::::::::", count_28);
      }
      if (gi_464) {
         ld_236 = AccountEquity();
         if ((ld_236 - gd_456) / gd_456 >= 0.2) {
            gd_456 = ld_236;
            f0_3();
         }
      }
      f0_14();
      if (gd_604 > 0.0) ld_44 = gd_604;
      else {
         if (gd_604 == 0.0 && gd_596 > 0.0) ld_44 = gd_596;
         else {
            ld_44 = (Bid + point_36 * OrderDistanceSize / 2.0) / point_36 / OrderDistanceSize;
            li_4 = ld_44;
            li_4 = li_4 * OrderDistanceSize;
            ld_44 = li_4 * point_36 - OrderDistanceSize * gd_124 / 2.0 * point_36;
         }
      }
      for (pos_0 = 0; pos_0 < gd_124; pos_0++) {
         if (gd_604 == 0.0 && gd_596 > 0.0) price_52 = ld_44 - pos_0 * point_36 * OrderDistanceSize;
         else price_52 = ld_44 + pos_0 * point_36 * OrderDistanceSize;
         price_68 = price_52 + ld_60;
         if (gd_604 > 0.0 && price_52 < gd_604 || gd_596 > 0.0 && price_52 > gd_596) break;
         if (UseTradingBuy && lots_76 > 0.0 && (MaxTotalOpenForEach > 0.0 && count_24 < MaxTotalOpenForEach)) {
            li_244 = 255;
            li_244 = f0_8(price_68, point_36 * OrderDistanceSize, 1);
            if (gi_632 && li_244 & 1 == 0) {
               if (StopLoss != 0.0) price_248 = price_68 - point_36 * StopLoss;
               price_248 = 0;
               if (price_68 > Ask && gi_104 && gi_120) cmd_16 = 4;
               if (price_68 < Ask && gi_104 && gi_116) cmd_16 = 2;
               if (price_68 > Ask && gi_100) cmd_16 = 0;
               if ((price_68 > Ask && gi_624) || (price_68 <= Ask && gi_624)) ticket_12 = OrderSend(Symbol(), cmd_16, lots_76, price_68, 0, price_248, price_68 + point_36 * TakeProfit, g_comment_656, MagicNumber, 0, Green);
            }
         }
         if (UseTradingSell && lots_84 > 0.0 && (MaxTotalOpenForEach > 0.0 && count_28 < MaxTotalOpenForEach)) {
            li_244 = 255;
            li_244 = f0_8(price_52, point_36 * OrderDistanceSize, 0);
            if (gi_632 && li_244 & 1 == 0) {
               if (StopLoss != 0.0) price_248 = price_52 + point_36 * StopLoss;
               price_248 = 0;
               if (price_52 < Bid && gi_104 && gi_108) cmd_16 = 3;
               if (price_52 > Bid && gi_104 && gi_112) cmd_16 = 5;
               if (price_52 < Bid && gi_100) cmd_16 = 1;
               if ((price_52 < Bid && gi_624) || (price_52 >= Bid && gi_624)) ticket_12 = OrderSend(Symbol(), cmd_16, lots_84, price_52, 0, price_248, price_52 - point_36 * TakeProfit, g_comment_656, MagicNumber, 0, Red);
            }
         }
      }
      for (int pos_256 = OrdersTotal() - 1; pos_256 >= 0; pos_256--) {
         OrderSelect(pos_256, SELECT_BY_POS);
         if (OrderType() == OP_BUY) gd_808 += OrderProfit();
         if (OrderType() == OP_SELL) gd_816 += OrderProfit();
      }
      if (gi_132) {
         for (pos_0 = 0; pos_0 < OrdersTotal(); pos_0++) {
            OrderSelect(pos_0, SELECT_BY_POS);
            cmd_8 = OrderType();
            if ((cmd_8 == OP_BUYLIMIT || cmd_8 == OP_BUYSTOP && MathAbs(OrderOpenPrice() - Ask) > point_36 * OrderDistanceSize * (gd_124 / 2.0)) || (cmd_8 == OP_SELLLIMIT || cmd_8 == OP_SELLSTOP &&
               MathAbs(OrderOpenPrice() - Bid) > point_36 * OrderDistanceSize * (gd_124 / 2.0))) OrderDelete(OrderTicket());
         }
      }
   }
   f0_4();
   f0_18(0);
   gi_688 = FALSE;
   return (0);
}
		 	 		 	 			 			 		      	  		  	 					  		 		 	 	 				 	 	 	 	    				 		  	   			   		  		   	 		 	 		 					     	    	   			 	  		 						 		 
// 78000A0079F3962A6EE37885E3FBFF0C
int f0_8(double ad_0, double ad_8, int ai_16) {
   int cmd_28;
   double ld_32;
   int li_ret_20 = 0;
   int order_total_24 = OrdersTotal();
   double point_40 = MarketInfo(Symbol(), MODE_POINT);
   for (int pos_48 = 0; pos_48 < order_total_24; pos_48++) {
      OrderSelect(pos_48, SELECT_BY_POS);
      if (OrderSymbol() == Symbol() && OrderMagicNumber() == MagicNumber) {
         if (gi_620 != gi_624) {
            if ((ai_16 && MathAbs(Ask - ad_0) < 0.9999 * ad_8) || (!ai_16 && MathAbs(Bid - ad_0) < 0.9999 * ad_8)) {
               li_ret_20 |= 7;
               return (li_ret_20);
            }
         }
         if (MathAbs(OrderOpenPrice() - ad_0) < 0.9999 * ad_8 - point_40 * Slippage) {
            cmd_28 = OrderType();
            if ((ai_16 && cmd_28 == OP_BUY || cmd_28 == OP_BUYLIMIT || cmd_28 == OP_BUYSTOP) || (!ai_16 && cmd_28 == OP_SELL || cmd_28 == OP_SELLLIMIT || cmd_28 == OP_SELLSTOP)) {
               ld_32 = NormalizeDouble(OrderTakeProfit() - OrderOpenPrice(), Digits);
               ld_32 = MathAbs(ld_32);
               if (gi_632 && MathAbs(ld_32 - point_40 * TakeProfit) < point_40 * Slippage) li_ret_20 |= 1;
            }
         }
      }
   }
   return (li_ret_20);
}
			  			    	 	        		  	 						 			 	    			   				 			  	  	 					 		 	 	 			        	 	  	     	      					 			  					 		 						   	  	 	 	
// D78148C3EA3D2E3BD6FF21038CFFE44C
void f0_17() {
   int cmd_8;
   bool is_deleted_12;
   int order_total_0 = OrdersTotal();
   for (int pos_4 = order_total_0 - 1; pos_4 >= 0; pos_4--) {
      OrderSelect(pos_4, SELECT_BY_POS);
      cmd_8 = OrderType();
      is_deleted_12 = FALSE;
      switch (cmd_8) {
      case OP_BUYLIMIT:
         is_deleted_12 = OrderDelete(OrderTicket());
         break;
      case OP_BUYSTOP:
         is_deleted_12 = OrderDelete(OrderTicket());
         break;
      case OP_SELLLIMIT:
         is_deleted_12 = OrderDelete(OrderTicket());
         break;
      case OP_SELLSTOP:
         is_deleted_12 = OrderDelete(OrderTicket());
         break;
      case OP_BUY:
         is_deleted_12 = TRUE;
      case OP_SELL:
         is_deleted_12 = TRUE;
      }
   }
}
				  		   				    	 	 		     							 	 	  	  		    	 	 				    	 	 	 	 		     			 	 	    				 	   	       		 			 	 		 				   	 			 	    	 				 	
// C372C599466AAF0605F9E21D3BEE0247
void f0_16() {
   int cmd_8;
   bool is_deleted_12;
   int order_total_0 = OrdersTotal();
   for (int pos_4 = order_total_0 - 1; pos_4 >= 0; pos_4--) {
      OrderSelect(pos_4, SELECT_BY_POS);
      cmd_8 = OrderType();
      is_deleted_12 = FALSE;
      switch (cmd_8) {
      case OP_BUYLIMIT:
         is_deleted_12 = OrderDelete(OrderTicket());
         break;
      case OP_BUYSTOP:
         is_deleted_12 = OrderDelete(OrderTicket());
         break;
      case OP_BUY:
         is_deleted_12 = TRUE;
      case OP_SELL:
         is_deleted_12 = TRUE;
      case OP_SELLLIMIT:
         is_deleted_12 = TRUE;
      case OP_SELLSTOP:
         is_deleted_12 = TRUE;
      }
   }
}
	 	     		  		 			   		  	 	      	 	  	 	      		 		  	  	   		 				  	   	  	      						 			 		    				  	    						   		   	  			 			   		 	 
// C0DA859365F1D07CF8E953E4B625C201
void f0_15() {
   int cmd_8;
   bool is_deleted_12;
   int order_total_0 = OrdersTotal();
   for (int pos_4 = order_total_0 - 1; pos_4 >= 0; pos_4--) {
      OrderSelect(pos_4, SELECT_BY_POS);
      cmd_8 = OrderType();
      is_deleted_12 = FALSE;
      switch (cmd_8) {
      case OP_SELLLIMIT:
         is_deleted_12 = OrderDelete(OrderTicket());
         break;
      case OP_SELLSTOP:
         is_deleted_12 = OrderDelete(OrderTicket());
         break;
      case OP_BUY:
         is_deleted_12 = TRUE;
      case OP_SELL:
         is_deleted_12 = TRUE;
      case OP_BUYLIMIT:
         is_deleted_12 = TRUE;
      case OP_BUYSTOP:
         is_deleted_12 = TRUE;
      }
   }
}
	        		 		 	 		  		 				    	   	  				      				  		     				 		  		 		  	 	 	  			 	  			  		   		 		 	   		 				 	  	   		  		 		  	 		 		
// 2CFE71E0CBF5E5294C01504CF2909D4E
void f0_3() {
   int cmd_8;
   bool li_12;
   int order_total_0 = OrdersTotal();
   for (int pos_4 = order_total_0 - 1; pos_4 >= 0; pos_4--) {
      OrderSelect(pos_4, SELECT_BY_POS);
      cmd_8 = OrderType();
      li_12 = FALSE;
      if (OrderSymbol() == Symbol() && OrderMagicNumber() == MagicNumber) {
         switch (cmd_8) {
         case OP_BUY:
            li_12 = OrderClose(OrderTicket(), OrderLots(), MarketInfo(OrderSymbol(), MODE_BID), 5, Red);
            break;
         case OP_SELL:
            li_12 = OrderClose(OrderTicket(), OrderLots(), MarketInfo(OrderSymbol(), MODE_ASK), 5, Red);
            break;
         case OP_BUYLIMIT:
            li_12 = OrderDelete(OrderTicket());
            break;
         case OP_BUYSTOP:
            li_12 = OrderDelete(OrderTicket());
            break;
         case OP_SELLLIMIT:
            li_12 = OrderDelete(OrderTicket());
            break;
         case OP_SELLSTOP:
            li_12 = OrderDelete(OrderTicket());
         }
      }
      if (li_12 == FALSE) {
      }
   }
}
			 		  	      		   	 	    			   		  	 	    		  	  	 	 	 		 				  		 	 	 	 				  	  	 			 	   	 	   					    	    		  	  					 	 			 					     	 
// 48E9C00F167CF5F6C856FA54CEC8625B
void f0_5() {
   int cmd_8;
   bool is_closed_12;
   int order_total_0 = OrdersTotal();
   for (int pos_4 = order_total_0 - 1; pos_4 >= 0; pos_4--) {
      OrderSelect(pos_4, SELECT_BY_POS);
      cmd_8 = OrderType();
      is_closed_12 = FALSE;
      switch (cmd_8) {
      case OP_BUY:
         is_closed_12 = OrderClose(OrderTicket(), OrderLots(), MarketInfo(OrderSymbol(), MODE_BID), 5, Red);
         break;
      case OP_BUYLIMIT:
         is_closed_12 = TRUE;
      case OP_BUYSTOP:
         is_closed_12 = TRUE;
      case OP_SELL:
         is_closed_12 = TRUE;
      case OP_SELLLIMIT:
         is_closed_12 = TRUE;
      case OP_SELLSTOP:
         is_closed_12 = TRUE;
      }
      if (is_closed_12 == 0) {
      }
   }
}
			    		   		  	    			   	   	 		 	          		  		    		   	   			    	 	  		 	   		 	 	 					     	 	   	  	  						 			     				 	 		  		   
// 28C522D5C54BED7A5E6CB79CA55E74BE
void f0_2() {
   int cmd_8;
   bool is_closed_12;
   int order_total_0 = OrdersTotal();
   for (int pos_4 = order_total_0 - 1; pos_4 >= 0; pos_4--) {
      OrderSelect(pos_4, SELECT_BY_POS);
      cmd_8 = OrderType();
      is_closed_12 = FALSE;
      switch (cmd_8) {
      case OP_SELL:
         is_closed_12 = OrderClose(OrderTicket(), OrderLots(), MarketInfo(OrderSymbol(), MODE_ASK), 5, Red);
         break;
      case OP_SELLLIMIT:
         is_closed_12 = TRUE;
      case OP_SELLSTOP:
         is_closed_12 = TRUE;
      case OP_BUY:
         is_closed_12 = TRUE;
      case OP_BUYLIMIT:
         is_closed_12 = TRUE;
      case OP_BUYSTOP:
         is_closed_12 = TRUE;
      }
      if (is_closed_12 == 0) Sleep(3000);
   }
}
	 	 			  	    		 	  	   		 				 	 	  					  			  	 	 				 	 		 					 				  			  	   	  	 		      	  		 	 	   		 				    	 							 		 	 	      			
// BB98E1ADEAE9CF0001E0FC9ED2409D5F
int f0_14() {
   int ticket_0;
   double order_lots_4;
   for (int pos_12 = OrdersTotal() - 1; pos_12 >= 0; pos_12--) {
      OrderSelect(pos_12, SELECT_BY_POS, MODE_TRADES);
      if (OrderSymbol() != Symbol() && OrderMagicNumber() != gi_96) continue;
      ticket_0 = OrderTicket();
      order_lots_4 = OrderLots();
      if (OrderType() == OP_BUY) f0_7(0, ticket_0, OrderOpenPrice(), OrderStopLoss(), OrderTakeProfit());
      if (OrderType() == OP_SELL) f0_7(1, ticket_0, OrderOpenPrice(), OrderStopLoss(), OrderTakeProfit());
   }
   return (0);
}
		 	   	  				    		 				 	    			 		   	 		   	  	 	   		 	  	 	   	   			   						 		    					  		  	   			  		   						      		  	 	  					  	
// 4FC08039663A821342FC4BBB9BACA9BE
void f0_7(int ai_0, int ai_4, double ad_8, double ad_16, double ad_24) {
   f0_12(ai_0, ai_4, ad_8, ad_16, ad_24);
}
								   	  	    		  		   								 		 	  					     		 						  	 	  		 		  		 			 		     		   	   			     	 				 	    				 			 			  	   	 	  	 	
// 9AE115EDC96448E72C4C98812165597A
void f0_12(int ai_0, int ai_unused_4, double ad_unused_8, double ad_unused_16, double ad_unused_24) {
   double point_32 = MarketInfo(Symbol(), MODE_POINT);
   if (ai_0 == 0) {
      if (TrailingStopBuy > 0.0 && OrderMagicNumber() == MagicNumber) {
         if (Bid - OrderOpenPrice() > Point * TrailingStopBuy)
            if (OrderStopLoss() < Bid - Point * TrailingStopBuy) OrderModify(OrderTicket(), OrderOpenPrice(), Bid - Point * TrailingStopBuy, OrderTakeProfit(), 0, Green);
      }
   }
   if (ai_0 == 1) {
      if (TrailingStopSell > 0.0 && OrderMagicNumber() == MagicNumber) {
         if (OrderOpenPrice() - Ask > Point * TrailingStopSell)
            if (OrderStopLoss() > Ask + Point * TrailingStopSell || OrderStopLoss() == 0.0) OrderModify(OrderTicket(), OrderOpenPrice(), Ask + Point * TrailingStopSell, OrderTakeProfit(), 0, Red);
      }
   }
}
	 			 	 		 	 					 			   	  	 	   		  		 	 		 	 		    		  			  	 		   		    	      			 					 	  		 		  			 	  	  		  	    	 	 		  	    		  	 			 
// E40D3814FA36016E2360EBB41BB84CB1
int f0_18(bool ai_0) {
   string ls_12;
   string ls_20;
   string ls_28;
   string ls_36;
   string ls_44;
   string ls_52;
   string ls_60;
   string ls_68;
   string ls_76;
   string ls_84;
   string ls_92;
   string ls_100;
   int li_4 = gi_684;
   int count_8 = 1;
   f0_1(0, "RTC4NNCS-TRIAL EXP: 21.05.2003", 0, 3, Fuchsia);
   f0_13(gi_688, 3, 2, " ", " ", Yellow, Yellow, 20);
   if (TradeEnable) ls_12 = "Yes";
   else ls_12 = "No";
   f0_13(gi_688, li_4, count_8, "Trade Enable", ls_12, gi_692, C'0x37,0xFF,0x00', gi_696);
   count_8++;
   f0_13(gi_688, li_4, count_8, "Existing Trending         ", gsa_736[gi_728], gi_692, gi_708, gi_696);
   count_8++;
   if (gi_732 == 2) ls_20 = "Uptrend";
   else ls_20 = "Downtrend";
   f0_13(gi_688, li_4, count_8, "Trending Prediction         ", ls_20, gi_692, gi_708, gi_696);
   count_8++;
   f0_13(gi_688, li_4, count_8, "User Status", "Connect", gi_692, Yellow, gi_696);
   count_8++;
   if (gs_700 > "2013.05.21 23:59:59") {
      f0_13(gi_688, li_4, count_8, "Status Robot:", "Expired", gi_692, C'0xE9,0x00,0x00', gi_696);
      count_8++;
      return;
   }
   f0_13(gi_688, li_4, count_8, "Status Robot:", "Aktif", gi_692, C'0x37,0xFF,0x00', gi_696);
   count_8++;
   if (gi_680) {
      li_4 = gi_684;
      f0_13(gi_688, li_4, count_8, "Daily Range", DoubleToStr(gd_1160, 0) + " pips", gi_692, gi_708, gi_696);
      count_8++;
      f0_13(gi_688, li_4, count_8, "Monthly Range", DoubleToStr(gd_1152, 0) + " pips", gi_692, gi_708, gi_696);
      count_8++;
      if (gi_100) ls_28 = "Yes";
      else ls_28 = "No";
      if (gi_104) ls_36 = "Yes";
      else ls_36 = "No";
      f0_13(gi_688, li_4, count_8, "UseInstantOrder", ls_28, gi_692, C'0xE9,0x00,0x00', gi_696);
      count_8++;
      f0_13(gi_688, li_4, count_8, "UsePendingOrder", ls_36, gi_692, C'0xE9,0x00,0x00', gi_696);
      count_8++;
      if (gi_132) ls_44 = "Yes";
      else ls_44 = "No";
      f0_13(gi_688, li_4, count_8, "ClosePendingPositions", ls_44, gi_692, C'0xE9,0x00,0x00', gi_696);
      count_8++;
      f0_13(gi_688, li_4, count_8, "MaxTotalOpenForEach", DoubleToStr(MaxTotalOpenForEach, 0), gi_692, C'0xE9,0x00,0x00', gi_696);
      count_8++;
      if (AutoOrderDistanceSize) ls_52 = "Yes";
      else ls_52 = "No";
      f0_13(gi_688, li_4, count_8, "AutoOrderDistanceSize", ls_52, gi_692, gi_708, gi_696);
      count_8++;
      f0_13(gi_688, li_4, count_8, "OrderDistanceSize", DoubleToStr(OrderDistanceSize, 0), gi_692, gi_708, gi_696);
      count_8++;
      if (UseTradingBuy) ls_60 = "Yes";
      else ls_60 = "No";
      if (UseTradingSell) ls_68 = "Yes";
      else ls_68 = "No";
      f0_13(gi_688, li_4, count_8, "UseTradingBuy", ls_60, gi_692, C'0xE9,0x00,0x00', gi_696);
      count_8++;
      f0_13(gi_688, li_4, count_8, "UseTradingSell", ls_68, gi_692, C'0xE9,0x00,0x00', gi_696);
      count_8++;
      f0_13(gi_688, li_4, count_8, "Balance", "$" + DoubleToStr(AccountBalance(), 2), gi_692, gi_708, gi_696);
      count_8++;
      f0_13(gi_688, li_4, count_8, "EndTarget", "$" + DoubleToStr(EndTarget, 2), gi_692, C'0x23,0xFF,0x00', gi_696);
      count_8++;
      if (UseTargetRollover) ls_76 = "Yes";
      else ls_76 = "No";
      f0_13(gi_688, li_4, count_8, "UseTargetRollover", ls_76, gi_692, C'0xD9,0xF8,0xA3', gi_696);
      count_8++;
      f0_13(gi_688, li_4, count_8, "ProfitRollover", "$" + DoubleToStr(gd_276, 2), gi_692, C'0xD9,0xF8,0xA3', gi_696);
      count_8++;
      f0_13(gi_688, li_4, count_8, "Target Rollover", "$" + DoubleToStr(gd_292, 2), gi_692, C'0xAF,0xA3,0xF8', gi_696);
      count_8++;
      f0_13(gi_688, li_4, count_8, "StepGainProfitTotal", "$" + DoubleToStr(StepGainProfitTotal, 2), gi_692, C'0xD9,0xF8,0xA3', gi_696);
      count_8++;
      f0_13(gi_688, li_4, count_8, "StepGainProfitBuy", "$" + DoubleToStr(StepGainProfitBuy, 2), gi_692, C'0xD9,0xF8,0xA3', gi_696);
      count_8++;
      f0_13(gi_688, li_4, count_8, "StepGainProfitSell", "$" + DoubleToStr(StepGainProfitSell, 2), gi_692, C'0xD9,0xF8,0xA3', gi_696);
      count_8++;
      f0_13(gi_688, li_4, count_8, "Buy Profit", DoubleToStr(gd_808, 2), gi_692, C'0x23,0xFF,0x00', gi_696);
      count_8++;
      f0_13(gi_688, li_4, count_8, "Sell Profit", DoubleToStr(gd_816, 2), gi_692, C'0x23,0xFF,0x00', gi_696);
      count_8++;
      if (UseAutoSmartCloseProfit) ls_84 = "Yes";
      else ls_84 = "No";
      f0_13(gi_688, li_4, count_8, "StatusAutoSmartCloseProfit", ls_84, gi_692, gi_708, gi_696);
      count_8++;
      f0_13(gi_688, li_4, count_8, "ScaleProfitClose", DoubleToStr(ScaleProfitClose, 1), gi_692, gi_708, gi_696);
      count_8++;
      f0_13(gi_688, li_4, count_8, "LotSize", DoubleToStr( LotSize , 2), gi_692, gi_708, gi_696);
      count_8++;
      if (UseAutoLotSize) ls_92 = "Yes";
      else ls_92 = "No";
      f0_13(gi_688, li_4, count_8, "StatusAutoLotSize", ls_92, gi_692, gi_708, gi_696);
      count_8++;
      f0_13(gi_688, li_4, count_8, "TakeProfit", DoubleToStr(TakeProfit, 0) + " pips", gi_692, gi_708, gi_696);
      count_8++;
      if (UseExtraPip) ls_100 = "Yes";
      else ls_100 = "No";
      f0_13(gi_688, li_4, count_8, "UseExtraPip", ls_100, gi_692, C'0xD9,0xF8,0xA3', gi_696);
      count_8++;
      f0_13(gi_688, li_4, count_8, "EkstraPipBuy", DoubleToStr(ExtraPipBuy, 0), gi_692, C'0x23,0xFF,0x00', gi_696);
      count_8++;
      f0_13(gi_688, li_4, count_8, "EkstraPipSell", DoubleToStr(ExtraPipSell, 0), gi_692, C'0x23,0xFF,0x00', gi_696);
      count_8++;
      f0_13(gi_688, li_4, count_8, "DistancePipsBuy", DoubleToStr(gd_720, 0), gi_692, C'0x23,0xFF,0x00', gi_696);
      count_8++;
      f0_13(gi_688, li_4, count_8, "DistancePipsSell", DoubleToStr(gd_712, 0), gi_692, C'0x23,0xFF,0x00', gi_696);
      count_8++;
      f0_13(gi_688, li_4, count_8, "StopLoss", DoubleToStr(StopLoss, 0), gi_692, gi_708, gi_696);
      count_8++;
      f0_13(gi_688, li_4, count_8, "TrailingStopBuy", DoubleToStr(TrailingStopBuy, 0), gi_692, C'0x23,0xFF,0x00', gi_696);
      count_8++;
      f0_13(gi_688, li_4, count_8, "TrailingStopSell", DoubleToStr(TrailingStopSell, 0), gi_692, C'0x23,0xFF,0x00', gi_696);
      count_8++;
      f0_13(gi_688, li_4, count_8, "Equity", "$" + DoubleToStr(AccountEquity(), 2), gi_692, gi_708, gi_696);
      count_8++;
      f0_13(gi_688, li_4, count_8, "Free Margin", "$" + DoubleToStr(AccountFreeMargin(), 2), gi_692, C'0xAF,0xA3,0xF8', gi_696);
      count_8++;
      f0_13(gi_688, li_4, count_8, "FloatingProfitLoss", "$" + DoubleToStr(AccountProfit(), 2), gi_692, gi_708, gi_696);
      count_8++;
      f0_13(gi_688, li_4, count_8, "Buy Traded", f0_6(), gi_692, C'0xE9,0x00,0x00', gi_696);
      count_8++;
      f0_13(gi_688, li_4, count_8, "Sell Traded", f0_11(), gi_692, C'0xE9,0x00,0x00', gi_696);
      count_8++;
   }
   if (ai_0) for (count_8 = 0; count_8 < 10; count_8++) f0_13(gi_688, li_4, count_8, " ", " ", gi_692, gi_708, gi_696);
   WindowRedraw();
   return (0);
}
		 		 		  		 		   				 		 	 	 				 	  	 	 			 		  	   	 		 		   	     	 			 	  							     	 	 	  			     		  			    	 			  	 	 		       			 		 	
// 26691046D4C0122FDBE278919FDD46DC
int f0_1(string a_name_0, string a_text_8, int a_window_16, int a_corner_20, color a_color_24) {
   int x_28 = 10;
   int y_32 = 2;
   ObjectCreate(a_name_0, OBJ_LABEL, a_window_16, 0, 0);
   ObjectSetText(a_name_0, a_text_8, 10, "Times New Roman Bold Italic", a_color_24);
   ObjectSet(a_name_0, OBJPROP_CORNER, a_corner_20);
   ObjectSet(a_name_0, OBJPROP_XDISTANCE, x_28);
   ObjectSet(a_name_0, OBJPROP_YDISTANCE, y_32);
   WindowRedraw();
   return (0);
}
	  	  	  							 			 	  			   	 	  		 						  	  		 	 			  	   			  	 			 	     	 		 	 	 	 			   			   	 				 	 		  		  	     			   	  	  							
// B491C4CAF518808B4C04BFDD5180E320
int f0_13(bool ai_0, int a_corner_4, int ai_8, string a_text_12, string a_text_20, color a_color_28, color a_color_32, int a_fontsize_36) {
   int fontsize_40;
   int x_44;
   int x_48;
   int fontsize_52 = 8;
   int fontsize_56 = 8;
   if (a_fontsize_36 > fontsize_52) fontsize_40 = a_fontsize_36;
   else fontsize_40 = fontsize_52;
   if (a_corner_4 == 0 || a_corner_4 == 2) {
      x_44 = 5;
      x_48 = 100;
   } else {
      x_44 = 70;
      x_48 = 5;
   }
   int y_60 = 12 * ai_8;
   if (ai_0) {
      ObjectCreate("cL" + a_corner_4 + ai_8, OBJ_LABEL, 0, 0, 0);
      ObjectSetText("cL" + a_corner_4 + ai_8, a_text_12, fontsize_56, "Arial", a_color_28);
      ObjectSet("cL" + a_corner_4 + ai_8, OBJPROP_CORNER, a_corner_4);
      ObjectSet("cL" + a_corner_4 + ai_8, OBJPROP_XDISTANCE, x_44);
      ObjectSet("cL" + a_corner_4 + ai_8, OBJPROP_YDISTANCE, y_60);
      ObjectCreate("cD" + a_corner_4 + ai_8, OBJ_LABEL, 0, 0, 0);
      ObjectSet("cD" + a_corner_4 + ai_8, OBJPROP_CORNER, a_corner_4);
      ObjectSet("cD" + a_corner_4 + ai_8, OBJPROP_XDISTANCE, x_48);
      ObjectSet("cD" + a_corner_4 + ai_8, OBJPROP_YDISTANCE, y_60);
   }
   ObjectSetText("cD" + a_corner_4 + ai_8, a_text_20, fontsize_40, "Arial", a_color_32);
   WindowRedraw();
   return (0);
}
	 		   	 	 			   	 	 					     		 			   		 	   	 	  	   	 		  	 			 	   	     			  	 		  							 	 	  	  	 		  				 					 	     	 	 	 	    			  	
// 4BCC0A507437FAE053E51A58977275AA
int f0_6() {
   int count_0 = 0;
   int order_total_4 = OrdersTotal();
   for (int pos_8 = OrdersTotal() - 1; pos_8 >= 0; pos_8--) {
      OrderSelect(pos_8, SELECT_BY_POS, MODE_TRADES);
      if (OrderSymbol() != Symbol() && OrderMagicNumber() != MagicNumber) continue;
      if (OrderType() == OP_BUY) count_0++;
   }
   return (count_0);
}
						     	   	   		 	 	   		  				 	 		  			       	 										 	  	 			  			 		 		 		  		  	    					   	 	  	 	   	 			 		 				  			 	 	   		
// 97809B6B451B7E759DF52A0BFA963483
int f0_11() {
   int count_0 = 0;
   int order_total_4 = OrdersTotal();
   for (int pos_8 = OrdersTotal() - 1; pos_8 >= 0; pos_8--) {
      OrderSelect(pos_8, SELECT_BY_POS, MODE_TRADES);
      if (OrderSymbol() != Symbol() && OrderMagicNumber() != MagicNumber) continue;
      if (OrderType() == OP_SELL) count_0++;
   }
   return (count_0);
}
	  	  		 						  			 	 				   			  		 	 				  		 		 	 	 	  	    		  	 	 	 	    		 		 	   	 			 	 			     				 				  		 		     	 	   	     					 	
// 3AA84A0D65B5E26DE617BF3AEB7B517D
void f0_4() {
   int ticket_0;
   double order_lots_4;
   double ld_12;
   int cmd_20;
   double order_open_price_24;
   int li_40;
   int cmd_32 = -1;
   if (!UseAutoSmartCloseProfit) {
      if (f0_6() > 0 && f0_11() > 0) {
         StepGainProfitBuy = 100.0 * gd_356;
         StepGainProfitSell = 100.0 * gd_364;
         StepGainProfitTotal = 1.0 * gd_316;
      }
      if (f0_6() > 0 && f0_11() == 0) {
         StepGainProfitBuy = 100.0 * gd_356;
         StepGainProfitSell = 100.0 * gd_364;
         StepGainProfitTotal = 1.0 * gd_316;
         if (gi_1572 == 14 || gi_1572 == 144 || gi_1572 == 44 || gi_1572 == 122) StepGainProfitTotal = gd_316 / 2.0;
      }
      if (f0_11() > 0 && f0_6() == 0) {
         StepGainProfitBuy = 100.0 * gd_356;
         StepGainProfitSell = 100.0 * gd_364;
         StepGainProfitTotal = 1.0 * gd_316;
         if (gi_1572 == 14 || gi_1572 == 144 || gi_1572 == 44 || gi_1572 == 122) StepGainProfitTotal = gd_316 / 2.0;
      }
      if (f0_6() == 0 && f0_11() == 0) {
         StepGainProfitBuy = 100.0 * gd_356;
         StepGainProfitSell = 100.0 * gd_364;
         StepGainProfitTotal = 1.0 * gd_316;
         if (gi_1572 == 14 || gi_1572 == 144 || gi_1572 == 44 || gi_1572 == 122) StepGainProfitTotal = gd_316 / 2.0;
      }
      if (gd_808 > StepGainProfitBuy) f0_5();
      if (gd_816 > StepGainProfitSell) f0_2();
      if (AccountProfit() > StepGainProfitTotal && f0_6() != 0 || f0_11() != 0) {
         f0_17();
         f0_3();
         g_day_652 = Day();
         gi_1572 = 0;
      }
   }
   if (UseAutoSmartCloseProfit) {
      for (int count_36 = 0; count_36 <= MaxTotalOpenForEach; count_36++) {
         if (f0_11() - f0_6() >= count_36 && f0_6() != 0) gd_384 = 0.7 * (ScaleProfitClose * count_36);
         if (f0_6() - f0_11() >= count_36 && f0_11() != 0) gd_384 = 0.7 * (ScaleProfitClose * count_36);
         if (f0_6() >= count_36 && f0_11() == 0) gd_384 = 2.0 * (ScaleProfitClose * count_36);
         if (f0_11() >= count_36 && f0_6() == 0) gd_384 = 2.0 * (ScaleProfitClose * count_36);
      }
      StepGainProfitBuy = gd_400;
      StepGainProfitSell = gd_392;
      StepGainProfitTotal = gd_384;
      if (gd_808 > StepGainProfitBuy) {
         f0_5();
         f0_16();
      }
      if (gd_816 > StepGainProfitSell) {
         f0_2();
         f0_15();
      }
      if (AccountProfit() > StepGainProfitTotal) {
         f0_17();
         f0_3();
      }
   }
   if (CloseAllManually) {
      f0_3();
      return;
   }
   if (UseCutlossMinusBuySellProfit) {
      if (gd_808 < CutlossMinusProfitBuy) {
         f0_5();
         f0_16();
      }
      if (gd_816 < CutlossMinusProfitSell) {
         f0_2();
         f0_15();
      }
   }
   if (AccountBalance() - gd_292 <= 100.0) gd_292 = Balance + 1.0 * gd_284;
   if (AccountBalance() - gd_292 > 100.0) gd_292 = Balance + 1.3 * gd_284;
   if (AccountBalance() - gd_292 > 150.0) gd_292 = Balance + 1.5 * gd_284;
   if (AccountBalance() - gd_292 > 200.0) gd_292 = Balance + 1.7 * gd_284;
   if (AccountBalance() - gd_292 > 250.0) gd_292 = Balance + 2.0 * gd_284;
   if (AccountBalance() - gd_292 > 300.0) gd_292 = Balance + 2.3 * gd_284;
   if (AccountBalance() - gd_292 > 350.0) gd_292 = Balance + 2.5 * gd_284;
   if (AccountBalance() - gd_292 > 400.0) gd_292 = Balance + 2.7 * gd_284;
   if (AccountBalance() - gd_292 > 450.0) gd_292 = Balance + 3.0 * gd_284;
   if (AccountBalance() - gd_292 > 500.0) gd_292 = Balance + 3.5 * gd_284;
   if (AccountEquity() >= gd_292 && f0_6() != 0 || f0_11() != 0) {
      f0_17();
      f0_3();
      Balance = AccountBalance();
      gd_292 = AccountBalance() + gd_284;
      g_day_652 = Day();
      gi_1572 = 0;
   }
   if (AccountEquity() > EndTarget) {
      f0_17();
      f0_3();
      return;
   }
   if (UseExtraPip) {
      for (int li_44 = 1; li_44 <= OrdersTotal(); li_44++) {
         if (OrderSelect(li_40 - 1, SELECT_BY_POS) == TRUE) {
            if (OrderSymbol() != Symbol() && OrderMagicNumber() != 1212) continue;
            cmd_20 = OrderType();
            if (cmd_20 == OP_SELL) {
               order_open_price_24 = OrderOpenPrice();
               if (Digits == 5 || Digits == 3) {
                  if (Digits == 3) ld_12 = 1000.0 * (order_open_price_24 - Ask);
                  else ld_12 = 100000.0 * (order_open_price_24 - Ask);
               }
               if (Digits == 4 || Digits == 2) {
                  if (Digits == 2) ld_12 = 100.0 * (order_open_price_24 - Ask);
                  else ld_12 = 10000.0 * (order_open_price_24 - Ask);
               }
               if (Digits == 5 || Digits == 3) gd_712 = 10.0 * ld_12;
               else gd_712 = ld_12;
               if (gd_712 > ExtraPipSell) {
                  cmd_32 = cmd_20;
                  ticket_0 = OrderTicket();
                  order_lots_4 = OrderLots();
                  if (cmd_32 == OP_SELL) OrderClose(ticket_0, order_lots_4, Ask, 2);
               }
            }
            if (cmd_20 == OP_BUY) {
               order_open_price_24 = OrderOpenPrice();
               if (Digits == 5 || Digits == 3) {
                  if (Digits == 3) ld_12 = 1000.0 * (Bid - order_open_price_24);
                  else ld_12 = 100000.0 * (Bid - order_open_price_24);
               }
               if (Digits == 4 || Digits == 2) {
                  if (Digits == 2) ld_12 = 100.0 * (Bid - order_open_price_24);
                  else ld_12 = 10000.0 * (Bid - order_open_price_24);
               }
               if (Digits == 5 || Digits == 3) gd_720 = 10.0 * ld_12;
               else gd_720 = ld_12;
               if (gd_720 > ExtraPipBuy) {
                  cmd_32 = cmd_20;
                  ticket_0 = OrderTicket();
                  order_lots_4 = OrderLots();
                  if (cmd_32 == OP_BUY) OrderClose(ticket_0, order_lots_4, Bid, 2);
               }
            }
         }
      }
   }
}
	  	 		  				 		 			    			  		 	  									 		  		 					  	 	 			  					 	  	  	 		   	 	 		    			 	 	 						 		  	   	    				   		 	  			 			
// F0AE83C5626406F78827B525F4F3FE32
int f0_19(int ai_0) {
   double ihigh_4;
   double ilow_12;
   bool li_20 = FALSE;
   int index_24 = 0;
   int count_28 = 0;
   double ld_ret_32 = 0;
   if (ai_0 == 0) return (0);
   int month_40 = TimeMonth(Time[0]);
   while (!li_20) {
      if (TimeMonth(Time[index_24]) != month_40) {
         ihigh_4 = iHigh(Symbol(), PERIOD_MN1, iBarShift(Symbol(), PERIOD_MN1, Time[index_24]));
         ilow_12 = iLow(Symbol(), PERIOD_MN1, iBarShift(Symbol(), PERIOD_MN1, Time[index_24]));
         ld_ret_32 += (ihigh_4 - ilow_12) / gd_740;
         count_28++;
         if (count_28 == ai_0) li_20 = TRUE;
      }
      month_40 = TimeMonth(Time[index_24]);
      if (index_24 < Bars - 1) index_24++;
      else li_20 = TRUE;
   }
   ld_ret_32 /= ai_0;
   return (ld_ret_32);
}
	  	 		 					 						     		  		    					 			 		 			 				   	 	 	 	  				  	  	    		   			 		   				 	 								  	  	        			    		 		 			 		 
// 0A3D2865FA7C5FE4F781AB92B14AB5BF
int f0_0(int ai_0) {
   double ihigh_4;
   double ilow_12;
   bool li_20 = FALSE;
   int index_24 = 0;
   int count_28 = 0;
   double ld_ret_32 = 0;
   int day_40 = TimeDay(Time[0]);
   while (!li_20) {
      if (TimeDay(Time[index_24]) != day_40 && TimeDayOfWeek(Time[index_24]) != 0) {
         ihigh_4 = iHigh(Symbol(), PERIOD_D1, iBarShift(Symbol(), PERIOD_D1, Time[index_24]));
         ilow_12 = iLow(Symbol(), PERIOD_D1, iBarShift(Symbol(), PERIOD_D1, Time[index_24]));
         ld_ret_32 += (ihigh_4 - ilow_12) / gd_740;
         count_28++;
         if (count_28 == ai_0) li_20 = TRUE;
      }
      day_40 = TimeDay(Time[index_24]);
      if (index_24 < Bars - 1) index_24++;
      else li_20 = TRUE;
   }
   ld_ret_32 /= ai_0;
   return (ld_ret_32);
}
					   	  	 	 		  				     	    			   	   		   	      	 				 		  	    	 	  	 	  	 						 		 		 	  		 			  	      	  		  		 	  	 		   				 	 	 	 
// 92CAE10997E436CCC578542FBB65FEE4
int f0_10(int ai_0) {
   if (Open[ai_0] == Close[ai_0] || Open[ai_0] > Close[ai_0] || Open[ai_0] < Close[ai_0]) {
      if (!((Open[ai_0] - Close[ai_0] > 0.0 && Open[ai_0] - Close[ai_0] < 10.0 * Point) || (Close[ai_0] - Open[ai_0] > 0.0 && Close[ai_0] - Open[ai_0] < 10.0 * Point))) return (0);
      if (!((High[ai_0] - Open[ai_0] / Close[ai_0] - Low[ai_0] > 1.0 && High[ai_0] - Open[ai_0] / Close[ai_0] - Low[ai_0] < 1.3) || (High[ai_0] - Close[ai_0] / Open[ai_0] - Low[ai_0] > 1.0 &&
         High[ai_0] - Close[ai_0] / Open[ai_0] - Low[ai_0] < 1.3))) return (0);
      return (1);
      return (0);
   }
   return (0);
}
		 			 	  		      			 			 	 		 			 	 	  	 				 	  	  	  		 				 	    	  			 									 	    	  		  					   		 	 		     				  		  		   		  			    	
// 7D972B5413006BD156B7F558AA7AAA37
bool f0_9() {
   if (AccountNumber() == 60573541) return (TRUE);
   if (AccountNumber() == 5199959) return (TRUE);
   if (AccountNumber() == 2176590) return (TRUE);
   if (AccountNumber() == 130309) return (TRUE);
   if (AccountNumber() == 389232) return (TRUE);
   if (AccountNumber() == 91085) return (TRUE);
   if (AccountNumber() == 189175) return (TRUE);
   if (AccountNumber() == 382554) return (TRUE);
   if (AccountNumber() == 114362) return (TRUE);
   if (AccountNumber() == 60521090) return (TRUE);
   if (AccountNumber() == 445236) return (TRUE);
   if (AccountNumber() == 65694950) return (TRUE);
   if (AccountNumber() == 1206515) return (TRUE);
   if (AccountNumber() == 60477980) return (TRUE);
   if (AccountNumber() == 505246) return (TRUE);
   if (AccountNumber() == 7268054) return (TRUE);
   if (AccountNumber() == 258407) return (TRUE);
   if (AccountNumber() == 65678895) return (TRUE);
   if (AccountNumber() == 60465930) return (TRUE);
   if (AccountNumber() == 7268054) return (TRUE);
   if (AccountNumber() == 9125599) return (TRUE);
   if (AccountNumber() == 6067912) return (TRUE);
   if (AccountNumber() == 424300) return (TRUE);
   return (FALSE);
}
