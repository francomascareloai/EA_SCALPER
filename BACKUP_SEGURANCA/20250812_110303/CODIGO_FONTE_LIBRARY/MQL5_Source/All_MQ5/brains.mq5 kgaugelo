#property copyright "kgaugelo "
//#property link      "\#property version   "1.00"

#include <Trade\Trade.mqh>
CTrade Tradec;
int Expert_MagicNumber =2022;
//Risk Mangement Viriables
   input double BuyPresure = 10;
   input double SellPresure = 10;
   input double  TslPoints=50; input double TpPoints=100;   input double  LotSize =0.01;//Variables to save open first candlestick 
   double candleFC=iClose(_Symbol,PERIOD_CURRENT,1);
   double candleFO=iOpen(_Symbol,PERIOD_CURRENT,1);

//Variables to save second candlestick 
   double candleSC=iClose(_Symbol,PERIOD_CURRENT,2);
   double candleSO=iOpen(_Symbol,PERIOD_CURRENT,2);
   
   
   
 double Position(){
 
 double lot;
 double lotMin = SymbolInfoDouble(_Symbol,SYMBOL_VOLUME_MIN);
 double lotMax = SymbolInfoDouble(_Symbol,SYMBOL_VOLUME_MAX);
 
 lot = LotSize;
 if (lot <= lotMin){
 lot = lotMin;
 }
 
 if (lot >= lotMax){
 lot = lotMax;
 }
 return (lot);
 }

int OnInit()
  {
  
    //RVI Indicator Handles
   

   
  
say();
 TesterHideIndicators(true);
 
   return(INIT_SUCCEEDED);
  }
//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
  {
//---
   
  }
//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
//Logic to check the types of viriables for every tick
void OnTick()
  {

 //Variables to save open first candlestick 
   double candleFC=iClose(_Symbol,PERIOD_CURRENT,1);
   double candleFO=iOpen(_Symbol,PERIOD_CURRENT,1);

//Variables to save second candlestick 
   double candleSC=iClose(_Symbol,PERIOD_CURRENT,2);
   double candleSO=iOpen(_Symbol,PERIOD_CURRENT,2);

//Variables to read Bid and Ask
   double Ask = NormalizeDouble(SymbolInfoDouble(_Symbol,SYMBOL_ASK),_Digits);
   double Bid = NormalizeDouble(SymbolInfoDouble(_Symbol,SYMBOL_BID),_Digits);
   double LotIn= NormalizeDouble(Position(),2);
//Logic to check the types of viriables for every tick
  int CandlestickNo = Bars(_Symbol,PERIOD_CURRENT);
  string newCandle ="Yes";
  
  newCandle = checkCandles(CandlestickNo);

 
 
   //RVI Indicator Handles

   

   
int movingAverage=iMA(NULL,0,12,0,MODE_SMA,PRICE_CLOSE );double movingAverageArray[];ArraySetAsSeries(movingAverageArray,true);CopyBuffer(movingAverage,0,0,3,movingAverageArray); 
;
int deMarker=iDeMarker(NULL,0, 12  ); 
double deMarkerArray[];ArraySetAsSeries(deMarkerArray,true);CopyBuffer(deMarker,0,0,3,deMarkerArray);
if(newCandle == "Yes"){
if(PositionsTotal() == 0){
   if(movingAverageArray[0] < Bid&&deMarkerArray[0] > 0.5){
   
   
   Tradec.PositionOpen(_Symbol,ORDER_TYPE_BUY,LotIn,Ask,0,0,NULL);
 
   
   }
   

 if(movingAverageArray[0] > Ask&&deMarkerArray[0] < 0.5){ 
   
     Tradec.PositionOpen(_Symbol,ORDER_TYPE_SELL,LotIn,Bid,0,0,NULL);
   

  }
 } 
  
}

 SellTsl();
 BuyTsl(); 
 say();
 
 string prftCall=profit();
 
 ObjectCreate(0,"Tet",OBJ_LABEL,0,0,0,0,0,0,0);
   
ObjectSetString(0,"Tet",OBJPROP_TEXT,"Profit: " +prftCall);

   ObjectSetString(0,"Tet",OBJPROP_FONT,"Arial");
   ObjectSetInteger(0,"Tet",OBJPROP_FONTSIZE,20);
   ObjectSetInteger(0,"Tet",OBJPROP_CORNER,CORNER_RIGHT_UPPER);
   
ObjectSetInteger(0,"Tet",OBJPROP_XDISTANCE,xdistance());

ObjectSetInteger(0,"Tet",OBJPROP_YDISTANCE,0);

ObjectSetInteger(0,"Tet",OBJPROP_CORNER,CORNER_RIGHT_UPPER);
   
ObjectSetInteger(0,"Tet",OBJPROP_COLOR,clrBlue);
ChartSetInteger(0,CHART_COLOR_BACKGROUND,clrGold);
   
  }
//+------------------------------------------------------------------+
//Buying postions Trailing Stoploss Function
void BuyTsl(){
  for (int i = PositionsTotal() -1; i >= 0 ; i--){

ulong positTick = PositionGetTicket(i);
   if(PositionSelectByTicket(positTick)){

       if(PositionGetString(POSITION_SYMBOL)== _Symbol){
            double postSL=PositionGetDouble(POSITION_SL);
              double postTP=PositionGetDouble(POSITION_TP);
 
            if (PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_BUY){
 
                    double Sl = SymbolInfoDouble( _Symbol,SYMBOL_BID) -TslPoints * _Point;
 
                        if(Sl > postSL || postSL == 0){
 
                               Tradec.PositionModify(positTick,Sl,postTP);

 
   }else if (PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_SELL){
 
                                double Sl = SymbolInfoDouble( _Symbol,SYMBOL_ASK)  +TslPoints * _Point;
 
 if(Sl < postSL || postSL == 0){
 CTrade Tradec;
 
            Tradec.PositionModify(positTick,Sl,postTP);
            
   
           }
         }

        }
      }
   }
   
  }   
  
}
 //Selling postions Trailing Stoploss Function
 void SellTsl(){
 for (int i = PositionsTotal() -1; i >= 0 ; i--){

ulong positTick = PositionGetTicket(i);
   if(PositionSelectByTicket(positTick)){

       if(PositionGetString(POSITION_SYMBOL)== _Symbol){
            double postSL=PositionGetDouble(POSITION_SL);
              double postTP=PositionGetDouble(POSITION_TP);
 
            if (PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_SELL){
 

                                double Sl = SymbolInfoDouble( _Symbol,SYMBOL_ASK)  +TslPoints * _Point;
 
               if(Sl < postSL || postSL ==0 ){
 
            Tradec.PositionModify(positTick,Sl,postTP);

 
             }
   

         }

        }
      }
   }
} 
string checkCandles(int candlestickNo){
   static int lastCandle;
   string isNewCandle = "No";
   
   if(candlestickNo > lastCandle){
   isNewCandle = "Yes";
   
   lastCandle = candlestickNo;
   }
     return isNewCandle;
  } 
  void say(){
  /*
 ObjectCreate(0,"Text",OBJ_LABEL,0,0,0);

ObjectSetString(0,"Text",OBJPROP_FONT,"Arial");

ObjectSetInteger(0,"Text",OBJPROP_FONTSIZE,24);

ObjectSetString(0,"Text",OBJPROP_TEXT,0,kgaugelo );
ObjectSetInteger(0,"Text",OBJPROP_XDISTANCE,200);

ObjectSetInteger(0,"Text",OBJPROP_CORNER,CORNER_RIGHT_UPPER);

ObjectSetInteger(0,"Text",OBJPROP_YDISTANCE,0);

ObjectGetInteger(0,"Text",OBJPROP_TIMEFRAMES,OBJ_ALL_PERIODS);

ChartRedraw(0); 
  
  ChartSetInteger(0,CHART_COLOR_BACKGROUND,clrGold);
  */
ObjectCreate(0,"Test",OBJ_LABEL,0,0,0,0,0,0,0);
   
ObjectSetString(0,"Test",OBJPROP_TEXT,"FxPill");

   ObjectSetString(0,"Test",OBJPROP_FONT,"sans-serif");
   ObjectSetInteger(0,"Test",OBJPROP_FONTSIZE,30);
   ObjectSetInteger(0,"Test",OBJPROP_CORNER,CORNER_RIGHT_UPPER);
   
ObjectSetInteger(0,"Test",OBJPROP_XDISTANCE,200);

ObjectSetInteger(0,"Test",OBJPROP_YDISTANCE,0);

ObjectSetInteger(0,"Test",OBJPROP_CORNER,CORNER_RIGHT_UPPER);
   
ObjectSetInteger(0,"Test",OBJPROP_COLOR,clrBlack);
ChartSetInteger(0,CHART_COLOR_BACKGROUND,clrGold);
  }
  
 string profit(){
 
  string prft="No Open Position";
 
 if(PositionsTotal() > 0){
 if(PositionGetString(POSITION_SYMBOL) == _Symbol){
 
  prft = PositionsTotal()*PositionGetDouble(POSITION_PROFIT);
     }else{
     
   prft ="No Active Position";  
     
     }
   }
   return prft;
 }
 
int xdistance(){
 
  int dist=550;
 
 if(PositionsTotal() > 0){
 if(PositionGetString(POSITION_SYMBOL) == _Symbol){
 
  dist =350;
     }else{
     
   dist = 550;  
     
     }
   }
   return dist;
 } 