// This work is licensed under Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International  
// https://creativecommons.org/licenses/by-nc-sa/4.0/
// © BigBeluga


//@version=6
indicator("Choch Pattern Levels [BigBeluga]", overlay = true, max_lines_count = 500, max_bars_back = 5000, calc_bars_count = 5000)

// ＩＮＰＵＴＳ ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――{
len = input.int(10, "Length")
amount = input.int(10, "Amount of Patterns")
show_delta = input.bool(true, "Show Delta Volume", inline = "Delta")
sizeDelta = input.string("normal", "", ["tiny", "small", "normal", "large", "huge"], inline = "Delta")
col_plus = input.color(color.lime, "ChoCh Up")
col_minus = input.color(color.red, "ChoCh Dn")

var ph          = float(na)
var pl          = float(na)
var pl_index    = int(na)
var ph_index    = int(na)


var trend = false

type zone 
    line level 
    label label1
    label label2
    label label3
    label label4
    polyline poly
    label label5

var ms_levels = array.new<zone>()

// }



// ＣＡＬＣＵＬＡＴＩＯＮＳ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――{

sizeLbl = switch sizeDelta
    "tiny" => size.tiny
    "small" => size.small
    "normal" => size.normal
    "large" => size.large
    "huge" => size.huge

pivotH = ta.pivothigh(len, len)
pivotL = ta.pivotlow(len, len)

if not na(pivotH)
    ph_index := bar_index[len]
    ph := pivotH

if not na(pivotL)
    pl_index := bar_index[len]
    pl := pivotL


if ta.crossover(high, ph) and not trend
    
    check = false
    l = low
    lbl1 = label(na)
    lbl2 = label(na)
    lbl3 = label(na)
    lbl4 = label(na)
    lbl5 = label(na)

    lne = line(na)

    cp = array.new<chart.point>()

    c_p1 = chart.point.from_index(ph_index, ph)
    c_p2 = chart.point.from_index(bar_index, high)

    cp.push(c_p1)
    cp.push(c_p2)

    lbl1 := label.new(c_p1, "", style = label.style_circle, color = color.new(col_plus, 30))
    lbl2 := label.new(c_p2, "", style = label.style_circle, color = color.new(col_plus, 30))

    delta = 0.

    for i = 0 to bar_index-ph_index
        l := math.min(l, low[i])
        delta += close[i] > open[i] ? volume[i] : -volume[i]

    for i = 0 to bar_index-ph_index 
        lo = low[i]

        if lo == l and not check
            check := true
            cp.push(chart.point.from_index(bar_index-i, l))
            lbl3    := label.new(bar_index-i, l, "", style = label.style_circle, color = color.new(col_plus, 30))
            lne     := line.new(bar_index-i, l, bar_index, l, color = col_plus)

            lbl4 := label.new(bar_index, l, "◯", style = label.style_label_center, color = color.new(col_plus, 100), textcolor = col_plus)
            if show_delta
                lbl5 := label.new(int(math.avg(bar_index,ph_index)), math.avg(lo, high)+(high-lo)*0.1, (delta > 0 ? "+" : "") + str.tostring(delta, format.volume), style = label.style_label_center, color = color.new(col_plus, 100), textcolor = delta > 0 ? col_plus : col_minus, tooltip = "Delta Volume")


    poly = polyline.new(cp, closed = true, fill_color = color.new(col_plus, 85), line_color = col_plus, line_width = 2)

    z = zone.new(lne, lbl1, lbl2, lbl3, lbl4, poly, lbl5)
    ms_levels.push(z)

    trend := true



if ta.crossunder(low, pl) and trend

    check = false
    h = high
    lbl1 = label(na)
    lbl2 = label(na)
    lbl3 = label(na)
    lbl4 = label(na)
    lbl5 = label(na)

    lne = line(na)

    cp = array.new<chart.point>()

    c_p1 = chart.point.from_index(pl_index, pl)
    c_p2 = chart.point.from_index(bar_index, low)

    cp.push(c_p1)
    cp.push(c_p2)

    lbl1 := label.new(c_p1, "", style = label.style_circle, color = color.new(col_minus, 30))
    lbl2 := label.new(c_p2, "", style = label.style_circle, color = color.new(col_minus, 30))

    delta = 0.

    for i = 0 to bar_index-pl_index
        h := math.max(h, high[i])
        delta += close[i] > open[i] ? volume[i] : -volume[i]

    for i = 0 to bar_index-pl_index
        hi = high[i]

        if hi == h and not check
            check := true
            cp.push(chart.point.from_index(bar_index-i, h))
            lbl3 := label.new(bar_index-i, h, "", style = label.style_circle, color = color.new(col_minus, 30))
            lne := line.new(bar_index-i, h, bar_index, h, color = col_minus)
            lbl4 := label.new(bar_index, h, "◯", style = label.style_label_center, color = color.new(col_minus, 100), textcolor = col_minus)

            if show_delta
                lbl5 := label.new(bar_index - i, math.avg(hi, low)-(hi-low)*0.2, (delta > 0 ? "+" : "") + str.tostring(delta, format.volume), style = label.style_label_center, color = color.new(col_minus, 100), textcolor = delta > 0 ? col_plus : col_minus)

    poly = polyline.new(cp, closed = true, fill_color = color.new(col_minus, 80), line_color = col_minus, line_width = 2)
    
    z = zone.new(lne, lbl1, lbl2, lbl3, lbl4, poly, lbl5)
    ms_levels.push(z)

    trend := false


body_h = close > open ? close : open
body_l = close < open ? close : open

for z in ms_levels

    z.level.set_x2(bar_index+5)
    z.label4.set_x(bar_index+5)

    z.level.set_width(3)

    z.label1.set_size(size.tiny)
    z.label2.set_size(size.tiny)
    z.label3.set_size(size.tiny)
    z.label4.set_size(size.large)

    z.label5.set_size(sizeLbl)


    if body_h > z.level.get_y1() and body_l < z.level.get_y1() or body_h[1] > z.level.get_y1() and body_l[1] < z.level.get_y1()  
        z.level.delete()
        z.label1.delete()
        z.label2.delete()
        z.label3.delete()
        z.label4.delete()  
        z.label5.delete()  
        z.poly.delete()

        ms_levels.remove(ms_levels.indexof(z))

if ms_levels.size() > amount
    z = ms_levels.shift()
    z.level.delete()
    z.label1.delete()
    z.label2.delete()
    z.label3.delete()
    z.label4.delete()  
    z.label5.delete()  
    z.poly.delete()

// }
