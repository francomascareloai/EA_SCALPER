// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Join our channel for more free tools: https://t.me/simpleforextools

// This Pine Script® code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © oio38

//@version=5
indicator('ABO LANA-𝑀', overlay=true, max_bars_back=5000, max_labels_count=500, max_lines_count=500)

// === إعدادات المؤشر من الكود الجديد (ALHDDADI) ===
src = input.source(close, "Source")
atrPeriod = input.int(14, title="ATR Period")
atrMult = input.float(1.3, title="ATR Multiplier", step=0.1)
emaPeriod = input.int(9, title="EMA Period")

// === حساب شموع Heikin Ashi ===
haClose = (open + high + low + close) / 4
var float haOpen = na
haOpen := na(haOpen[1]) ? (open + close) / 2 : (haOpen[1] + haClose[1]) / 2
haHigh = math.max(high, math.max(haClose, haOpen))
haLow = math.min(low, math.min(haClose, haOpen))

// === حساب ATR و Supertrend ===
atr = ta.atr(atrPeriod)
upperBand = haClose - atrMult * atr
lowerBand = haClose + atrMult * atr

trendUp = 0.0
trendDown = 0.0
trendDir = 0

trendUp := na(trendUp[1]) ? upperBand : haClose[1] > trendUp[1] ? math.max(upperBand, trendUp[1]) : upperBand
trendDown := na(trendDown[1]) ? lowerBand : haClose[1] < trendDown[1] ? math.min(lowerBand, trendDown[1]) : lowerBand
trendDir := na(trendDir[1]) ? 1 : trendDir[1]
trendDir := trendDir == -1 and haClose > trendDown[1] ? 1 : trendDir == 1 and haClose < trendUp[1] ? -1 : trendDir[1]

// === حساب EMA ===
ema = ta.ema(src, emaPeriod)

// === إشارات البيع والشراء من الكود الجديد ===
buySignal = trendDir == 1 and trendDir[1] == -1 and close > ema
sellSignal = trendDir == -1 and trendDir[1] == 1 and close < ema

// === رسم الإشارات الجديدة ===
plotshape(buySignal, title="Buy Signal", location=location.belowbar, style=shape.labelup, text="BUY", size=size.normal, color=color.green, textcolor=color.white, offset=-1)
plotshape(sellSignal, title="Sell Signal", location=location.abovebar, style=shape.labeldown, text="SELL", size=size.normal, color=color.red, textcolor=color.white, offset=-1)

// === تنبيهات صوتية ===
alertcondition(buySignal, title="Buy Alert", message="إشارة شراء !")
alertcondition(sellSignal, title="Sell Alert", message="إشارة بيع !")

// === إعدادات مناطق العرض والطلب ===
swing_length = input.int(10, 'طول القمة/القاع', group='إعدادات مناطق العرض والطلب', minval=1, maxval=50)
history_of_demand_to_keep = input.int(20, 'عدد المناطق المحفوظة', minval=5, maxval=50)
box_width = input.float(2.5, 'عرض مربع العرض/الطلب', group='إعدادات مناطق العرض والطلب', minval=1, maxval=10, step=0.5)

// === إعدادات العرض المرئي ===
supply_color = input.color(#FF0000, 'لون منطقة العرض', group='الإعدادات المرئية', inline='3')
supply_outline_color = input.color(#FF0000, 'لون حدود العرض', group='الإعدادات المرئية', inline='3')
demand_color = input.color(#00FF00, 'لون منطقة الطلب', group='الإعدادات المرئية', inline='4')
demand_outline_color = input.color(#00FF00, 'لون حدود الطلب', group='الإعدادات المرئية', inline='4')
bos_label_color = input.color(#000000, 'لون تسمية BOS', group='الإعدادات المرئية', inline='5')
poi_label_color = input.color(#FFFFFF, 'لون تسمية POI', group='الإعدادات المرئية', inline='7')
poi_border_color = input.color(#000000, 'لون حدود POI', group='الإعدادات المرئية', inline='7')

// === الدوال المساعدة ===
f_array_add_pop(array, new_value_to_add) =>
    array.unshift(array, new_value_to_add)
    array.pop(array)

f_check_overlapping(new_poi, box_array, atrValue) =>
    atr_threshold = atrValue * 2
    okay_to_draw = true
    for i = 0 to array.size(box_array) - 1
        top = box.get_top(array.get(box_array, i))
        bottom = box.get_bottom(array.get(box_array, i))
        poi = (top + bottom) / 2
        upper_boundary = poi + atr_threshold
        lower_boundary = poi - atr_threshold
        if new_poi >= lower_boundary and new_poi <= upper_boundary
            okay_to_draw := false
            break
        else 
            okay_to_draw := true
    okay_to_draw

f_supply_demand(value_array, bn_array, box_array, label_array, box_type, atrValue) =>
    atr_buffer = atrValue * (box_width / 10)
    box_left = array.get(bn_array, 0)
    box_right = bar_index
    var float box_top = 0.0
    var float box_bottom = 0.0
    var float poi = 0.0
    if box_type == 1
        box_top := array.get(value_array, 0)
        box_bottom := box_top - atr_buffer
        poi := (box_top + box_bottom) / 2
    else if box_type == -1
        box_bottom := array.get(value_array, 0)
        box_top := box_bottom + atr_buffer
        poi := (box_top + box_bottom) / 2
    okay_to_draw = f_check_overlapping(poi, box_array, atrValue)
    if box_type == 1 and okay_to_draw
        box.delete(array.get(box_array, array.size(box_array) - 1))
        f_array_add_pop(box_array, box.new(left=box_left, top=box_top, right=box_right, bottom=box_bottom, border_color=supply_outline_color,
             bgcolor=supply_color, extend=extend.right, text='SUPPLY', text_halign=text.align_center, text_valign=text.align_center, text_color=poi_label_color, text_size=size.small, xloc=xloc.bar_index))
        box.delete(array.get(label_array, array.size(label_array) - 1))
        f_array_add_pop(label_array, box.new(left=box_left, top=poi, right=box_right, bottom=poi, border_color=poi_border_color,
             bgcolor=poi_border_color, extend=extend.right, text='POI', text_halign=text.align_left, text_valign=text.align_center, text_color=poi_label_color, text_size=size.small, xloc=xloc.bar_index))
    else if box_type == -1 and okay_to_draw
        box.delete(array.get(box_array, array.size(box_array) - 1))
        f_array_add_pop(box_array, box.new(left=box_left, top=box_top, right=box_right, bottom=box_bottom, border_color=demand_outline_color,
             bgcolor=demand_color, extend=extend.right, text='DEMAND', text_halign=text.align_center, text_valign=text.align_center, text_color=poi_label_color, text_size=size.small, xloc=xloc.bar_index))
        box.delete(array.get(label_array, array.size(label_array) - 1))
        f_array_add_pop(label_array, box.new(left=box_left, top=poi, right=box_right, bottom=poi, border_color=poi_border_color,
             bgcolor=poi_border_color, extend=extend.right, text='POI', text_halign=text.align_left, text_valign=text.align_center, text_color=poi_label_color, text_size=size.small, xloc=xloc.bar_index))

f_sd_to_bos(box_array, bos_array, label_array, zone_type) =>
    if zone_type == 1
        for i = 0 to array.size(box_array) - 1
            level_to_break = box.get_top(array.get(box_array,i))
            if close >= level_to_break
                copied_box = box.copy(array.get(box_array,i))
                f_array_add_pop(bos_array, copied_box)
                mid = (box.get_top(array.get(box_array,i)) + box.get_bottom(array.get(box_array,i))) / 2
                box.set_top(array.get(bos_array,0), mid)
                box.set_bottom(array.get(bos_array,0), mid)
                box.set_extend(array.get(bos_array,0), extend.none)
                box.set_right(array.get(bos_array,0), bar_index)
                box.set_text(array.get(bos_array,0), 'BOS')
                box.set_text_color(array.get(bos_array,0), bos_label_color)
                box.set_text_size(array.get(bos_array,0), size.small)
                box.set_text_halign(array.get(bos_array,0), text.align_center)
                box.set_text_valign(array.get(bos_array,0), text.align_center)
                box.delete(array.get(box_array, i))
                box.delete(array.get(label_array, i))
    if zone_type == -1
        for i = 0 to array.size(box_array) - 1
            level_to_break = box.get_bottom(array.get(box_array,i))
            if close <= level_to_break
                copied_box = box.copy(array.get(box_array,i))
                f_array_add_pop(bos_array, copied_box)
                mid = (box.get_top(array.get(box_array,i)) + box.get_bottom(array.get(box_array,i))) / 2
                box.set_top(array.get(bos_array,0), mid)
                box.set_bottom(array.get(bos_array,0), mid)
                box.set_extend(array.get(bos_array,0), extend.none)
                box.set_right(array.get(bos_array,0), bar_index)
                box.set_text(array.get(bos_array,0), 'BOS')
                box.set_text_color(array.get(bos_array,0), bos_label_color)
                box.set_text_size(array.get(bos_array,0), size.small)
                box.set_text_halign(array.get(bos_array,0), text.align_center)
                box.set_text_valign(array.get(bos_array,0), text.align_center)
                box.delete(array.get(box_array, i))
                box.delete(array.get(label_array, i))

f_extend_box_endpoint(box_array) =>
    for i = 0 to array.size(box_array) - 1
        box.set_right(array.get(box_array, i), bar_index + 100)

// === حساب مناطق العرض والطلب ===
atrValue = ta.atr(50)
swing_high = ta.pivothigh(high, swing_length, swing_length)
swing_low = ta.pivotlow(low, swing_length, swing_length)

var swing_high_values = array.new_float(5, 0.0)
var swing_low_values = array.new_float(5, 0.0)
var swing_high_bns = array.new_int(5, 0)
var swing_low_bns = array.new_int(5, 0)
var current_supply_box = array.new_box(history_of_demand_to_keep, na)
var current_demand_box = array.new_box(history_of_demand_to_keep, na)
var current_supply_poi = array.new_box(history_of_demand_to_keep, na)
var current_demand_poi = array.new_box(history_of_demand_to_keep, na)
var supply_bos = array.new_box(5, na)
var demand_bos = array.new_box(5, na)

// === تحديث مناطق العرض والطلب ===
if not na(swing_high)
    f_array_add_pop(swing_high_values, swing_high)
    f_array_add_pop(swing_high_bns, bar_index[swing_length])
    f_supply_demand(swing_high_values, swing_high_bns, current_supply_box, current_supply_poi, 1, atrValue)
else if not na(swing_low)
    f_array_add_pop(swing_low_values, swing_low)
    f_array_add_pop(swing_low_bns, bar_index[swing_length])
    f_supply_demand(swing_low_values, swing_low_bns, current_demand_box, current_demand_poi, -1, atrValue)

f_sd_to_bos(current_supply_box, supply_bos, current_supply_poi, 1)
f_sd_to_bos(current_demand_box, demand_bos, current_demand_poi, -1)
f_extend_box_endpoint(current_supply_box)
f_extend_box_endpoint(current_demand_box)

// === إعدادات المخاطر والأهداف ===
riskGroup = "إعدادات المخاطر والأهداف AL-HADDADI"
showLevels = input.bool(true, "عرض مستويات الدخول والأهداف", group=riskGroup)
showLabels = input.bool(true, "عرض تسميات المستويات", group=riskGroup)
riskType = "ATR مضاعف"
slMultiplier = input.float(1.0, "مضاعف وقف الخسارة (ATR)", minval=0.1, maxval=5, step=0.1, group=riskGroup)
tp1Multiplier = input.float(1.0, "مضاعف الهدف الأول (ATR)", minval=0.1, maxval=5, step=0.1, group=riskGroup)
tp2Multiplier = input.float(2.0, "مضاعف الهدف الثاني (ATR)", minval=0.1, maxval=5, step=0.1, group=riskGroup)
tp3Multiplier = input.float(3.0, "مضاعف الهدف الثالث (ATR)", minval=0.1, maxval=5, step=0.1, group=riskGroup)
entryColor = input.color(color.new(#00FF00, 70), "لون نقطة الدخول", group=riskGroup)
slColor = input.color(color.new(#FF0000, 70), "لون وقف الخسارة", group=riskGroup)
tp1Color = input.color(color.new(#FFFF00, 70), "لون الهدف الأول", group=riskGroup)
tp2Color = input.color(color.new(#FFA500, 70), "لون الهدف الثاني", group=riskGroup)
tp3Color = input.color(color.new(#00BFFF, 70), "لون الهدف الثالث", group=riskGroup)

// === متغيرات تخزين المستويات ===
var float entryPrice = na
var float slPrice = na
var float tp1Price = na
var float tp2Price = na
var float tp3Price = na
var int signalBarIndex = na

// === متغيرات تتبع تحقيق الأهداف ===
var bool tp1Hit = false
var bool tp2Hit = false
var bool tp3Hit = false

// === تحديد اتجاه الصفقة ===
var int pos = 0
if buySignal and not buySignal[1]
    pos := 1
    tp1Hit := false
    tp2Hit := false
    tp3Hit := false
else if sellSignal and not sellSignal[1]
    pos := -1
    tp1Hit := false
    tp2Hit := false
    tp3Hit := false

// === كشف الإشارة الجديدة فقط ===
preBuySignal = buySignal and not buySignal[1]
preSellSignal = sellSignal and not sellSignal[1]

if (preBuySignal or preSellSignal) and (na(signalBarIndex) or (not na(signalBarIndex) and bar_index > signalBarIndex))
    entryPrice := close
    signalBarIndex := bar_index
    atrValue := ta.atr(14)
    if preBuySignal
        slPrice := close - (atrValue * slMultiplier)
        tp1Price := close + (atrValue * tp1Multiplier)
        tp2Price := close + (atrValue * tp2Multiplier)
        tp3Price := close + (atrValue * tp3Multiplier)
    else if preSellSignal
        slPrice := close + (atrValue * slMultiplier)
        tp1Price := close - (atrValue * tp1Multiplier)
        tp2Price := close - (atrValue * tp2Multiplier)
        tp3Price := close - (atrValue * tp3Multiplier)

// === كشف تحقيق الأهداف ===
if not na(tp1Price) and ((close >= tp1Price and pos == 1) or (close <= tp1Price and pos == -1)) and not tp1Hit
    tp1Hit := true
    alert("تم تحقيق الهدف الأول (TP1) عند: " + str.tostring(tp1Price), alert.freq_once_per_bar)
if not na(tp2Price) and ((close >= tp2Price and pos == 1) or (close <= tp2Price and pos == -1)) and not tp2Hit
    tp2Hit := true
    alert("تم تحقيق الهدف الثاني (TP2) عند: " + str.tostring(tp2Price), alert.freq_once_per_bar)
if not na(tp3Price) and ((close >= tp3Price and pos == 1) or (close <= tp3Price and pos == -1)) and not tp3Hit
    tp3Hit := true
    alert("تم تحقيق الهدف الثالث (TP3) عند: " + str.tostring(tp3Price), alert.freq_once_per_bar)
    entryPrice := close
    atrValue := ta.atr(14)
    if pos == 1
        tp1Price := close + (atrValue * tp1Multiplier)
        tp2Price := close + (atrValue * tp2Multiplier)
        tp3Price := close + (atrValue * tp3Multiplier)
    else if pos == -1
        tp1Price := close - (atrValue * tp1Multiplier)
        tp2Price := close - (atrValue * tp2Multiplier)
        tp3Price := close - (atrValue * tp3Multiplier)
    tp1Hit := false
    tp2Hit := false
    tp3Hit := false

// === عرض المستويات على الرسم البياني ===
if showLevels and not na(entryPrice)
    var line entryLine = na
    var line slLine = na
    var line tp1Line = na
    var line tp2Line = na
    var line tp3Line = na
    line.delete(entryLine)
    line.delete(slLine)
    line.delete(tp1Line)
    line.delete(tp2Line)
    line.delete(tp3Line)
    entryLine := line.new(bar_index-1, entryPrice, bar_index, entryPrice, color=entryColor, width=2, style=line.style_solid, extend=extend.right)
    slLine := line.new(bar_index-1, slPrice, bar_index, slPrice, color=slColor, width=2, style=line.style_solid, extend=extend.right)
    tp1Line := line.new(bar_index-1, tp1Price, bar_index, tp1Price, color=tp1Color, width=2, style=line.style_solid, extend=extend.right)
    tp2Line := line.new(bar_index-1, tp2Price, bar_index, tp2Price, color=tp2Color, width=2, style=line.style_solid, extend=extend.right)
    tp3Line := line.new(bar_index-1, tp3Price, bar_index, tp3Price, color=tp3Color, width=2, style=line.style_solid, extend=extend.right)
    if showLabels
        var label entryLabel = na
        var label slLabel = na
        var label tp1Label = na
        var label tp2Label = na
        var label tp3Label = na
        label.delete(entryLabel)
        label.delete(slLabel)
        label.delete(tp1Label)
        label.delete(tp2Label)
        label.delete(tp3Label)
        entryLabel := label.new(bar_index, entryPrice, "الدخول: " + str.tostring(entryPrice, "#.##"), color=entryColor, textcolor=color.white, style=label.style_label_left, yloc=yloc.price)
        slLabel := label.new(bar_index, slPrice, "وقف: " + str.tostring(slPrice, "#.##"), color=slColor, textcolor=color.white, style=label.style_label_left, yloc=yloc.price)
        tp1Label := label.new(bar_index, tp1Price, "هدف1: " + str.tostring(tp1Price, "#.##"), color=tp1Color, textcolor=color.white, style=label.style_label_left, yloc=yloc.price)
        tp2Label := label.new(bar_index, tp2Price, "هدف2: " + str.tostring(tp2Price, "#.##"), color=tp2Color, textcolor=color.white, style=label.style_label_left, yloc=yloc.price)
        tp3Label := label.new(bar_index, tp3Price, "هدف3: " + str.tostring(tp3Price, "#.##"), color=tp3Color, textcolor=color.white, style=label.style_label_left, yloc=yloc.price)

// === لوحة المعلومات ===
enableDashboard   = input.bool(true, "تفعيل لوحة المعلومات", group="لوحة المعلومات ELTE SMART")
locationDashboard = input.string("Top right", "الموقع", options=["Top right", "Top left", "Middle right", "Middle left", "Bottom right", "Bottom left"], group="لوحة المعلومات ELTE SMART")
sizeDashboard     = input.string("Small", "الحجم", options=["Tiny", "Small", "Normal"], group="لوحة المعلومات ELTE SMART")
colorBackground   = input.color(#2A2E39, "لون الخلفية", group="لوحة المعلومات ELTE SMART")
colorFrame        = input.color(#2A2E39, "لون الإطار", group="لوحة المعلومات ELTE SMART")
colorBorder       = input.color(#363A45, "لون الحدود", group="لوحة المعلومات ELTE SMART")

// === إنشاء الجدول ===
var dashboard_table = table.new(position.top_right, 6, 3, // تغيير الموقع الافتراضي إلى Top right
     bgcolor = colorBackground,
     frame_color = colorFrame,
     frame_width = 1,
     border_color = colorBorder,
     border_width = 1)

// === تحديد موقع الجدول ===
var table_position = locationDashboard == "Top right" ? position.top_right :
                     locationDashboard == "Top left" ? position.top_left :
                     locationDashboard == "Middle right" ? position.middle_right :
                     locationDashboard == "Middle left" ? position.middle_left :
                     locationDashboard == "Bottom right" ? position.bottom_right : position.bottom_left
var table_size = sizeDashboard == "Tiny" ? size.tiny :
                 sizeDashboard == "Small" ? size.small : size.normal

// === دوال رسم الخلايا ===
dashboard_cell(col, row, txt) =>
    table.cell(
         table_id = dashboard_table,
         column = col,
         row = row,
         text = txt,
         text_halign = text.align_center,
         text_valign = text.align_center,
         text_color = color.white,
         text_size = table_size
     )

dashboard_bg(col, row, bgcolor) =>
    table.cell_set_bgcolor(dashboard_table, col, row, bgcolor)

// === اتجاه السعر ===
priceDirection = pos == 1 ? "صاعد" : pos == -1 ? "هابط" : "محايد"
priceDirectionColor = pos == 1 ? color.green : pos == -1 ? color.red : color.gray

// === اتجاهات الفترات الزمنية ===
getTFDirection(tf) =>
    tfPos = request.security(syminfo.tickerid, tf, pos)
    tfPos == 1 ? "صاعد" : tfPos == -1 ? "هابط" : "محايد"

TF1Direction   = getTFDirection("1")
TF5Direction   = getTFDirection("5")
TF15Direction  = getTFDirection("15")
TF60Direction  = getTFDirection("60")
TF240Direction = getTFDirection("240")
TFDirection    = getTFDirection("D")

// === الزخم ===
momentum = close > close[10] ? "صاعد" : "هابط"
momentumColor = close > close[10] ? color.green : color.red

// === RSI مُحدّث: RSI(2) + SMA(7) على الإطار الزمني الحالي ===
rsi_raw = ta.rsi(close, 2)
rsi_smooth_val = ta.sma(rsi_raw, 7)

// تعريف المتغيرات
var string rsiStatus = ""
var color rsiColor = na

// تحديث الحالة بناءً على RSI المُنعّم
if buySignal and rsi_smooth_val < 30
    rsiStatus := "انعكاس صاعد (شراء عند تشبع بيع)"
    rsiColor := color.purple
else if sellSignal and rsi_smooth_val > 70
    rsiStatus := "انعكاس هابط (بيع عند تشبع شراء)"
    rsiColor := color.red
else if buySignal and rsi_smooth_val >= 30
    rsiStatus := "شراء في زخم صاعد"
    rsiColor := color.green
else if sellSignal and rsi_smooth_val <= 70
    rsiStatus := "بيع في زخم هابط"
    rsiColor := color.rgb(241, 49, 59)
else if rsi_smooth_val > 90
    rsiStatus := "تشبع شراء عالي (" + str.tostring(rsi_smooth_val, "0.0") + ")"
    rsiColor := color.rgb(85, 22, 233)
else if rsi_smooth_val < 10
    rsiStatus := "تشبع بيع عالي (" + str.tostring(rsi_smooth_val, "0.0") + ")"
    rsiColor := color.rgb(243, 5, 5)
else
    rsiStatus := "متعادل (" + str.tostring(rsi_smooth_val, "0.0") + ")"
    rsiColor := color.gray

// === ADX ===
[_, _, adx] = ta.dmi(14, 14)
adxStatus = adx > 20 ? "قوي (" + str.tostring(adx, "0.0") + ")" : "ضعيف (" + str.tostring(adx, "0.0") + ")"
adxColor = adx > 20 ? color.green : color.orange

// === حجم التداول ===
vosc = ta.obv - ta.ema(ta.obv, 20)

// === تحديث الجدول ===
if bar_index > 50 and enableDashboard
    // الصف الأول: العناوين
    dashboard_cell(0, 0, "الاستراتيجية")
    dashboard_cell(1, 0, "الاتجاه")
    dashboard_cell(2, 0, "الزخم")
    dashboard_cell(3, 0, "RSI")
    dashboard_cell(4, 0, "حجم التداول")
    dashboard_cell(5, 0, "ADX")
    
    // الصف الثاني: القيم
    dashboard_cell(0, 1, "ALHADDADI"), dashboard_bg(0, 1, color.blue)
    dashboard_cell(1, 1, priceDirection), dashboard_bg(1, 1, priceDirectionColor)
    dashboard_cell(2, 1, momentum), dashboard_bg(2, 1, momentumColor)
    dashboard_cell(3, 1, rsiStatus), dashboard_bg(3, 1, rsiColor)
    dashboard_cell(4, 1, vosc > 0 ? "صاعد" : "هابط"), dashboard_bg(4, 1, vosc > 0 ? color.green : color.red)
    dashboard_cell(5, 1, adxStatus), dashboard_bg(5, 1, adxColor)
    
    // الصف الثالث: الفترات الزمنية
    dashboard_cell(0, 2, "1 دقيقة"), dashboard_bg(0, 2, TF1Direction == "صاعد" ? color.green : TF1Direction == "هابط" ? color.red : color.gray)
    dashboard_cell(1, 2, "5 دقائق"), dashboard_bg(1, 2, TF5Direction == "صاعد" ? color.green : TF5Direction == "هابط" ? color.red : color.gray)
    dashboard_cell(2, 2, "15 دقيقة"), dashboard_bg(2, 2, TF15Direction == "صاعد" ? color.green : TF15Direction == "هابط" ? color.red : color.gray)
    dashboard_cell(3, 2, "1 ساعة"), dashboard_bg(3, 2, TF60Direction == "صاعد" ? color.green : TF60Direction == "هابط" ? color.red : color.gray)
    dashboard_cell(4, 2, "4 ساعات"), dashboard_bg(4, 2, TF240Direction == "صاعد" ? color.green : TF240Direction == "هابط" ? color.red : color.gray)
    dashboard_cell(5, 2, "يومي"), dashboard_bg(5, 2, TFDirection == "صاعد" ? color.green : TFDirection == "هابط" ? color.red : color.gray)

// === Trend Lines ===
Showtrendlines = input.bool(true, 'Trend Lines', group = 'INDICATOR OVERLAY', inline = '3')
shortPeriod = 30
longPeriod = 100

// تعريف متغيرات خطوط الاتجاه
var line supportLine = line.new(na, na, na, na)
var line resistanceLine = line.new(na, na, na, na)

// Update trend lines on each bar
if Showtrendlines
    float lowest_y2 = 60000
    float lowest_x2 = 0
    float highest_y2 = 0
    float highest_x2 = 0

    float lowest_y1 = 60000
    float lowest_x1 = 0
    float highest_y1 = 0
    float highest_x1 = 0

    for i = 1 to shortPeriod by 1
        if low[i] < lowest_y2
            lowest_y2 := low[i]
            lowest_x2 := i
        if high[i] > highest_y2
            highest_y2 := high[i]
            highest_x2 := i

    for j = shortPeriod + 1 to longPeriod by 1
        if low[j] < lowest_y1
            lowest_y1 := low[j]
            lowest_x1 := j
        if high[j] > highest_y1
            highest_y1 := high[j]
            highest_x1 := j

    // Delete previous lines
    line.delete(supportLine[1])
    line.delete(resistanceLine[1])
    
    // Create new lines
    supportLine := line.new(bar_index[lowest_x1], lowest_y1, bar_index[lowest_x2], lowest_y2, extend=extend.right, width=2, color=color.new(#0598ff, 0))
    resistanceLine := line.new(bar_index[highest_x1], highest_y1, bar_index[highest_x2], highest_y2, extend=extend.right, width=2, color=color.new(#fe0101, 0))

// Trend Line Break Alerts
if Showtrendlines and not na(supportLine) and ta.crossunder(close, line.get_price(supportLine, bar_index))
    alert('Break down trendline', alert.freq_once_per_bar_close)
if Showtrendlines and not na(resistanceLine) and ta.crossover(close, line.get_price(resistanceLine, bar_index))
    alert('Break upper trendline', alert.freq_once_per_bar_close)

// === Support & Resistance ===
showsr = input.bool(true, 'Support & Resistance', group = 'INDICATOR OVERLAY', inline = '4')
box_extend_option = 'Both'

// Arrays for Support/Resistance
var array<int> demandRejections = array.new_int(history_of_demand_to_keep, 0)
var array<int> supplyRejections = array.new_int(history_of_demand_to_keep, 0)
var array<int> demandCreationBars = array.new_int(history_of_demand_to_keep, na)
var array<int> supplyCreationBars = array.new_int(history_of_demand_to_keep, na)

if not na(swing_high)
    f_array_add_pop(swing_high_values, swing_high)
    f_array_add_pop(swing_high_bns, bar_index[swing_length])
    f_supply_demand(swing_high_values, swing_high_bns, current_supply_box, current_supply_poi, 1, atrValue)
else if not na(swing_low)
    f_array_add_pop(swing_low_values, swing_low)
    f_array_add_pop(swing_low_bns, bar_index[swing_length])
    f_supply_demand(swing_low_values, swing_low_bns, current_demand_box, current_demand_poi, -1, atrValue)

f_sd_to_bos(current_supply_box, supply_bos, current_supply_poi, 1)
f_sd_to_bos(current_demand_box, demand_bos, current_demand_poi, -1)
f_extend_box_endpoint(current_supply_box)
f_extend_box_endpoint(current_demand_box)

// === إعدادات المدخلات ===
showSR = input.bool(true, "إظهار مستويات الدعم والمقاومة")
activeATF = input.bool(true, "استخدام الإطار الزمني الحالي")
activeD = input.bool(true, "تفعيل اليومي (D)")
active4h = input.bool(true, "تفعيل 4 ساعات (H4)")
active1h = input.bool(true, "تفعيل ساعة (H1)")
active30m = input.bool(true, "تفعيل 30 دقيقة (M30)")
active15m = input.bool(true, "تفعيل 15 دقيقة (M15)")
active5m = input.bool(true, "تفعيل 5 دقائق (M5)")

sr_left_bars = input.int(5, "عدد الشموع على اليسار", minval=1)
sr_right_bars = input.int(5, "عدد الشموع على اليمين", minval=1)
sr_line_width = input.int(1, "سماكة الخط", minval=1)
sr_label_offset = input.int(20, "إزاحة المسمى أفقيًا", minval=0)
label_spacing = input.int(7, "المسافة بين المسميات المتداخلة", minval=1)

// === دعم متعدد الأطر الزمنية ===
pivot_tf_high(tf, src, left, right) =>
    request.security(syminfo.tickerid, tf, ta.valuewhen(ta.pivothigh(src, left, right), close[right], 0))
pivot_tf_low(tf, src, left, right) =>
    request.security(syminfo.tickerid, tf, ta.valuewhen(ta.pivotlow(src, left, right), close[right], 0))

// تعريف المستويات
var float level1 = na
var float level2 = na
var float level3 = na
var float level4 = na
var float level5 = na
var float level6 = na
var float level7 = na
var float level8 = na
var float level9 = na
var float level0 = na
var float level15m = na
var float level15m1 = na
var float level5m = na
var float level5m1 = na

// إعادة التهيئة
level1 := na
level2 := na
level3 := na
level4 := na
level5 := na
level6 := na
level7 := na
level8 := na
level9 := na
level0 := na
level15m := na
level15m1 := na
level5m := na
level5m1 := na

// === جلب المستويات من الأطر الزمنية ===
if showSR and activeATF
    level1 := ta.valuewhen(ta.pivothigh(close, sr_left_bars, sr_right_bars), close[sr_right_bars], 0)
    level2 := ta.valuewhen(ta.pivotlow(close, sr_left_bars, sr_right_bars), close[sr_right_bars], 0)

if showSR and timeframe.isintraday
    if active4h
        level3 := pivot_tf_high('240', close, sr_left_bars, sr_right_bars)
        level4 := pivot_tf_low('240', close, sr_left_bars, sr_right_bars)
    if active1h
        level5 := pivot_tf_high('60', close, sr_left_bars, sr_right_bars)
        level6 := pivot_tf_low('60', close, sr_left_bars, sr_right_bars)
    if active30m
        level7 := pivot_tf_high('30', close, sr_left_bars, sr_right_bars)
        level8 := pivot_tf_low('30', close, sr_left_bars, sr_right_bars)
    if active15m
        level15m := pivot_tf_high('15', close, sr_left_bars, sr_right_bars)
        level15m1 := pivot_tf_low('15', close, sr_left_bars, sr_right_bars)
    if active5m
        level5m := pivot_tf_high('5', close, sr_left_bars, sr_right_bars)
        level5m1 := pivot_tf_low('5', close, sr_left_bars, sr_right_bars)
    if activeD
        level9 := pivot_tf_high('D', close, sr_left_bars, sr_right_bars)
        level0 := pivot_tf_low('D', close, sr_left_bars, sr_right_bars)

// === إزالة التكرارات الجزئية (لمنع رسم نفس المستوى مرتين بنفس التسمية) ===
// (يمكنك تعديل هذه الجزئية حسب الحاجة)

// === مصفوفة لتتبع المستويات المرسومة (لحساب التكرار) ===
var float[] drawn_levels = array.new_float()

// دالة لحساب كم مرة ظهر هذا السعر من قبل
get_offset_index(price) =>
    int count = 0
    for p in drawn_levels
        if math.abs(p - price) < syminfo.mintick
            count += 1
    count

// دالة لرسم الخط والمسمى مع إزاحة جانبية عند التكرار
create_line_label(lvl, lvl2, txt) =>
    x_base = bar_index + sr_label_offset

    // رسم المستوى العلوي (قمة)
    if not na(lvl)
        line.new(x1=bar_index - 1, y1=lvl, x2=bar_index, y2=lvl, extend=extend.both, width=sr_line_width, color=color.black)
        offset_count = get_offset_index(lvl)
        x_pos = x_base + offset_count * label_spacing
        label.new(
             x=x_pos,
             y=lvl,
             text=txt,
             style=label.style_label_left,
             textcolor=color.black,
             color=color(na),
             tooltip="مستوى دعم/مقاومة"
         )
        array.push(drawn_levels, lvl)

    // رسم المستوى السفلي (قاع)
    if not na(lvl2)
        line.new(x1=bar_index - 1, y1=lvl2, x2=bar_index, y2=lvl2, extend=extend.both, width=sr_line_width, color=color.black)
        offset_count = get_offset_index(lvl2)
        x_pos = x_base + offset_count * label_spacing
        label.new(
             x=x_pos,
             y=lvl2,
             text=txt,
             style=label.style_label_left,
             textcolor=color.black,
             color=color(na),
             tooltip="مستوى دعم/مقاومة"
         )
        array.push(drawn_levels, lvl2)

// === تنظيف المصفوفة في كل شمعة جديدة (اختياري) ===
// نظف فقط في الشمعة الأخيرة لتجنب التراكم
if barstate.islast
    array.clear(drawn_levels)

// === رسم المستويات فقط في الشمعة الأخيرة ===
if showSR and barstate.islast
    create_line_label(level1, level2, "ATF")
    create_line_label(level3, level4, "H4")
    create_line_label(level5, level6, "H1")
    create_line_label(level7, level8, "M30")
    create_line_label(level15m, level15m1, "M15")
    create_line_label(level5m, level5m1, "M5")
    create_line_label(level9, level0, "D")

// === Middle Band ===
Approximation(a, b) =>
    l0 = 0.0
    l1 = 0.0
    l2 = 0.0
    l3 = 0.0
    l0 := (1 - b) * a + b * nz(l0[1])
    l1 := -b * l0 + nz(l0[1]) + b * nz(l1[1])
    l2 := -b * l1 + nz(l1[1]) + b * nz(l2[1])
    l3 := -b * l2 + nz(l2[1]) + b * nz(l3[1])
    (l0 + 2 * l1 + 2 * l2 + l3) / 6

Conjecture1 = Approximation(open, 0.1)
Conjecture2 = Approximation(open, 0.15)
Conjecture3 = Approximation(open, 0.2)
Conjecture4 = Approximation(open, 0.25)
Conjecture5 = Approximation(open, 0.3)
Conjecture6 = Approximation(open, 0.35)
Conjecture7 = Approximation(open, 0.4)
Conjecture8 = Approximation(open, 0.45)
Conjecture9 = Approximation(open, 0.5)
Conjecture10 = Approximation(open, 0.55)
Conjecture11 = Approximation(open, 0.6)
Conjecture12 = Approximation(open, 0.65)
Conjecture13 = Approximation(open, 0.7)
Conjecture14 = Approximation(open, 0.75)
Conjecture15 = Approximation(open, 0.8)
Conjecture16 = Approximation(open, 0.85)
Conjecture17 = Approximation(open, 0.9)
Conjecture18 = Approximation(open, 0.95)

amlag = (Conjecture1 + Conjecture2 + Conjecture3 + Conjecture4 + Conjecture5 + Conjecture6 + Conjecture7 + Conjecture8 + Conjecture9 + Conjecture10 + Conjecture11 + Conjecture12 + Conjecture13 + Conjecture14 + Conjecture15 + Conjecture16 + Conjecture17 + Conjecture18) / 18
plot(amlag, color=color.new(#FFA500, 0), linewidth=2, title="Middle Band")

// === إعدادات المؤشر ===
atrPeriod2 = input.int(3, "فترة ATR", minval=1, group="لوحة السيولة")
emaPeriod2 = input.int(9, "فترة المتوسط المتحرك", minval=1, maxval=50, group="لوحة السيولة")
minVolumeFactor2 = input.float(1.2, "الحد الأدنى لعامل الحجم", minval=1, step=0.1, group="لوحة السيولة")

// === حساب السيولة ===
haClose2 = (open + high + low + close) / 4
var float haOpen2 = na
haOpen2 := na(haOpen2[1]) ? (open + close) / 2 : (haOpen2[1] + haClose2[1]) / 2
liquidity = (haClose2 - haOpen2) / haOpen2 * 100

// === حساب المتوسط المتحرك ===
ema2 = ta.ema(close, emaPeriod2)

// === حساب الحجم ===
avgVolume = ta.sma(volume, 20)
volumeConfirmed = volume > avgVolume * minVolumeFactor2

// === حساب ATR ===
atr2 = ta.atr(atrPeriod2)

// === اتجاه الترند ===
trendDir2 = close > ema2 ? 1 : -1

// === لوحة المعلومات الثانية ===
var table liquidityTable = table.new(position.bottom_right, 3, 5, border_width=1)
if barstate.islast
    // الصف 1: حالة الترند
    table.cell(liquidityTable, 0, 0, "حالة الترند", bgcolor=color.gray)
    table.cell(liquidityTable, 1, 0, trendDir2 == 1 ? "صاعد" : "هابط", 
              bgcolor=trendDir2 == 1 ? color.new(color.green, 70) : color.new(color.red, 70))
    
    // الصف 2: السيولة (هايكين أشي)
    table.cell(liquidityTable, 0, 1, "السيولة HA", bgcolor=color.gray)
    table.cell(liquidityTable, 1, 1, haClose2 > haOpen2 ? "شراء" : "بيع", 
              bgcolor=haClose2 > haOpen2 ? color.new(color.green, 70) : color.new(color.red, 70))
    
    // الصف 3: قوة السيولة
    table.cell(liquidityTable, 0, 2, "قوة السيولة", bgcolor=color.gray)
    table.cell(liquidityTable, 1, 2, str.tostring(math.round(liquidity, 2)) + "%", 
              bgcolor=color.new(liquidity > 0 ? color.green : color.red, 70))
    
    // الصف 4: حجم التداول
    table.cell(liquidityTable, 0, 3, "حجم التداول", bgcolor=color.gray)
    table.cell(liquidityTable, 1, 3, str.tostring(volume, format.volume) + 
                              (volumeConfirmed ? " ✅" : " ❌"), 
              bgcolor=volumeConfirmed ? color.new(color.green, 70) : color.new(color.red, 70))
    
    // الصف 5: تقلب السوق (ATR)
    table.cell(liquidityTable, 0, 4, "تقلب السوق", bgcolor=color.gray)
    table.cell(liquidityTable, 1, 4, str.tostring(atr2, format.volume), 
              bgcolor=color.new(color.purple, 70))

// ==========================================================================================

// === Dashboard with Telegram Link ===
var table myTable = table.new(position.top_center, 1, 1, border_width=1, frame_color=color.black, bgcolor=color.white)

// Add Telegram Message to Dashboard
table.cell(myTable, 0, 0, "Join Telegram @simpleforextools", bgcolor=color.blue, text_color=color.white, text_size=size.normal)