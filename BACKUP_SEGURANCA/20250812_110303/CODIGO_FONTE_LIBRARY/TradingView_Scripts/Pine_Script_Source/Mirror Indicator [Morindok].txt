//@version=5
//morindok
//Join us in Telegram Channel: @BITMOON618

indicator("Mirror Indicator", overlay=false)

// Input price series
price = close

// Input for different time frames
time_frame = input.timeframe("15", title="Time Frame")

// Normalize function
normalize(value, min, max) =>
    100 * (value - min) / (max - min)

// Request price series for the specified time frame
price_tf = request.security(syminfo.tickerid, time_frame, close)

// Find minimum and maximum values of price within the last 100 bars on the specified time frame
min_price = request.security(syminfo.tickerid, time_frame, ta.lowest(price_tf, 100))
max_price = request.security(syminfo.tickerid, time_frame, ta.highest(price_tf, 100))

// Normalize price and its inverse to range 0 to 100
normalized_price = normalize(price_tf, min_price, max_price)
normalized_inverse_price = 100 - normalized_price

// Define vertical offsets for plots
offset_price = input(10, title="Offset for Normalized Price")
offset_inverse_price = input(-90, title="Offset for Normalized Inverse Price")

// Define horizontal offsets for plots
horizontal_offset_price = input(0, title="Horizontal Offset for Normalized Price")
horizontal_offset_inverse_price = input(0, title="Horizontal Offset for Normalized Inverse Price")

// Plot normalized price and its inverse with offsets
plot1 = plot(normalized_price[horizontal_offset_price] + offset_price, title="Normalized Price", color=color.blue)
plot2 = plot(normalized_inverse_price[horizontal_offset_inverse_price] + offset_inverse_price, title="Normalized Inverse Price", color=color.red)

// Request price series for the specified time frame for second calculation
price_tf2 = request.security(syminfo.tickerid, time_frame, close)

// Find minimum and maximum values of price within the last 100 bars on the specified time frame
min_price2 = request.security(syminfo.tickerid, time_frame, ta.lowest(price_tf2, 100))
max_price2 = request.security(syminfo.tickerid, time_frame, ta.highest(price_tf2, 100))

// Normalize price and its inverse to range 0 to 100
normalized_price2 = normalize(price_tf2, min_price2, max_price2)
normalized_inverse_price2 = 100 - normalized_price2

// Define vertical offsets for plots
offset_price2 = input(10, title="Offset for Normalized Price2")
offset_inverse_price2 = input(110, title="Offset for Normalized Inverse Price2")

// Define horizontal offsets for plots
horizontal_offset_price2 = input(0, title="Horizontal Offset for Normalized Price2")
horizontal_offset_inverse_price2 = input(0, title="Horizontal Offset for Normalized Inverse Price2")

// Plot normalized price and its inverse with offsets
plot12 = plot(normalized_price2[horizontal_offset_price2] + offset_price2, title="Normalized Price2", color=color.blue)
plot22 = plot(normalized_inverse_price2[horizontal_offset_inverse_price2] + offset_inverse_price2, title="Normalized Inverse Price2", color=color.red)

// Add input for the length of the combined moving average
length_combined_ma = input(20, title="Combined Moving Average Length")

// Calculate moving averages for normalized inverse prices
ma_normalized_inverse_price = ta.sma(normalized_inverse_price, length_combined_ma)
ma_normalized_inverse_price2 = ta.sma(normalized_inverse_price2, length_combined_ma)

// Calculate the average of the two moving averages
average_ma = (ma_normalized_inverse_price + ma_normalized_inverse_price2) / 2

// Plot the average moving average with a green color
plot(average_ma, title="Average MA of Normalized Inverse Prices", color=color.green)
