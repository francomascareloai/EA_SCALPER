// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/

//@version=6
indicator('NTS (NewStrategy) with 4 MAs and Toggle Options', overlay=true)

//---------------------- Moving Averages --------------------------
enable_ma1 = input.bool(true, title="Enable MA 1")
ma1_type = input.string("SMA", title="MA 1 Type", options=["SMA", "EMA", "WMA", "VWMA"])
ma1_length = input.int(14, title="MA 1 Length", minval=1)
ma1_source = input.source(close, title="MA 1 Source")

enable_ma2 = input.bool(true, title="Enable MA 2")
ma2_type = input.string("EMA", title="MA 2 Type", options=["SMA", "EMA", "WMA", "VWMA"])
ma2_length = input.int(28, title="MA 2 Length", minval=1)
ma2_source = input.source(close, title="MA 2 Source")

enable_ma3 = input.bool(true, title="Enable MA 3")
ma3_type = input.string("WMA", title="MA 3 Type", options=["SMA", "EMA", "WMA", "VWMA"])
ma3_length = input.int(50, title="MA 3 Length", minval=1)
ma3_source = input.source(close, title="MA 3 Source")

enable_ma4 = input.bool(true, title="Enable MA 4")
ma4_type = input.string("VWMA", title="MA 4 Type", options=["SMA", "EMA", "WMA", "VWMA"])
ma4_length = input.int(100, title="MA 4 Length", minval=1)
ma4_source = input.source(close, title="MA 4 Source")

// تابع برای محاسبه موینگ اورج بر اساس نوع
f_ma(type, src, len) =>
    switch type
        "SMA" => ta.sma(src, len)
        "EMA" => ta.ema(src, len)
        "WMA" => ta.wma(src, len)
        "VWMA" => ta.vwma(src, len)
        => na

// محاسبه موینگ اورج‌ها
ma1 = enable_ma1 ? f_ma(ma1_type, ma1_source, ma1_length) : na
ma2 = enable_ma2 ? f_ma(ma2_type, ma2_source, ma2_length) : na
ma3 = enable_ma3 ? f_ma(ma3_type, ma3_source, ma3_length) : na
ma4 = enable_ma4 ? f_ma(ma4_type, ma4_source, ma4_length) : na

// رسم موینگ اورج‌ها روی چارت
plot(ma1, color=color.red, title="MA 1", linewidth=2)
plot(ma2, color=color.blue, title="MA 2", linewidth=2)
plot(ma3, color=color.green, title="MA 3", linewidth=2)
plot(ma4, color=color.orange, title="MA 4", linewidth=2)
//-----------------------------------------------------------------

//---------------------- ATR and Trailing Stop --------------------
enable_atr = input.bool(true, title="Enable ATR and Trailing Stop")

var timeF = timeframe.period
getResolution(tf) =>
    switch tf    
        "1" => "3"
        "3" => "5"
        "5" => "15"
        "15"=> "30"
        "30"=> "45"
        "45"=> "60"
        "60"=> "120"
        "120"=> "180"
        "180"=> "240"
        "240"=> "D"
        "D"=> "W"
        "W"=> "M"

var atrP = 10
var atrF = 5

res = getResolution(timeF)

trailType = input.string("modified", "Trailtype", options=["modified", "unmodified"])

var int ATRPer = 0
var int ATRFac = 0

if timeF == "45"
    ATRPer := 12
    ATRFac := 12
else if timeF == "15"
    ATRPer := 10
    ATRFac := 4
else
    ATRPer := 10
    ATRFac := 5

manualFts = input.bool(false, title="use manual FTS")
ATRPeriod = manualFts ? input.int(15, title="ATRPeriod") : ATRPer
ATRFactor = manualFts ? input.int(15, title="ATRFactor") : ATRFac

var testTable = table.new(position.bottom_left, 2, 4, bgcolor=color.new(color.gray, 50), border_width=2, border_color=color.black)

if barstate.islast
    table.cell(testTable, 0, 0, "Chart Time", text_color=color.red, text_size=size.small)
    table.cell(testTable, 1, 0, timeF, text_color=color.green, text_size=size.small)

    table.cell(testTable, 0, 1, "NTS Time", text_color=color.red, text_size=size.small)
    table.cell(testTable, 1, 1, res, text_color=color.green, text_size=size.small)
    
    table.cell(testTable, 0, 2, "ATRPeriod", text_color=color.red, text_size=size.small)
    table.cell(testTable, 1, 2, str.tostring(ATRPeriod), text_color=color.green, text_size=size.small)

    table.cell(testTable, 0, 3, "ATRFactor", text_color=color.red, text_size=size.small)
    table.cell(testTable, 1, 3, str.tostring(ATRFactor), text_color=color.green, text_size=size.small)

norm_o = request.security(syminfo.tickerid, res, open)
norm_h = request.security(syminfo.tickerid, res, high)
norm_l = request.security(syminfo.tickerid, res, low)
norm_c = request.security(syminfo.tickerid, res, close)

Wild_ma(_src, _malength) =>
    var float _wild = na
    _wild := na(_wild) ? _src : _wild + (_src - _wild) / _malength
    _wild

/////////// TRUE RANGE CALCULATIONS /////////////////
HiLo = math.min(norm_h - norm_l, 1.5 * nz(ta.sma(norm_h - norm_l, ATRPeriod)))

HRef = norm_l <= norm_h[1] ? norm_h - norm_c[1] : norm_h - norm_c[1] - 0.5 * (norm_l - norm_h[1])

LRef = norm_h >= norm_l[1] ? norm_c[1] - norm_l : norm_c[1] - norm_l - 0.5 * (norm_l[1] - norm_h)

trueRange = trailType == "modified" ? math.max(HiLo, HRef, LRef) : math.max(norm_h - norm_l, math.abs(norm_h - norm_c[1]), math.abs(norm_l - norm_c[1]))

loss = ATRFactor * Wild_ma(trueRange, ATRPeriod)

Up = norm_c - loss
Dn = norm_c + loss

TrendUp = Up
TrendDown = Dn
Trend = 1

TrendUp := norm_c[1] > TrendUp[1] ? math.max(Up, TrendUp[1]) : Up
TrendDown := norm_c[1] < TrendDown[1] ? math.min(Dn, TrendDown[1]) : Dn

Trend := norm_c > TrendDown[1] ? 1 : norm_c < TrendUp[1] ? -1 : nz(Trend[1], 1)
trail = Trend == 1 ? TrendUp : TrendDown

ex = 0.0
ex := ta.crossover(Trend, 0) ? norm_h : ta.crossunder(Trend, 0) ? norm_l : Trend == 1 ? math.max(ex[1], norm_h) : Trend == -1 ? math.min(ex[1], norm_l) : ex[1]

state = Trend == 1 ? "long" : "short"

fib1Level = 61.8
fib2Level = 78.6
fib3Level = 88.6

f1 = ex + (trail - ex) * fib1Level / 100
f2 = ex + (trail - ex) * fib2Level / 100
f3 = ex + (trail - ex) * fib3Level / 100
l100 = trail + 0

Fib1 = plot(enable_atr ? f1 : na, "Fib 1", color=color.new(color.gray, 0), linewidth=1)
Fib2 = plot(enable_atr ? f2 : na, "Fib 2", color=color.new(color.gray, 0), linewidth=1)
Fib3 = plot(enable_atr ? f3 : na, "Fib 3", color=color.new(color.lime, 0), linewidth=1)
L100 = plot(enable_atr ? l100 : na, "l100", color=color.rgb(120, 123, 134), linewidth=1)

fill(Fib3, L100, color=enable_atr ? (state == "long" ? color.new(#00eaff, 12) : state == "short" ? #ff5280e9 : na) : na)

changcDir = ta.cross(f3, l100)
alertcondition(changcDir, title="Alert: FTS Direction Change", message="FTS has changed direction!")

l1 = state[1] == "long" and ta.crossunder(norm_c, f1[1])
l2 = state[1] == "long" and ta.crossunder(norm_c, f2[1])
l3 = state[1] == "long" and ta.crossunder(norm_c, f3[1])
s1 = state[1] == "short" and ta.crossover(norm_c, f1[1])
s2 = state[1] == "short" and ta.crossover(norm_c, f2[1])
s3 = state[1] == "short" and ta.crossover(norm_c, f3[1])

atr = ta.sma(trueRange, 14)

//////////// FIB ALERTS /////////////////////

alertcondition(l1, title="cross over Fib1", message="Price crossed below Fib1 level in long trend")
alertcondition(l2, title="cross over Fib2", message="Price crossed below Fib2 level in long trend")
alertcondition(l3, title="cross over Fib3", message="Price crossed below Fib3 level in long trend")
alertcondition(s1, title="cross under Fib1", message="Price crossed above Fib1 level in short trend")
alertcondition(s2, title="cross under Fib2", message="Price crossed above Fib2 level in short trend")
alertcondition(s3, title="cross under Fib3", message="Price crossed above Fib3 level in short trend")

alertcondition(na(f1) != na(f1[1]), title="Stop Line Change", message="Stop Line Change")

// ==========================================================================================
