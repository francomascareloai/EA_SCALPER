// =====================================================||
//                
//          Valid Upto :  11-APR-2024                   ||
//                         
//          whatsApp : - +918848943849                  ||
//           
// =====================================================||


//@version=5
indicator("nicholasnelo", overlay = true)
import  cupo457/NICHOLAS/9 as nn


tgrp = "âš¡âš¡âš¡âš¡âš¡ ðŸ‡¹â€ŒðŸ‡·â€ŒðŸ‡¦â€ŒðŸ‡©â€ŒðŸ‡ªâ€Œ ðŸ‡¸â€ŒðŸ‡ªâ€ŒðŸ‡¹â€ŒðŸ‡ºâ€ŒðŸ‡µâ€Œ âš¡âš¡âš¡âš¡âš¡"
sigb = input.bool(true, title = "",inline = "1",group = tgrp)
bfr = input.float(0.02,title = "Entry Buffer",inline = "1",group = tgrp)
tm = input.session("Last Trade", title = "", options = ["Last Trade","All Trade"],inline = "1",group = tgrp)
eb = input.bool(true,title = "Entry",inline = "2",group = tgrp)
tb1 = input.bool(true,title = "Target 1",inline = "2",group = tgrp)
tb2 = input.bool(true,title = "Target 2",inline = "2",group = tgrp)
tb3 = input.bool(true,title = "Target 3",inline = "2",group = tgrp)
slb = input.bool(true,title = "Stop Loss",inline = "2",group = tgrp)

[pos,e,sl,t1,t2,t3,sig] = nn.signal(eb, tb1, tb2, tb3, slb, bfr, color.lime, color.red,color.rgb(105, 59, 255))

plot(tm == "All Trade" and sigb and eb and pos != 0 ? e : na, title = "Entry", color=color.rgb(108, 59, 255), style = plot.style_linebr)
plot(tm == "All Trade" and sigb and tb1 and pos != 0 ? t1 : na, title = "TG 1",color=color.lime, style = plot.style_linebr)
plot(tm == "All Trade" and sigb and tb2 and pos != 0 ? t2 : na, title = "TG 2",color=color.lime, style = plot.style_linebr)
plot(tm == "All Trade" and sigb and tb3 and pos != 0 ? t3 : na, title = "TG 3",color=color.lime, style = plot.style_linebr)
plot(tm == "All Trade" and sigb and slb and pos != 0 ? sl : na, title = "SL",color=color.red, style = plot.style_linebr)


plotshape(sigb and pos == 1 and nz(pos[1]) != 1, title = "BUY", style = shape.triangleup, location = location.belowbar, size = size.normal, color = color.lime)
plotshape(sigb and pos == -1 and nz(pos[1]) != -1, title = "SELL", style = shape.triangledown, location = location.abovebar, size = size.normal, color = color.red)


// ======================================================================
//                      Multi Timeframe 
// ======================================================================

mtf_t = input.bool(true,title="Multi Timeframe ON/OFF",inline="3", group = tgrp)

tf_1 = input.timeframe('3', title = "", inline = "4", group = tgrp)
tf_2 = input.timeframe('5', title = "", inline = "4", group = tgrp)
tf_3 = input.timeframe('15', title = "", inline = "4", group = tgrp)
tf_4 = input.timeframe('30', title = "", inline = "4", group = tgrp)
tf_5 = input.timeframe('45', title = "", inline = "4", group = tgrp)
tf_6 = input.timeframe('60', title = "", inline = "4", group = tgrp)
tf_7 = input.timeframe('120', title = "", inline = "4", group = tgrp)
tf_8 = input.timeframe('180', title = "", inline = "4", group = tgrp)
tf_9 = input.timeframe('240', title = "", inline = "4", group = tgrp)
tf_10 = input.timeframe('D', title = "", inline = "4", group = tgrp)
tf_11 = input.timeframe('W', title = "", inline = "4", group = tgrp)
tf_12 = input.timeframe('M', title = "", inline = "4", group = tgrp)



_mtf_p = position.middle_right
_mtf_s = size.small
var mtf_Table = table.new(_mtf_p, 2, 20, border_color = color.white, border_width = 1)

plotrow(n, tf) =>
    [b,s] = request.security(syminfo.tickerid, tf, nn.signal())
    if mtf_t
        table.cell(table_id = mtf_Table, column = 0, row = n, text = str.tostring(tf), text_color = color.white, text_size = _mtf_s, bgcolor = b ? color.lime : s ? color.red : color.gray)
    
plotrow(1, tf_1),plotrow(2, tf_2),plotrow(3, tf_3),plotrow(4, tf_4),plotrow(5, tf_5),plotrow(6, tf_6)
plotrow(7, tf_7),plotrow(8, tf_8),plotrow(9, tf_9),plotrow(10, tf_10),plotrow(11, tf_11),plotrow(12, tf_12)



// ======================================================================
//                               VWAP + MA
// ======================================================================

gr1 = "âš¡âš¡âš¡âš¡âš¡ ðŸ‡»â€ŒðŸ‡¼â€ŒðŸ‡¦â€ŒðŸ‡µâ€Œ + ðŸ‡²â€ŒðŸ‡¦â€Œ + ðŸ‡§â€ŒðŸ‡§â€Œ âš¡âš¡âš¡âš¡âš¡"
vwapb = input.bool(true,"",inline="1",group=gr1)
src = input.source(hlc3,title="",inline="1",group=gr1)
vb1 = input.bool(true,"",inline="1",group=gr1)
dvc = input.color(color.white,title="D",inline="1",group=gr1)
vb2 = input.bool(false,"",inline="1",group=gr1)
wvc = input.color(color.red,title="W",inline="1",group=gr1)
vb3 = input.bool(false,"",inline="1",group=gr1)
mvc = input.color(color.blue,title="M",inline="1",group=gr1)

// ======================================================================

mab1 = input.bool(false,"",inline="11",group=gr1)
mat1 = input.string(title = "", defval = "SMA", options=["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"],inline="11", group=gr1)
mas1 = input.source(close,title="",inline="11",group=gr1)
mal1 = input.int(21,title="",inline="11",group=gr1)
matf1 = input.timeframe("", title = "",inline="11",group=gr1)

mab2 = input.bool(false,"",inline="2",group=gr1)
mat2 = input.string(title = "", defval = "SMA", options=["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"],inline="2", group=gr1)
mas2 = input.source(close,title="",inline="2",group=gr1)
mal2 = input.int(50,title="",inline="2",group=gr1)
matf2 = input.timeframe("", title = "",inline="2",group=gr1)

mab3 = input.bool(false,"",inline="3",group=gr1)
mat3 = input.string(title = "", defval = "SMA", options=["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"],inline="3", group=gr1)
mas3 = input.source(close,title="",inline="3",group=gr1)
mal3 = input.int(200,title="",inline="3",group=gr1)
matf3 = input.timeframe("", title = "",inline="3",group=gr1)

mab4 = input.bool(false,"",inline="4",group=gr1)
bbl = input.int(20, title = "BB", minval=1, inline="4", group=gr1)
bbs = input(close, title="",inline="4",group=gr1)
bbm = input.float(2.0, minval=0.001, maxval=50, title="",inline="4",group=gr1)
bbc1 = input.color(#12d8d5, title = "",inline="4",group=gr1)
bbc2 = input.color(#e508c4, title = "",inline="4",group=gr1)


// ======================================================================



[v1,v2,v3] = nn.vwapc(src,"D","W","M")

plot(not timeframe.isdwm and vwapb and vb1 ? v1 : na, title = "Daily VWAP", color=dvc, editable = false)
plot(vwapb and vb2 ? v2 : na, title = "Weekly VWAP", color=wvc, editable = false)
plot(vwapb and vb3 ? v3 : na, title = "Monthly VWAP", color=mvc, editable = false)

ma1 = request.security(syminfo.tickerid, matf1, nn.ma(mas1,mal1,mat1), gaps = barmerge.gaps_on, lookahead = barmerge.lookahead_off)
ma2 = request.security(syminfo.tickerid, matf2, nn.ma(mas2,mal2,mat2), gaps = barmerge.gaps_on, lookahead = barmerge.lookahead_off)
ma3 = request.security(syminfo.tickerid, matf3, nn.ma(mas3,mal3,mat3), gaps = barmerge.gaps_on, lookahead = barmerge.lookahead_off)

plot(mab1 ? ma1 : na, title = "MA 1", color=color.lime)
plot(mab2 ? ma2 : na, title = "MA 2", color=color.red)
plot(mab3 ? ma3 : na, title = "MA 3", color=#3a0fc7)


[mb, ub, lb, col] = nn.bol(bbs, bbl, bbm, bbc1, bbc2)

plot(mab4 ? mb : na, color = col, title = "Middle")
plot(mab4 ? ub : na, color = col, title = "Upper")
plot(mab4 ? lb : na, color = col, title = "Lower")

//trend reversal

Rsi_value=input.int(14,title="RSI Length",step=1)
hl=input.int(80,title="Higher Value of RSI",step=1)
ll=input.int(20,title="Lower value of RSI",step=1)
rs=ta.rsi(close,Rsi_value)


hlrev_s=ta.crossunder(rs,hl)
llrev_b=ta.crossover(rs,ll) and open<close



plotshape(hlrev_s,title="Reversal1",style=shape.labeldown,color=color.yellow,text="!",textcolor=color.black,transp=20)
plotshape(llrev_b,title="Reversal2",style=shape.labelup,color=color.yellow,text="!",textcolor=color.black,transp=20,location=location.belowbar)


//shavedbars

pctS = input.int(8, minval=1, maxval=99, title="Percentage Input For Shaved Bars, Percent of Range it Has To Close On The Lows or Highs")

ssb = input(true, title="Show Shaved Bars?")
sib = input(false, title="Show Inside Bars?")
sgb = input(false, title="Check Box To Turn Bars Gray?")



//Shaved Bars Percentages
pctCs = pctS * .01
pctSPO = pctCs

range1 = high - low



//Shaved Bars
sBarUp() => ssb and (close >= (high - (range1 * pctCs)))
sBarDown() => ssb and close <= (low + (range1 * pctCs))

//Inside Bars
insideBar() => sib and high <= high[1] and low >= low[1] ? 1 : 0


//Shaved Bars
barcolor(sBarDown() ? color.fuchsia : na)
barcolor(sBarUp() ? color.rgb(128, 250, 57) : na)
//Inside and gray Bars
barcolor(insideBar() ? color.yellow : na )
barcolor(sgb and close ? color.gray : na)

//rsi adx table
//rsi
mrsi = ta.rsi(close,14)
colorRsi = mrsi>60?color.lime: mrsi<40?color.red:color.gray

//ADX
len = input.int(14, minval=1, title="DI Length")
lensig = input.int(14, title="ADX Smoothing", minval=1, maxval=50)
[diplus, diminus, adx] = ta.dmi(len, lensig)
colorADX = adx>25?color.lime:color.gray
colordiplus = diplus>25?color.lime:color.gray
colordiminus = diminus>25?color.red:color.gray


//creating the table
var testTable = table.new(position = position.top_right, columns = 4, rows = 2, border_width = 1, border_color = color.black, frame_width = 1, frame_color = color.black)

//column Headings
table.cell(table_id = testTable, column = 0, row = 0, text = " RSI ", bgcolor=color.aqua, text_color = color.black)
table.cell(table_id = testTable, column = 1, row = 0, text = " DI+ ", bgcolor=color.lime, text_color = color.black)
table.cell(table_id = testTable, column = 2, row = 0, text = " DI- ", bgcolor=color.red, text_color = color.black)
table.cell(table_id = testTable, column = 3, row = 0, text = " ADX ", bgcolor=color.aqua, text_color = color.black)

//column values
table.cell(table_id = testTable, column = 0, row = 1, text = str.tostring(math.round(mrsi,0)) ,  bgcolor= colorRsi, text_color = color.white)
table.cell(table_id = testTable, column = 1, row = 1, text = str.tostring(math.round(diplus,0)) ,  bgcolor= colordiplus, text_color = color.white)// "RSI")//, bgcolor=color.red)
table.cell(table_id = testTable, column = 2, row = 1, text = str.tostring(math.round(diminus,0)) ,  bgcolor= colordiminus, text_color = color.white)// "DI+")//, bgcolor=color.red)
table.cell(table_id = testTable, column = 3, row = 1, text = str.tostring(math.round(adx,0)) ,  bgcolor= colorADX, text_color = color.white)//"DI-")//, bgcolor=color.red)







