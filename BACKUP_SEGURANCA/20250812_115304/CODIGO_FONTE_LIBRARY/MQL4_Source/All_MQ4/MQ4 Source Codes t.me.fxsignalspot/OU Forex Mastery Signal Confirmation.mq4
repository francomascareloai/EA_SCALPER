/*
   Generated by EX4-TO-MQ4 decompiler V4.0.224.1 []
   Website: http://purebeam.biz
   E-mail : purebeam@gmail.com
*/
#property copyright "Copyright ?2009, FlyRight Software Corp."
#property link      "http://www.flyrightsoftware.com"

#property indicator_chart_window
#property indicator_buffers 3
#property indicator_color1 Lime
#property indicator_color2 Red
#property indicator_color3 Black
#include "..\include\OU_Forex.mqh"
/*
#import "OU_Loader.dll"
   bool OU_called();
   bool LoadConsole();
   bool RunAllowed();
   bool VersionAllowed(string a0, string a1);
   bool PairAllowed(string a0, string a1);
   bool FeatureAllowed(string a0, string a1);
   int GetUserLevel(string a0);
   int GetBKNumbers(string a0, int& a1[], double& a2[]);
#import
*/
string gs_76;
bool gi_unused_84 = FALSE;
string gs_88 = "2.00MT";
string gs_unused_96 = "2.00FT";
string gs_104 = "";
bool gi_unused_112 = FALSE;
string gsa_116[] = {"EURUSD", "GBPUSD", "USDCHF", "USDJPY", "USDCAD", "AUDUSD", "NZDUSD", "EURJPY", "EURGBP", "AUDJPY", "GBPJPY", "EURAUD", "EURCAD", "CHFJPY", "AUDCAD", "GBPCHF", "EURCHF", "NZDJPY", "CADJPY", "AUDNZD", "GBPAUD", "GBPCAD"};
int gi_120 = -1;
string gs_124 = "";
int gi_132 = 15;
int g_ma_method_136 = MODE_LWMA;
int g_applied_price_140 = PRICE_CLOSE;
double g_ibuf_144[];
double g_ibuf_148[];
double g_ibuf_152[];
extern bool showBiasandKey = TRUE;
extern int ArrowSize = 2;
string gs_172 = "3 - Signal Confirmation";
bool gi_180 = FALSE;
string gs_184;
double g_istochastic_192;
double g_istochastic_208;
double gd_216;
bool gi_224 = FALSE;
int gia_228[1000];
double gda_232[1000];
int gi_236 = 0;

bool OU_loader_call() {
   string ls_unused_0;
   if (!OU_called()) LoadConsole();
   return (OU_called());
}

int DrawAllowed(string &as_0, string as_8) {
   as_8 = BaseSymbol(as_8);
   if (!OU_loader_call()) {
      as_0 = "failure loading console.";
      return (0);
   }
   if (!RunAllowed()) {
      as_0 = "waiting for console.";
      return (0);
   }
   if (!VersionAllowed(gs_76, gs_104)) {
      as_0 = "version " + gs_104 + " outdated." + VersionAllowed(gs_76, gs_104) + 0 + 1;
      return (0);
   }
   if (as_8 == "Scanner.") return (1);
   if (!PairAllowed(gs_76, as_8)) {
      if (validpair(gs_76, as_8)) as_0 = "unsubscribed pair.";
      else as_0 = "unsupported pair.";
      return (0);
   }
   return (1);
}

string bkfullname(int ai_0) {
   if (ai_0 == 1) return ("Bias");
   return ("Key");
}

int superuser() {
   return (GetUserLevel(gs_76) == 3 || GetUserLevel(gs_76) == 5);
}

bool SlingShotsAllowed() {
   return (FeatureAllowed(gs_76, "SS") || LTCAllowed() || superuser());
}

int LTCAllowed() {
   return (FeatureAllowed(gs_76, "LTC") || superuser());
}

bool validpair(string as_0, string as_8) {
   string ls_16 = pairtype(as_8);
   if (ls_16 == "4" || ls_16 == "10") return (TRUE);
   if (as_0 == "OUFT" && ls_16 == "17" || ls_16 == "22") return (TRUE);
   return (FALSE);
}

string pairtype(string as_0) {
   string ls_8 = "USDIX,EURUSD,GBPUSD,USDCHF,USDJPY";
   string ls_16 = "EURUSD,GBPUSD,USDCHF,USDJPY,USDCAD,AUDUSD,NZDUSD,EURJPY,EURGBP,AUDJPY";
   string ls_24 = "EURUSD,GBPUSD,USDCHF,USDJPY,USDCAD,AUDUSD,NZDUSD,EURJPY,EURGBP,AUDJPY,GBPJPY,EURAUD,EURCAD,CHFJPY,AUDCAD,GBPCHF,EURCHF";
   string ls_32 = "EURUSD,GBPUSD,USDCHF,USDJPY,USDCAD,AUDUSD,NZDUSD,EURJPY,EURGBP,AUDJPY,GBPJPY,EURAUD,EURCAD,CHFJPY,AUDCAD,GBPCHF,EURCHF,NZDJPY,CADJPY,AUDNZD,GBPAUD,GBPCAD";
   as_0 = StringSubstr(as_0, 0, 6);
   if (StringFind(ls_8, as_0) > -1) as_0 = "4";
   else {
      if (StringFind(ls_16, as_0) > -1) as_0 = "10";
      else {
         if (StringFind(ls_24, as_0) > -1) as_0 = "17";
         else {
            if (StringFind(ls_32, as_0) > -1) as_0 = "22";
            else as_0 = "1000";
         }
      }
   }
   return (as_0);
}

string BaseSymbol(string as_0) {
   if (gi_120 == -1) SetSymbolSuffixLength();
   if (as_0 == "Scanner.") return (as_0);
   if (gi_120 == 0 || StringSubstr(as_0, StringLen(as_0) - gi_120) != gs_124) return (as_0);
   return (StringSubstr(as_0, 0, StringLen(as_0) - gi_120));
}

void SetSymbolSuffixLength() {
   string lsa_0[1000];
   SymbolsList(lsa_0, 0);
   for (int l_index_4 = 0; StringSubstr(lsa_0[l_index_4], 0, 6) != "EURUSD" && l_index_4 < 1000; l_index_4++) {
   }
   gi_120 = StringLen(lsa_0[l_index_4]) - 6;
   gs_124 = StringSubstr(lsa_0[l_index_4], 6);
}

int SymbolsList(string &asa_0[1000], bool ai_4) {
   string l_name_8;
   int li_16;
   int li_ret_20;
   if (ai_4) l_name_8 = "symbols.sel";
   else l_name_8 = "symbols.raw";
   int l_file_24 = FileOpenHistory(l_name_8, FILE_BIN|FILE_READ);
   if (l_file_24 < 0) {
      Print("Symbol open failure.");
      return (-1);
   }
   if (ai_4) {
      li_ret_20 = (FileSize(l_file_24) - 4) / 128;
      li_16 = 116;
   } else {
      li_ret_20 = FileSize(l_file_24) / 1936;
      li_16 = 1924;
   }
   ArrayResize(asa_0, li_ret_20);
   if (ai_4) FileSeek(l_file_24, 4, SEEK_SET);
   for (int l_index_28 = 0; l_index_28 < li_ret_20; l_index_28++) {
      asa_0[l_index_28] = FileReadString(l_file_24, 12);
      FileSeek(l_file_24, li_16, SEEK_CUR);
   }
   FileClose(l_file_24);
   return (li_ret_20);
}

int init() {
   if (!IsDllsAllowed()) Alert("Enable Dlls under Tools/OPtions for OU_Forex_pricelines.");
   gs_76 = "OUFM";
   gs_104 = gs_88;
   OU_loader_call();
   if (ArrowSize < 1) ArrowSize = 1;
   else
      if (ArrowSize > 5) ArrowSize = 5;
   IndicatorBuffers(5);
   SetIndexBuffer(0, g_ibuf_144);
   SetIndexBuffer(1, g_ibuf_148);
   SetIndexBuffer(2, g_ibuf_152);
   ArraySetAsSeries(g_ibuf_152, TRUE);
   SetIndexStyle(2, DRAW_NONE, EMPTY);
   gs_184 = gs_172;
   IndicatorShortName(gs_184);
   deletebklinesandss();
   return (0);
}

int deinit() {
   deletebklinesandss();
   return (0);
}

int start() {
   double lda_28[];
   double lda_32[];
   double ld_36;
   int l_ind_counted_0 = IndicatorCounted();
   if (l_ind_counted_0 < 0) return (-1);
   string ls_4 = "";
   if (!DrawAllowed(ls_4, Symbol())) {
      gs_184 = gs_172 + " - " + ls_4;
      IndicatorShortName(gs_184);
      deletebklinesandss();
      Comment(gs_184);
      gi_180 = FALSE;
      return (-1);
   }
   if (!gi_180) {
      if (SlingShotsAllowed()) gs_184 = gs_172 + " & Slingshot";
      else gs_184 = gs_172;
      Comment(gs_184);
      gi_180 = TRUE;
   }
   int l_index_12 = 0;
   if (!gi_224) {
      l_ind_counted_0 = 0;
      gi_236 = GetBKNumbers(BaseSymbol(Symbol()), gia_228, gda_232);
      if (gi_236 >= 0) {
         if (showBiasandKey) {
            for (l_index_12 = 0; l_index_12 < gi_236; l_index_12++) {
               drawline(gda_232[l_index_12], bkfullname(gia_228[l_index_12]) + "_" + DoubleToStr(gda_232[l_index_12], 4));
               if (gia_228[l_index_12] < 1 || gia_228[l_index_12] > 2) Print(BaseSymbol(Symbol()), gia_228[l_index_12] + "_" + DoubleToStr(gda_232[l_index_12], 4));
            }
         } else deletebklinesandss();
         gi_224 = TRUE;
      }
   }
   int li_16 = 0;
   int l_period_20 = MathSqrt(gi_132);
   int li_24 = Bars - l_ind_counted_0 + gi_132 + 1;
   ArrayResize(lda_28, li_24);
   ArraySetAsSeries(lda_28, TRUE);
   ArrayResize(lda_32, li_24);
   ArraySetAsSeries(lda_32, TRUE);
   for (li_16 = 0; li_16 < li_24; li_16++) lda_28[li_16] = 2.0 * WMA(li_16, gi_132 / 2) - WMA(li_16, gi_132);
   for (li_16 = 0; li_16 < li_24 - gi_132; li_16++) g_ibuf_152[li_16] = iMAOnArray(lda_28, 0, l_period_20, 0, g_ma_method_136, li_16);
   for (li_16 = li_24 - gi_132; li_16 >= 0; li_16--) {
      lda_32[li_16] = lda_32[li_16 + 1];
      if (g_ibuf_152[li_16] > g_ibuf_152[li_16 + 1]) lda_32[li_16] = 1;
      if (g_ibuf_152[li_16] < g_ibuf_152[li_16 + 1]) lda_32[li_16] = -1;
      if (lda_32[li_16] > 0.0) {
         g_ibuf_144[li_16] = g_ibuf_152[li_16];
         if (lda_32[li_16 + 1] < 0.0) g_ibuf_144[li_16 + 1] = g_ibuf_152[li_16 + 1];
         g_ibuf_148[li_16] = EMPTY_VALUE;
      } else {
         if (lda_32[li_16] < 0.0) {
            g_ibuf_148[li_16] = g_ibuf_152[li_16];
            if (lda_32[li_16 + 1] > 0.0) g_ibuf_148[li_16 + 1] = g_ibuf_152[li_16 + 1];
            g_ibuf_144[li_16] = EMPTY_VALUE;
         }
      }
   }
   if (SlingShotsAllowed()) {
      for (li_16 = li_24; li_16 >= 0; li_16--) {
         g_istochastic_192 = iStochastic(NULL, 0, 8, 3, 3, MODE_SMA, 0, MODE_MAIN, li_16 + 1);
         g_istochastic_208 = iStochastic(NULL, 0, 34, 3, 3, MODE_SMA, 0, MODE_MAIN, li_16 + 1);
         gd_216 = MathAbs(g_istochastic_192 - g_istochastic_208);
         if (gd_216 > 25.0) {
            if (ArrowSize <= 3) ld_36 = 0.003;
            else ld_36 = 0.005;
            if (g_istochastic_192 > g_istochastic_208) Draw_SlingShot(li_16 + 1, High[li_16 + 1] + ld_36, 248, Red);
            else Draw_SlingShot(li_16 + 1, Low[li_16 + 1] - 0.0001, 246, Lime);
         }
      }
   }
   return (0);
}

void hlineproperties(string a_name_0, int &ai_8, int &ai_12, int &ai_16) {
   if (ObjectFind(a_name_0) > -1) {
      ai_8 = ObjectGet(a_name_0, OBJPROP_STYLE);
      ai_16 = ObjectGet(a_name_0, OBJPROP_COLOR);
      ai_12 = ObjectGet(a_name_0, OBJPROP_WIDTH);
   }
}

void drawline(double a_price_0, string as_8) {
   int l_style_16;
   int l_width_20;
   color l_color_24;
   if (StringFind(as_8, "Bias", 0) > -1) {
      l_color_24 = SteelBlue;
      l_style_16 = 0;
      l_width_20 = 2;
   } else {
      if (StringFind(as_8, "Key", 0) > -1) {
         l_color_24 = LimeGreen;
         l_style_16 = 1;
         l_width_20 = 1;
      } else l_color_24 = IndianRed;
   }
   l_width_20 = 1;
   hlineproperties(as_8, l_style_16, l_width_20, l_color_24);
   ObjectDelete(as_8);
   ObjectCreate(as_8, OBJ_HLINE, 0, TimeCurrent(), a_price_0, 0, 0, 0, 0);
   ObjectSet(as_8, OBJPROP_STYLE, l_style_16);
   ObjectSet(as_8, OBJPROP_COLOR, l_color_24);
   ObjectSet(as_8, OBJPROP_WIDTH, l_width_20);
}

void Draw_SlingShot(int ai_0, double a_price_4, int ai_12, color a_color_16) {
   string l_name_20 = "OUFM SS" + TimeToStr(Time[ai_0]);
   ObjectDelete(l_name_20);
   ObjectCreate(l_name_20, OBJ_ARROW, 0, Time[ai_0], a_price_4, 0, 0, 0, 0);
   ObjectSet(l_name_20, OBJPROP_ARROWCODE, ai_12);
   ObjectSet(l_name_20, OBJPROP_COLOR, a_color_16);
   ObjectSet(l_name_20, OBJPROP_BACK, TRUE);
   ObjectSet(l_name_20, OBJPROP_WIDTH, ArrowSize);
}

void deletebklinesandss() {
   string l_name_4;
   int li_0 = ObjectsTotal() - 1;
   for (int li_12 = li_0; li_12 >= 0; li_12--) {
      l_name_4 = ObjectName(li_12);
      if (StringSubstr(l_name_4, 0, 4) == "Bias" || StringSubstr(l_name_4, 0, 3) == "Key" || StringSubstr(l_name_4, 0, 7) == "OUFM SS") ObjectDelete(l_name_4);
   }
   gi_224 = FALSE;
}

double WMA(int ai_0, int a_period_4) {
   return (iMA(NULL, 0, a_period_4, 0, g_ma_method_136, g_applied_price_140, ai_0));
}