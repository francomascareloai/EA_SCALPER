/*
   Generated by EX4-TO-MQ4 decompiler V4.0.224.1 []
   Website: http://purebeam.biz
   E-mail : purebeam@gmail.com
*/
#property copyright "Copyright 2011, www.wallstreet-forex.com"
#property link      "http://www.wallstreet-forex.com"

#import "wininet.dll"
   int InternetOpenA(string a0, int a1, string a2, string a3, int a4);
   int InternetOpenUrlA(int a0, string a1, string a2, int a3, int a4, int a5);
   int InternetCloseHandle(int a0);
#import "WALLSTREET.dll"
   int SessionInit(int a0, int a1, int a2, int a3, string a4);
   int SessionDeinit(int a0, int a1, int a2, int a3, string a4);
   int ParamValue(int a0, int a1);
   bool CheckCloseLong(int a0, double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9);
   bool CheckCloseShort(int a0, double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9);
   bool CheckOpenLong(int a0, double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8);
   bool CheckOpenShort(int a0, double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8);
#import

extern int Magic = 4698523;
extern int MaxSpread = 4;
extern int Slippage = 2;
int gi_88 = 3;
int gi_92 = 3;
extern bool StealthMode = FALSE;
bool gi_100 = TRUE;
extern bool CloseOnlyOnProfit = FALSE;
extern string SS = "==== Custom Settings ====";
extern int StopLoss = 0;
extern int TakeProfit = 0;
extern int SecureProfit = 0;
extern int SecureProfitTriger = 0;
extern bool UseCustomPair = FALSE;
extern string UseSettingsFrom = "EURUSD";
extern string MM = "==== Risk Management ====";
extern bool RecoveryMode = FALSE;
extern double FixedLots = 0.1;
extern double AutoMM = 0.0;
extern double AutoMM_Max = 20.0;
int gi_180 = 50;
double gd_184 = 25.0;
double gd_192 = 1.1;
int g_period_200 = 0;
int gi_204 = 0;
int gi_208 = 0;
int gi_212 = 0;
int gi_216 = 0;
int gi_220 = 0;
int gi_224 = 0;
int g_period_228 = 0;
int gi_232 = 0;
int gi_236 = 0;
int gi_240 = 0;
int gi_244 = 0;
int gi_248 = 0;
int g_period_252 = 0;
int gi_256 = 0;
int g_period_260 = 0;
int gi_264 = 0;
int gi_268 = 0;
int gi_272 = -1;
bool gi_276 = TRUE;
bool gi_280 = FALSE;
int g_stoplevel_284 = 0;
double g_minlot_288 = 0.01;
double g_maxlot_296 = 0.01;
double g_lotstep_304 = 0.01;
int g_lotsize_312 = 100000;
double g_marginrequired_316 = 1000.0;
double gd_324 = 0.0001;
double gd_unused_332 = 0.1;
double gd_unused_340 = 1.0;

int CheckWWW() {
   int li_20;
   bool li_ret_0 = TRUE;
   string ls_4 = "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; Q312461)";
   bool li_12 = FALSE;
   int li_16 = InternetOpenA(ls_4, li_12, "0", "0", 0);
   if (li_16 != 0) {
      li_20 = InternetOpenUrlA(li_16, "http://www.wallstreet-forex.com", "0", 0, -2080374528, 0);
      if (li_20 == 0) li_ret_0 = FALSE;
      else InternetCloseHandle(li_20);
      InternetCloseHandle(li_16);
   } else li_ret_0 = FALSE;
   return (li_ret_0);
}

void init() {
   gi_276 = TRUE;
   gi_272 = -1;
   Comment("");
   if (ObjectFind("BKGR") >= 0) ObjectDelete("BKGR");
   if (ObjectFind("BKGR2") >= 0) ObjectDelete("BKGR2");
   if (ObjectFind("BKGR3") >= 0) ObjectDelete("BKGR3");
   if (ObjectFind("BKGR4") >= 0) ObjectDelete("BKGR4");
   if (ObjectFind("LV") >= 0) ObjectDelete("LV");
}

int deinit() {
   Comment("");
   if (ObjectFind("BKGR") >= 0) ObjectDelete("BKGR");
   if (ObjectFind("BKGR2") >= 0) ObjectDelete("BKGR2");
   if (ObjectFind("BKGR3") >= 0) ObjectDelete("BKGR3");
   if (ObjectFind("BKGR4") >= 0) ObjectDelete("BKGR4");
   if (ObjectFind("LV") >= 0) ObjectDelete("LV");
   if (gi_272 != -1) gi_272 = MyDeinit();
   return (0);
}

int start() {
   double l_price_8;
   double ld_16;
   double ld_24;
   color l_color_32;
   double l_lots_40;
   int l_ticket_120;
   double l_price_132;
   double l_price_140;
   string ls_148;
   string ls_0 = "";
   double ld_48 = 0;
   double ld_56 = 0;
   double ld_64 = 0;
   if (gi_276) {
      gi_276 = FALSE;
      g_stoplevel_284 = MarketInfo(Symbol(), MODE_STOPLEVEL);
      g_minlot_288 = MarketInfo(Symbol(), MODE_MINLOT);
      g_maxlot_296 = MarketInfo(Symbol(), MODE_MAXLOT);
      g_lotsize_312 = MarketInfo(Symbol(), MODE_LOTSIZE);
      g_lotstep_304 = MarketInfo(Symbol(), MODE_LOTSTEP);
      g_marginrequired_316 = MarketInfo(Symbol(), MODE_MARGINREQUIRED);
      if (Digits <= 3) gd_324 = 0.01;
      else gd_324 = 0.0001;
      if (Digits == 3 || Digits == 5) gd_unused_332 = 0.1;
      else gd_unused_332 = 1;
      Comment("\nInitializing ...");
      Sleep(1000);
      gi_280 = CheckWWW();
      Sleep(1000);
      if (!gi_280) gi_276 = TRUE;
   }
   if (!IsTesting() && IsStopped()) return (0);
   if (!IsTesting() && !IsTradeAllowed()) {
      Print("Trading is not Allowed ...");
      return (0);
   }
   if (!IsTesting() && IsTradeContextBusy()) {
      Print("Trade Context is Busy ...");
      return (0);
   }
   if (IsDllsAllowed() == FALSE) {
      Comment("\nWarning: Set Parameter **AllowDLL Imports** ON in menu Tools -> Options -> ExpertAdvisors.");
      Print("Warning: Set Parameter **AllowDLL Imports** ON in menu Tools -> Options -> ExpertAdvisors.");
      Alert("Warning: Set Parameter **AllowDLL Imports** ON in menu Tools -> Options -> ExpertAdvisors.");
      Sleep(30000);
      return (0);
   }
   if (gi_272 <= 0) {
      if (!gi_280) {
         Comment("\nInternet connection problem");
         Alert("Internet connection problem");
         Sleep(10000);
         return (0);
      }
      Comment("\nUpdating settings ...");
      Sleep(2000);
      gi_272 = MyFirstInit();
      Sleep(2000);
      if (gi_272 < 0) Comment("\nInitializing ...");
   }
   if (gi_272 <= 0) {
      if (gi_272 == -8) {
         Comment("\nUnsupported currency pair " + Symbol());
         Alert("Unsupported currency pair " + Symbol());
      } else {
         Comment("\nInitialization is failed with error code " + DoubleToStr(gi_272, 0));
         Alert("Initialization is failed with error code " + DoubleToStr(gi_272, 0));
      }
      Sleep(10000);
      return (0);
   }
   if (g_period_200 <= 0 || g_period_228 <= 0 || g_period_252 <= 0 || g_period_260 <= 0) {
      Comment("\nWrong initialization parameters for pair " + Symbol());
      Alert("Wrong initialization parameters for pair " + Symbol());
      Sleep(10000);
      return (0);
   }
   HideTestIndicators(TRUE);
   double l_iclose_72 = iClose(NULL, PERIOD_M15, 1);
   double l_ima_80 = iMA(NULL, PERIOD_M15, g_period_200, 0, MODE_SMMA, PRICE_CLOSE, 1);
   double l_iwpr_88 = iWPR(NULL, PERIOD_M15, g_period_228, 1);
   double l_iatr_96 = iATR(NULL, PERIOD_M15, g_period_252, 1);
   double l_icci_104 = iCCI(NULL, PERIOD_M15, g_period_260, PRICE_TYPICAL, 1);
   HideTestIndicators(FALSE);
   if (AutoMM > 0.0 && !RecoveryMode) l_lots_40 = MathMax(g_minlot_288, MathMin(g_maxlot_296, MathCeil(MathMin(AutoMM_Max, AutoMM) / 100.0 * AccountFreeMargin() / g_lotstep_304 / (g_lotsize_312 / 100)) * g_lotstep_304));
   if (AutoMM > 0.0 && RecoveryMode) l_lots_40 = CalcLots();
   if (AutoMM == 0.0) l_lots_40 = FixedLots;
   ls_0 = ls_0 
      + "\n  " 
      + "\n " 
      + "\n  Authorization - OK!" 
      + "\n -----------------------------------------------" 
   + "\n  Spread = " + DoubleToStr((Ask - Bid) / gd_324, 1) + " pips";
   if (Ask - Bid > MaxSpread * gd_324) ls_0 = ls_0 + " - TOO HIGH";
   else ls_0 = ls_0 + " - NORMAL";
   ls_0 = ls_0 
   + "\n -----------------------------------------------";
   if (AutoMM > 0.0) {
      ls_0 = ls_0 
         + "\n  AutoMM - ENABLED" 
      + "\n  Risk = " + DoubleToStr(AutoMM, 1) + "%";
   }
   ls_0 = ls_0 
   + "\n  Trading Lots = " + DoubleToStr(l_lots_40, 2);
   ls_0 = ls_0 
   + "\n -----------------------------------------------";
   if (RecoveryMode) {
      ls_0 = ls_0 
      + "\n  Recovery Mode - ENABLED";
   } else {
      ls_0 = ls_0 
      + "\n  Recovery Mode - DISABLED";
   }
   if (StealthMode) {
      ls_0 = ls_0 
      + "\n  Stealth Mode - ENABLED";
   } else {
      ls_0 = ls_0 
      + "\n  Stealth Mode - DISABLED";
   }
   ls_0 = ls_0 
   + "\n -----------------------------------------------";
   Comment(ls_0);
   if (ObjectFind("BKGR") < 0) {
      ObjectCreate("BKGR", OBJ_LABEL, 0, 0, 0);
      ObjectSetText("BKGR", "g", 110, "Webdings", LightSlateGray);
      ObjectSet("BKGR", OBJPROP_CORNER, 0);
      ObjectSet("BKGR", OBJPROP_BACK, TRUE);
      ObjectSet("BKGR", OBJPROP_XDISTANCE, 5);
      ObjectSet("BKGR", OBJPROP_YDISTANCE, 15);
   }
   if (ObjectFind("BKGR2") < 0) {
      ObjectCreate("BKGR2", OBJ_LABEL, 0, 0, 0);
      ObjectSetText("BKGR2", "g", 110, "Webdings", DimGray);
      ObjectSet("BKGR2", OBJPROP_BACK, TRUE);
      ObjectSet("BKGR2", OBJPROP_XDISTANCE, 5);
      ObjectSet("BKGR2", OBJPROP_YDISTANCE, 60);
   }
   if (ObjectFind("BKGR3") < 0) {
      ObjectCreate("BKGR3", OBJ_LABEL, 0, 0, 0);
      ObjectSetText("BKGR3", "g", 110, "Webdings", DimGray);
      ObjectSet("BKGR3", OBJPROP_CORNER, 0);
      ObjectSet("BKGR3", OBJPROP_BACK, TRUE);
      ObjectSet("BKGR3", OBJPROP_XDISTANCE, 5);
      ObjectSet("BKGR3", OBJPROP_YDISTANCE, 45);
   }
   if (ObjectFind("LV") < 0) {
      ObjectCreate("LV", OBJ_LABEL, 0, 0, 0);
      ObjectSetText("LV", "WALL STREET ROBOT", 9, "Tahoma Bold", White);
      ObjectSet("LV", OBJPROP_CORNER, 0);
      ObjectSet("LV", OBJPROP_BACK, FALSE);
      ObjectSet("LV", OBJPROP_XDISTANCE, 13);
      ObjectSet("LV", OBJPROP_YDISTANCE, 23);
   }
   if (ObjectFind("BKGR4") < 0) {
      ObjectCreate("BKGR4", OBJ_LABEL, 0, 0, 0);
      ObjectSetText("BKGR4", "g", 110, "Webdings", DimGray);
      ObjectSet("BKGR4", OBJPROP_CORNER, 0);
      ObjectSet("BKGR4", OBJPROP_BACK, TRUE);
      ObjectSet("BKGR4", OBJPROP_XDISTANCE, 5);
      ObjectSet("BKGR4", OBJPROP_YDISTANCE, 73);
   }
   if (TakeProfit < g_stoplevel_284 * Point / gd_324) TakeProfit = g_stoplevel_284 * Point / gd_324;
   if (StopLoss < g_stoplevel_284 * Point / gd_324) StopLoss = g_stoplevel_284 * Point / gd_324;
   Slippage = Slippage * gd_324;
   int l_count_112 = 0;
   int l_count_116 = 0;
   if (CloseOnlyOnProfit) gi_224 = 0;
   for (int l_pos_128 = OrdersTotal() - 1; l_pos_128 >= 0; l_pos_128--) {
      if (!OrderSelect(l_pos_128, SELECT_BY_POS, MODE_TRADES)) Print("Error in OrderSelect! Position:", l_pos_128);
      else {
         if (OrderType() <= OP_SELL && OrderSymbol() == Symbol()) {
            if (OrderMagicNumber() == Magic) {
               ld_64 += OrderProfit();
               if (OrderType() == OP_BUY) ld_48 = (Bid - OrderOpenPrice()) / gd_324;
               else ld_48 = (OrderOpenPrice() - Ask) / gd_324;
               ld_56 += ld_48;
               if (OrderType() == OP_BUY) {
                  l_count_112++;
                  if (OrderStopLoss() == 0.0 && StealthMode == FALSE) {
                     l_price_132 = NormalizeDouble(OrderOpenPrice() - StopLoss * gd_324, Digits);
                     l_price_140 = NormalizeDouble(OrderOpenPrice() + TakeProfit * gd_324, Digits);
                     OrderModify(OrderTicket(), OrderOpenPrice(), l_price_132, l_price_140, 0, Green);
                  } else {
                     if (Bid >= OrderOpenPrice() + TakeProfit * gd_324 || Bid <= OrderOpenPrice() - StopLoss * gd_324 || CloseLong(OrderOpenPrice(), l_iwpr_88, l_iclose_72, iOpen(NULL, PERIOD_M1, 1), iClose(NULL, PERIOD_M1, 1))) {
                        for (int li_124 = 1; li_124 <= MathMax(1, gi_88); li_124++) {
                           RefreshRates();
                           if (OrderClose(OrderTicket(), OrderLots(), NormalizeDouble(Bid, Digits), Slippage, Violet)) {
                              l_count_112--;
                              break;
                           }
                           Sleep(MathMax(100, 1000 * gi_92));
                        }
                        Sleep(5000);
                     } else
                        if (Bid - OrderOpenPrice() > SecureProfitTriger * gd_324 && MathAbs(OrderOpenPrice() + SecureProfit * gd_324 - OrderStopLoss()) >= Point) OrderModify(OrderTicket(), OrderOpenPrice(), NormalizeDouble(OrderOpenPrice() + SecureProfit * gd_324, Digits), OrderTakeProfit(), 0, Blue);
                  }
               } else {
                  l_count_116++;
                  if (OrderStopLoss() == 0.0 && StealthMode == FALSE) {
                     l_price_132 = NormalizeDouble(OrderOpenPrice() + StopLoss * gd_324, Digits);
                     l_price_140 = NormalizeDouble(OrderOpenPrice() - TakeProfit * gd_324, Digits);
                     OrderModify(OrderTicket(), OrderOpenPrice(), l_price_132, l_price_140, 0, Green);
                  } else {
                     if (Ask <= OrderOpenPrice() - TakeProfit * gd_324 || Ask >= OrderOpenPrice() + StopLoss * gd_324 || CloseShort(OrderOpenPrice(), l_iwpr_88, l_iclose_72, iOpen(NULL, PERIOD_M1, 1), iClose(NULL, PERIOD_M1, 1))) {
                        for (li_124 = 1; li_124 <= MathMax(1, gi_88); li_124++) {
                           RefreshRates();
                           if (OrderClose(OrderTicket(), OrderLots(), NormalizeDouble(Ask, Digits), Slippage, Violet)) {
                              l_count_116--;
                              break;
                           }
                           Sleep(MathMax(100, 1000 * gi_92));
                        }
                        Sleep(5000);
                     } else
                        if (OrderOpenPrice() - Ask > SecureProfitTriger * gd_324 && MathAbs(OrderOpenPrice() - SecureProfit * gd_324 - OrderStopLoss()) >= Point) OrderModify(OrderTicket(), OrderOpenPrice(), NormalizeDouble(OrderOpenPrice() - SecureProfit * gd_324, Digits), OrderTakeProfit(), 0, Red);
                  }
               }
            }
         }
      }
   }
   ls_0 = ls_0 
   + "\n  Account Ballance = " + DoubleToStr(AccountBalance(), 2);
   if (l_count_112 == 0 && l_count_116 == 0) {
      ls_0 = ls_0 
         + "\n  No active trades" 
      + "\n";
   } else {
      ls_0 = ls_0 
         + "\n  Current trade " + DoubleToStr(ld_56, 1) 
      + "\n  Account Profit = " + DoubleToStr(ld_64, 2);
   }
   Comment(ls_0);
   if (Ask - Bid > MaxSpread * gd_324) return (0);
   if (!gi_100) gi_256 = 1000;
   else gi_256 = gi_256;
   if (l_iatr_96 <= gi_248 * gd_324) return (0);
   int l_cmd_36 = -1;
   if (l_count_112 < 1 && OpenLong(l_iclose_72, l_ima_80, l_iwpr_88, l_icci_104)) {
      ls_148 = "BUY";
      l_cmd_36 = 0;
      l_color_32 = Aqua;
      RefreshRates();
      l_price_8 = NormalizeDouble(Ask, Digits);
      ld_16 = l_price_8 - StopLoss * gd_324;
      ld_24 = l_price_8 + TakeProfit * gd_324;
   }
   if (l_count_116 < 1 && OpenShort(l_iclose_72, l_ima_80, l_iwpr_88, l_icci_104)) {
      ls_148 = "SELL";
      l_cmd_36 = 1;
      l_color_32 = Red;
      RefreshRates();
      l_price_8 = NormalizeDouble(Bid, Digits);
      ld_16 = l_price_8 + StopLoss * gd_324;
      ld_24 = l_price_8 - TakeProfit * gd_324;
   }
   if (l_cmd_36 >= OP_BUY && CheckLossPause()) {
      for (li_124 = 1; li_124 <= MathMax(1, gi_88); li_124++) {
         l_ticket_120 = OrderSend(Symbol(), l_cmd_36, l_lots_40, l_price_8, Slippage, 0, 0, "WallStreetRobot", Magic, 0, l_color_32);
         if (l_ticket_120 >= 0) break;
         Sleep(MathMax(100, 1000 * gi_92));
         RefreshRates();
         if (l_cmd_36 == OP_BUY) l_price_8 = NormalizeDouble(Ask, Digits);
         else
            if (l_cmd_36 == OP_SELL) l_price_8 = NormalizeDouble(Bid, Digits);
      }
      Sleep(5000);
      if (l_ticket_120 > 0) {
         if (OrderSelect(l_ticket_120, SELECT_BY_TICKET, MODE_TRADES)) Print("Order " + ls_148 + " opened!: ", OrderOpenPrice());
      } else Print("Error opening " + ls_148 + " order!: ", GetLastError());
   }
   return (0);
}

double CalcLots() {
   double ld_16;
   int l_count_24;
   double ld_28;
   int li_36;
   double ld_40;
   int li_48;
   double ld_52;
   int li_60;
   double ld_8 = 1;
   if (gd_192 > 0.0 && AutoMM > 0.0) {
      ld_16 = 0;
      l_count_24 = 0;
      ld_28 = 0;
      li_36 = 0;
      ld_40 = 0;
      li_48 = 0;
      for (int l_pos_64 = OrdersHistoryTotal() - 1; l_pos_64 >= 0; l_pos_64--) {
         if (OrderSelect(l_pos_64, SELECT_BY_POS, MODE_HISTORY)) {
            if (OrderSymbol() == Symbol() && OrderMagicNumber() == Magic) {
               l_count_24++;
               ld_16 += OrderProfit();
               if (ld_16 > ld_40) {
                  ld_40 = ld_16;
                  li_48 = l_count_24;
               }
               if (ld_16 < ld_28) {
                  ld_28 = ld_16;
                  li_36 = l_count_24;
               }
               if (l_count_24 >= gi_180) break;
            }
         }
      }
      if (li_48 <= li_36) ld_8 = MathPow(gd_192, li_36);
      else {
         ld_16 = ld_40;
         l_count_24 = li_48;
         ld_52 = ld_40;
         li_60 = li_48;
         for (l_pos_64 = OrdersHistoryTotal() - li_48 - 1; l_pos_64 >= 0; l_pos_64--) {
            if (OrderSelect(l_pos_64, SELECT_BY_POS, MODE_HISTORY)) {
               if (OrderSymbol() == Symbol() && OrderMagicNumber() == Magic) {
                  if (l_count_24 >= gi_180) break;
                  l_count_24++;
                  ld_16 += OrderProfit();
                  if (ld_16 < ld_52) {
                     ld_52 = ld_16;
                     li_60 = l_count_24;
                  }
               }
            }
         }
         if (li_60 == li_48 || ld_52 == ld_40) ld_8 = MathPow(gd_192, li_36);
         else {
            if (MathAbs(ld_28 - ld_40) / MathAbs(ld_52 - ld_40) >= (gd_184 + 100.0) / 100.0) ld_8 = MathPow(gd_192, li_36);
            else ld_8 = MathPow(gd_192, li_60);
         }
      }
   }
   for (double ld_ret_0 = MathMax(g_minlot_288, MathMin(g_maxlot_296, MathCeil(MathMin(AutoMM_Max, ld_8 * AutoMM) / 100.0 * AccountFreeMargin() / g_lotstep_304 / (g_lotsize_312 / 100)) * g_lotstep_304)); ld_ret_0 >= 2.0 * g_minlot_288 &&
      1.05 * (ld_ret_0 * g_marginrequired_316) >= AccountFreeMargin(); ld_ret_0 -= g_minlot_288) {
   }
   return (ld_ret_0);
}

int CheckLossPause() {
   int l_datetime_4;
   bool li_ret_0 = TRUE;
   if (gi_264 > 0 && gi_268 > 0) {
      l_datetime_4 = 0;
      for (int l_pos_8 = OrdersHistoryTotal() - 1; l_pos_8 >= 0; l_pos_8--) {
         if (OrderSelect(l_pos_8, SELECT_BY_POS, MODE_HISTORY)) {
            if (OrderSymbol() == Symbol() && OrderMagicNumber() == Magic) {
               if (!((OrderType() == OP_BUY && (OrderClosePrice() - OrderOpenPrice()) / gd_324 <= (-gi_264)) || (OrderType() == OP_SELL && (OrderOpenPrice() - OrderClosePrice()) / gd_324 <= (-gi_264)))) break;
               l_datetime_4 = OrderCloseTime();
               break;
            }
         }
      }
      if (TimeCurrent() - l_datetime_4 < 3600 * gi_268) li_ret_0 = FALSE;
   }
   return (li_ret_0);
}

int MyFirstInit() {
   int li_ret_0;
   if (UseCustomPair) li_ret_0 = SessionInit(AccountNumber(), IsTesting(), IsDemo(), WindowHandle(Symbol(), Period()), StringSubstr(UseSettingsFrom, 0, 6));
   else li_ret_0 = SessionInit(AccountNumber(), IsTesting(), IsDemo(), WindowHandle(Symbol(), Period()), StringSubstr(Symbol(), 0, 6));
   if (li_ret_0 >= 0) {
      g_period_200 = ParamValue(li_ret_0, 1);
      gi_204 = ParamValue(li_ret_0, 2);
      gi_208 = ParamValue(li_ret_0, 3);
      gi_212 = ParamValue(li_ret_0, 4);
      gi_216 = ParamValue(li_ret_0, 5);
      gi_220 = ParamValue(li_ret_0, 6);
      gi_224 = ParamValue(li_ret_0, 7);
      g_period_228 = ParamValue(li_ret_0, 8);
      gi_232 = ParamValue(li_ret_0, 9);
      if (SecureProfit <= 0) SecureProfit = ParamValue(li_ret_0, 10);
      if (SecureProfitTriger <= 0) SecureProfitTriger = ParamValue(li_ret_0, 11);
      gi_236 = ParamValue(li_ret_0, 12);
      gi_240 = ParamValue(li_ret_0, 13);
      gi_244 = ParamValue(li_ret_0, 14);
      gi_248 = ParamValue(li_ret_0, 15);
      g_period_252 = ParamValue(li_ret_0, 16);
      gi_256 = ParamValue(li_ret_0, 17);
      g_period_260 = ParamValue(li_ret_0, 18);
      gi_264 = ParamValue(li_ret_0, 19);
      gi_268 = ParamValue(li_ret_0, 20);
      if (StopLoss <= 0) StopLoss = ParamValue(li_ret_0, 21);
      if (TakeProfit <= 0) TakeProfit = ParamValue(li_ret_0, 22);
   }
   return (li_ret_0);
}

int MyDeinit() {
   int li_ret_0;
   if (UseCustomPair) li_ret_0 = SessionDeinit(AccountNumber(), IsTesting(), IsDemo(), WindowHandle(Symbol(), Period()), StringSubstr(UseSettingsFrom, 0, 6));
   else li_ret_0 = SessionDeinit(AccountNumber(), IsTesting(), IsDemo(), WindowHandle(Symbol(), Period()), StringSubstr(Symbol(), 0, 6));
   return (li_ret_0);
}

int CloseLong(double ad_0, double ad_8, double ad_16, double ad_24, double ad_32) {
   int li_40 = 0;
   li_40 = CheckCloseLong(gi_272, ad_0, ad_8, ad_16, ad_24, ad_32, gi_224, Bid, Ask, gd_324);
   return (li_40);
}

int CloseShort(double ad_0, double ad_8, double ad_16, double ad_24, double ad_32) {
   int li_40 = 0;
   li_40 = CheckCloseShort(gi_272, ad_0, ad_8, ad_16, ad_24, ad_32, gi_224, Bid, Ask, gd_324);
   return (li_40);
}

int OpenLong(double ad_0, double ad_8, double ad_16, double ad_24) {
   int li_32 = 0;
   li_32 = CheckOpenLong(gi_272, ad_0, ad_8, ad_16, ad_24, gi_256, Bid, Ask, gd_324);
   return (li_32);
}

int OpenShort(double ad_0, double ad_8, double ad_16, double ad_24) {
   int li_32 = 0;
   li_32 = CheckOpenShort(gi_272, ad_0, ad_8, ad_16, ad_24, gi_256, Bid, Ask, gd_324);
   return (li_32);
}
