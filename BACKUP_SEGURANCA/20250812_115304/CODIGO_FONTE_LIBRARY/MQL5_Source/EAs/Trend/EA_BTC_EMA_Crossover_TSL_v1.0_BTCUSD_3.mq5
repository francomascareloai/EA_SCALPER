
//+------------------------------------------------------------------+
//|                                                   EMA_Crossover  |
//|                        Generated by ChatGPT                      |
//+------------------------------------------------------------------+
#property copyright "ChatGPT"
#property version   "1.00"
#property strict

input int    FastEMAPeriod = 5;
input int    SlowEMAPeriod = 8;
input double TrailingStopPips = 10;
input double StopLossPips = 0; // Set to 0 to disable
input double TakeProfitPips = 0; // Set to 0 to disable

int handleFastEMA, handleSlowEMA;
double lastFastEMA, lastSlowEMA;
bool tradeOpen = false;
ulong magicNumber = 123456;

//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
  {
   handleFastEMA = iMA(_Symbol, _Period, FastEMAPeriod, 0, MODE_EMA, PRICE_CLOSE);
   handleSlowEMA = iMA(_Symbol, _Period, SlowEMAPeriod, 0, MODE_EMA, PRICE_CLOSE);
   return(INIT_SUCCEEDED);
  }

//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
  {
   double fastEMA[2], slowEMA[2];

   if(CopyBuffer(handleFastEMA, 0, 0, 2, fastEMA) < 0) return;
   if(CopyBuffer(handleSlowEMA, 0, 0, 2, slowEMA) < 0) return;

   if(fastEMA[1] < slowEMA[1] && fastEMA[0] > slowEMA[0]) // Bullish crossover
     {
      if(!PositionSelect(_Symbol))
         OpenOrder(ORDER_TYPE_BUY);
     }
   else if(fastEMA[1] > slowEMA[1] && fastEMA[0] < slowEMA[0]) // Bearish crossover
     {
      if(!PositionSelect(_Symbol))
         OpenOrder(ORDER_TYPE_SELL);
     }

   ManageTrailingStop();
  }

//+------------------------------------------------------------------+
//| Function to open orders                                          |
//+------------------------------------------------------------------+
void OpenOrder(ENUM_ORDER_TYPE type)
  {
   double sl = 0, tp = 0, price = (type == ORDER_TYPE_BUY) ? SymbolInfoDouble(_Symbol, SYMBOL_ASK) : SymbolInfoDouble(_Symbol, SYMBOL_BID);
   double lotSize = 0.01;

   if(type == ORDER_TYPE_BUY)
     {
      if(StopLossPips > 0) sl = price - StopLossPips * _Point;
      if(TakeProfitPips > 0) tp = price + TakeProfitPips * _Point;
     }
   else
     {
      if(StopLossPips > 0) sl = price + StopLossPips * _Point;
      if(TakeProfitPips > 0) tp = price - TakeProfitPips * _Point;
     }

   tradeOpen = true;
   MqlTradeRequest request;
   MqlTradeResult result;
   ZeroMemory(request);
   ZeroMemory(result);

   request.action = TRADE_ACTION_DEAL;
   request.symbol = _Symbol;
   request.volume = lotSize;
   request.type = type;
   request.price = price;
   request.sl = sl;
   request.tp = tp;
   request.magic = magicNumber;
   request.deviation = 10;
   request.type_filling = ORDER_FILLING_IOC;

   OrderSend(request, result);
  }

//+------------------------------------------------------------------+
//| Function to manage trailing stop                                 |
//+------------------------------------------------------------------+
void ManageTrailingStop()
  {
   if(!PositionSelect(_Symbol)) return;

   double trailing = TrailingStopPips * _Point;
   double price = SymbolInfoDouble(_Symbol, (PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_BUY) ? SYMBOL_BID : SYMBOL_ASK);
   double sl = PositionGetDouble(POSITION_SL);
   double openPrice = PositionGetDouble(POSITION_PRICE_OPEN);

   if(PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_BUY)
     {
      double newSL = price - trailing;
      if(newSL > sl && newSL > openPrice)
         ModifySL(newSL);
     }
   else if(PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_SELL)
     {
      double newSL = price + trailing;
      if(newSL < sl && newSL < openPrice)
         ModifySL(newSL);
     }
  }

//+------------------------------------------------------------------+
//| Modify SL                                                        |
//+------------------------------------------------------------------+
void ModifySL(double newSL)
  {
   MqlTradeRequest request;
   MqlTradeResult result;
   ZeroMemory(request);
   ZeroMemory(result);

   request.action = TRADE_ACTION_SLTP;
   request.symbol = _Symbol;
   request.sl = newSL;
   request.tp = PositionGetDouble(POSITION_TP);
   request.position = PositionGetInteger(POSITION_TICKET);
   request.magic = magicNumber;

   OrderSend(request, result);
  }
//+------------------------------------------------------------------+
