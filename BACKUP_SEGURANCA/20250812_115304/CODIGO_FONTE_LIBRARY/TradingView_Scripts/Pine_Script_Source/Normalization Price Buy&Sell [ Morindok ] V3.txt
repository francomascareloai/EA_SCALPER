//@version=5
//Morindok
//BITMOON618
indicator("Price Range with RSI Filter", overlay=true)

// User inputs for the normalized price thresholds
normalizedPriceLower = input.float(0.1, "Normalized Price Lower Threshold")
normalizedPriceUpper = input.float(99.9, "Normalized Price Upper Threshold")

currency_s = input.string('BTCUSDT',title = 'Currency')
timeframeList = input.string("5", "Timeframe", options=["1", "5", "15", "30", "60","240","1440"])
btcPrice = request.security(currency_s, timeframeList, close)
DYXPrice = request.security('DXY',timeframeList,close)



// Calculate the price within the range of 0 to 100 in terms of Bitcoin
normalized_price = ((close * btcPrice - ta.lowest(low * btcPrice, 100)) / (ta.highest(high * btcPrice, 100) - ta.lowest(low * btcPrice, 100))) * 100
normalized_price2 = ((close * DYXPrice - ta.lowest(low * DYXPrice, 100)) / (ta.highest(high * DYXPrice, 100) - ta.lowest(low * DYXPrice, 100))) * 100

// Calculate RSI
rsi = ta.rsi(close, 1)

// Generate a buy signal when the normalized price crosses above the lower threshold and RSI is below 50
buySignal = (ta.crossover(normalized_price, normalizedPriceLower) or ta.crossover(normalized_price2, normalizedPriceLower)) and rsi < 50

// Generate a sell signal when the normalized price crosses below the upper threshold and RSI is above 50
sellSignal = (ta.crossunder(normalized_price, normalizedPriceUpper) or ta.crossunder(normalized_price2, normalizedPriceUpper)) and rsi > 50

// Plot buy signal on the chart
plotshape(series=buySignal, location=location.belowbar, color=color.green, style=shape.triangleup, size=size.small)

// Plot sell signal on the chart
plotshape(series=sellSignal, location=location.abovebar, color=color.red, style=shape.triangledown, size=size.small)

// Adding user inputs for profit and loss percentages
profitPercent = input.float(1, 'Profit Percentage') / 100
lossPercent = input.float(1, 'Loss Percentage') / 100

// Track the result of signals
var float buyEntryPrice = na
var float sellEntryPrice = na
var int successfulBuySignals = 0
var int failedBuySignals = 0
var int successfulSellSignals = 0
var int failedSellSignals = 0

if (buySignal)
    buyEntryPrice := close

if (sellSignal)
    sellEntryPrice := close

if (not na(buyEntryPrice))
    if (high >= buyEntryPrice * (1 + profitPercent))
        successfulBuySignals += 1
        buyEntryPrice := na
    else if (low <= buyEntryPrice * (1 - lossPercent))
        failedBuySignals += 1
        buyEntryPrice := na

if (not na(sellEntryPrice))
    if (low <= sellEntryPrice * (1 - profitPercent))
        successfulSellSignals += 1
        sellEntryPrice := na
    else if (high >= sellEntryPrice * (1 + lossPercent))
        failedSellSignals += 1
        sellEntryPrice := na

totalBuySignals = successfulBuySignals + failedBuySignals
totalSellSignals = successfulSellSignals + failedSellSignals
totalSignals = totalBuySignals + totalSellSignals

winRate = totalSignals > 0 ? (successfulBuySignals + successfulSellSignals) / totalSignals * 100 : na
buyWinRate = totalBuySignals > 0 ? successfulBuySignals / totalBuySignals * 100 : na
sellWinRate = totalSellSignals > 0 ? successfulSellSignals / totalSellSignals * 100 : na

// Display results in a table
tableResults = table.new(position.top_right, 6, 7, border_width=1)
table.cell(tableResults, 0, 0, text="Total Signals", text_color=color.green)
table.cell(tableResults, 0, 1, text=str.tostring(totalSignals), text_color=color.green)
table.cell(tableResults, 1, 0, text="Buy Signals", text_color=color.green)
table.cell(tableResults, 1, 1, text=str.tostring(totalBuySignals), text_color=color.green)
table.cell(tableResults, 2, 0, text="Sell Signals", text_color=color.green)
table.cell(tableResults, 2, 1, text=str.tostring(totalSellSignals), text_color=color.green)
table.cell(tableResults, 3, 0, text="Win Rate (Overall)", text_color=color.green)
table.cell(tableResults, 3, 1, text=str.tostring(winRate, format.percent), text_color=color.green)
table.cell(tableResults, 4, 0, text="Win Rate (Buy)", text_color=color.green)
table.cell(tableResults, 4, 1, text=str.tostring(buyWinRate, format.percent), text_color=color.green)
table.cell(tableResults, 5, 0, text="Win Rate (Sell)", text_color=color.green)
table.cell(tableResults, 5, 1, text=str.tostring(sellWinRate, format.percent), text_color=color.green)
