//@version=5
indicator("Power Trend [MacAlgo]", overlay=true, format=format.price)

// Inputs
periodsInput = input.int(title="ATR Period", defval=8, minval=1)
multiplierInput = input.float(title="ATR Multiplier", step=0.1, defval=3.0)
src = input.source(hl2, title="Source")
changeATR = input.bool(title="Change ATR Calculation Method?", defval=false)
showsignals = input.bool(title="Show Buy/Sell Signals?", defval=true)
highlighting = input.bool(title="Highlighter On/Off?", defval=true)
autoTimeframe = input.bool(title="Automatically Adjust Indicator Timeframe?", defval=true)
manualResolution = input.timeframe(title="Manual Indicator Timeframe", defval="60") // Default to 1-hour timeframe

// Determine ATR Period and Multiplier based on timeframe
Periods = timeframe.isintraday ? (timeframe.multiplier == 1 ? 7 : timeframe.multiplier == 3 ? 14 : timeframe.multiplier == 5 ? 14 : timeframe.multiplier == 15 ? 14 : timeframe.multiplier == 60 ? 8 : timeframe.multiplier == 240 ? 6 : timeframe.multiplier == 720 ? 8 : periodsInput) : periodsInput

Multiplier = timeframe.isintraday ? (timeframe.multiplier == 1 ? 4 : timeframe.multiplier == 3 ? 3.5 : timeframe.multiplier == 5 ? 4.0 : timeframe.multiplier == 15 ? 4.0 : timeframe.multiplier == 60 ? 3.0 : timeframe.multiplier == 60 ? 2 : timeframe.multiplier == 720 ? 3 : multiplierInput) : multiplierInput

// Determine the resolution to use
resolution = autoTimeframe ? timeframe.period : manualResolution

// Define the time frame for the Alpha Trend line
res = resolution == "60" ? "240" : "1440" //res = input("240", title="Time Frame")

// Technical calculations
tr = request.security(syminfo.tickerid, resolution, ta.tr)
atr2 = ta.sma(tr, Periods)
atr = changeATR ? request.security(syminfo.tickerid, resolution, ta.atr(Periods)) : atr2

up = src - (Multiplier * atr)
up1 = na(up[1]) ? up : up[1]
up := close[1] > up1 ? math.max(up, up1) : up

dn = src + (Multiplier * atr)
dn1 = na(dn[1]) ? dn : dn[1]
dn := close[1] < dn1 ? math.min(dn, dn1) : dn

avgVolume = request.security(syminfo.tickerid, resolution, ta.sma(volume, Periods))
emaValue = request.security(syminfo.tickerid, resolution, ta.sma(close, 30))

// Calculate the 50-period EMA on 4-hour data
emaValue_4h = request.security(syminfo.tickerid, res, ta.ema(close, 50))

// Calculate the 30-period SMA on 4-hour data
smaValue_4h = request.security(syminfo.tickerid, res, ta.sma(close, 30))

// This part of the code ensures that the calculations are based on the 4-hour time frame
alphaTrend_4h = (emaValue_4h + smaValue_4h) / 2

// Define buy and sell volumes
buyVolume = request.security(syminfo.tickerid, resolution, volume * (close > open ? 1 : 0))
sellVolume = request.security(syminfo.tickerid, resolution, volume * (close < open ? 1 : 0))

// Calculate average buy and sell volumes
avgBuyVolume = request.security(syminfo.tickerid, resolution, ta.ema(buyVolume, Periods))
avgSellVolume = request.security(syminfo.tickerid, resolution, ta.ema(sellVolume, Periods))

// Trend determination
var trend = 1
trend := na(trend[1]) ? trend : trend[1]
trend := trend == -1 and close > dn1 ? 1 : trend == 1 and close < up1 ? -1 : trend

// Define trend color
trendColor = trend == 1 ? (close > alphaTrend_4h ? #00dd99 : color.orange) : (close < alphaTrend_4h ? #ff5252 : color.orange)

// Color the bars according to the current trend
barcolor(trend == 1 ? (close > alphaTrend_4h ? #00dd99 : color.orange) : (close < alphaTrend_4h ? #ff5252 : color.orange))

// Define trend change condition
trendChange = trend != trend[1]

// Plot the 4-hour AlphaTrend line
plot(alphaTrend_4h, title="AlphaTrend Line", color=trendColor, linewidth=2)

// Define standard and power signals
buySignal = ta.crossover(trend, -1)
sellSignal = ta.crossunder(trend, 1)

// RSI, MACD, and OBV calculations
rsiValue = request.security(syminfo.tickerid, resolution, ta.rsi(close, 14))
[macdLine, signalLine, hist] = request.security(syminfo.tickerid, resolution, ta.macd(close, 12, 26, 9))

obvFunc(closeVal, vol) =>
    var float obvVar = 0.0
    obvVar := na(obvVar[1]) ? vol : closeVal > closeVal[1] ? obvVar[1] + vol : closeVal < closeVal[1] ? obvVar[1] - vol : obvVar[1]

obvValue = request.security(syminfo.tickerid, resolution, obvFunc(close, volume))

powerBuySignal = buyVolume > 1.95 * avgBuyVolume and close > close[1] * 1.02 and close > ta.highest(high, 10)[1] and macdLine > signalLine and macdLine > macdLine[1] * 1 and obvValue > obvValue[1] * 1.05 and ta.ema(close, 20) > ta.ema(close, 50) and ta.ema(close, 50) > ta.ema(close, 200)

powerSellSignal = sellVolume > 2.25 * avgSellVolume and close < close[1] and close < ta.lowest(low, 1) and high < high[1] and rsiValue < rsiValue[1] and rsiValue > 30 and macdLine < 0 and macdLine < macdLine[1] and macdLine < signalLine and macdLine < signalLine[2] and obvValue < obvValue[1] and hist < 0

// Plot EMA
plot(emaValue, title="EMA", color=#cd21f3, display=display.none)

// Plot buy and sell triangles
plotshape(buySignal, title="Buy Signal", location=location.belowbar, style=shape.triangleup, size=size.small, color=trendColor)
plotshape(sellSignal, title="Sell Signal", location=location.abovebar, style=shape.triangledown, size=size.small, color=trendColor)

// Plot triangle when trend changes to uptrend
plotshape(trendChange and trend == 1, title="Secondary Buy Signal", location=location.belowbar, style=shape.triangleup, size=size.small, color=trendColor)
// Plot triangle when trend changes to downtrend
plotshape(trendChange and trend == -1, title="Secondary Sell Signal", location=location.abovebar, style=shape.triangledown, size=size.small, color=trendColor)

// Plot power buy and sell triangles
plotshape(powerBuySignal, title="Power Buy Signal", location=location.belowbar, style=shape.triangleup, size=size.normal, color=#39f809)
plotshape(powerSellSignal, title="Power Sell Signal", location=location.abovebar, style=shape.triangledown, size=size.normal, color=#ff5252)

// Continuous trend line
continuousLine = plot(trend == 1 ? up : dn, title="Trend Line", color=trendColor, linewidth=1)

// Highlighting configuration
fillColor = trend == 1 ? (close > alphaTrend_4h ? color.new(#00dd99, 76) : color.new(color.orange, 76)) : (close < alphaTrend_4h ? color.new(#ff5252, 76) : color.new(color.orange, 76))
fill(continuousLine, plot(close, color=na, display=display.none), title="Trend Highlight", color=fillColor)

// Alerts
alertcondition(buySignal, title="SuperTrend Buy", message="SuperTrend Buy!")
alertcondition(sellSignal, title="SuperTrend Sell", message="SuperTrend Sell!")
alertcondition(powerBuySignal, title="Power Buy Alert", message="Strong Buy Signal Detected!")
alertcondition(powerSellSignal, title="Power Sell Alert", message="Strong Sell Signal Detected!")
changeCond = trend != trend[1]
alertcondition(changeCond, title="SuperTrend Direction Change", message="SuperTrend has changed direction!")