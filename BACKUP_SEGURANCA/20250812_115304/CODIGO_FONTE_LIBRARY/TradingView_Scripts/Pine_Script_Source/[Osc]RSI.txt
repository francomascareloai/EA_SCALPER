//@version=6
indicator('<[Osc]RSI Линейная Регрессия]>','<[RSI Линейная Регрессия]>', false)

// === НАСТРОЙКИ RSI ===
len = input.int(14, minval = 1, title = 'Длина')
src = input(close, 'Источник')

// === РАСЧЕТ RSI ===
up = ta.rma(math.max(ta.change(src), 0), len)
down = ta.rma(-math.min(ta.change(src), 0), len)
rsi = down == 0 ? 100 : up == 0 ? 0 : 100 - 100 / (1 + up / down)

// === ОТОБРАЖЕНИЕ RSI И УРОВНЕЙ ===
plot(rsi, 'RSI', color = #00ffee)
band1 = hline(70, 'Верхний уровень', color = #787B86)
bandm = hline(50, 'Средний уровень', color = #787b8680)
band0 = hline(30, 'Нижний уровень', color = #787B86)
fill(band1, band0, color = #7e57c21a, title = 'Фон')

// === ФУНКЦИЯ ОТРИСОВКИ ЛИНИЙ ===
drawLine(X1, Y1, X2, Y2, ExtendType, Color, LineStyle) =>
    var line Line = na
    Line := line.new(X1, Y1, X2, Y2, xloc.bar_index, ExtendType, Color, LineStyle, 1)
    line.delete(Line[1])

// === ЛИНЕЙНАЯ РЕГРЕССИЯ ===
rsdcr2(PeriodMinusOne, Deviations, Estimate) =>
    var period = PeriodMinusOne + 1
    var devDenominator = Estimate == 'Unbiased' ? PeriodMinusOne : period
    Ex = 0.0
    Ex2 = 0.0
    Exy = 0.0
    Ey = 0.0
    for i = 0 to PeriodMinusOne by 1
        closeI = nz(rsi[i])
        Ex := Ex + i
        Ex2 := Ex2 + i * i
        Exy := Exy + closeI * i
        Ey := Ey + closeI
        Ey
    ExEx = Ex * Ex
    slope = Ex2 == ExEx ? 0.0 : (period * Exy - Ex * Ey) / (period * Ex2 - ExEx)
    linearRegression = (Ey - slope * Ex) / period
    intercept = linearRegression + bar_index * slope
    deviation = 0.0
    for i = 0 to PeriodMinusOne by 1
        deviation := deviation + math.pow(nz(rsi[i]) - (intercept - bar_index[i] * slope), 2.0)
        deviation
    deviation := Deviations * math.sqrt(deviation / devDenominator)
    correlate = ta.correlation(rsi, bar_index, period)
    r2 = math.pow(correlate, 2.0)
    [linearRegression, slope, deviation, correlate, r2]

// === НАСТРОЙКИ ЛИНЕЙНОЙ РЕГРЕССИИ ===
periodTrend = input.int(89, 'Период тренда', minval = 4)
deviationsAmnt = input.float(1.5, ' Отклонение', minval = 0.1, step = 0.1)
estimatorType = input.string('Unbiased', ' Оценка', options = ['Biased', 'Unbiased'])
var extendType = input.string('Right', 'Продление', options = ['Right', 'Segment']) == 'Right' ? extend.right : extend.none

periodMinusOne = periodTrend - 1
[linReg, slope, deviation, correlate, r2] = rsdcr2(periodMinusOne, deviationsAmnt, estimatorType)

// === ОТРИСОВКА ЛИНИЙ РЕГРЕССИИ ===
endPointBar = bar_index - periodTrend + 1
endPointY = linReg + slope * periodMinusOne
drawLine(endPointBar, endPointY + deviation, bar_index, linReg + deviation, extendType, color.red, line.style_solid)
drawLine(endPointBar, endPointY, bar_index, linReg, extendType, #CCCC00ff, line.style_dotted)
drawLine(endPointBar, endPointY - deviation, bar_index, linReg - deviation, extendType, color.green, line.style_solid)

// === МЕТКИ КОРРЕЛЯЦИИ ===
var label Label = na
Label := label.new(math.max(0, endPointBar), endPointY, text = str.tostring(correlate, '#.####'), color = 0.0 > correlate ? color.red : color.green, textcolor = #FFFFFFff, style = label.style_label_right, tooltip = 'Корреляция: ' + str.tostring(correlate) + '\nR2: ' + str.tostring(r2))
label.delete(Label[1])

// === НАСТРОЙКИ ЗИГЗАГА ===
length = input(21, title = 'Длина зигзага')

r = rsi[length]
l = rsi[14]

// === РАСЧЕТ ТОЧЕК ЗИГЗАГА ===
ph = ta.pivothigh(rsi, length, length)
pl = ta.pivotlow(rsi, length, length)
valH = ta.valuewhen(bool(ph), r, 0)
valL = ta.valuewhen(bool(pl), r, 0)
valpH = ta.valuewhen(bool(ph), r, 1)
valpL = ta.valuewhen(bool(pl), r, 1)

// === ОТОБРАЖЕНИЕ МЕТОК ЗИГЗАГА ===
d = math.abs(r)
n = bar_index
label lbl = na
HIH = valH > valpH ? 'HH' : na
HIL = valH < valpH ? 'LH' : na
LOL = valL < valpL ? 'LL' : na
LOH = valL > valpL ? 'HL' : na

if bool(ph) and valH > valpH
    lbl := label.new(n[length], math.max(r, l), HIH, color = #ff1100, style = label.style_label_down, textcolor = color.white, size = size.tiny)
    label.delete(lbl[1])
if bool(ph) and valH < valpH
    lbl := label.new(n[length], math.max(r, l), HIL, color = #e79700, style = label.style_label_down, textcolor = color.white, size = size.tiny)
    label.delete(lbl[1])
else if bool(pl) and valL < valpL
    lbl := label.new(n[length], math.min(r, l), LOL, color = #009c0c, style = label.style_label_up, textcolor = color.white, size = size.tiny)
    label.delete(lbl[1])
else if bool(pl) and valL > valpL
    lbl := label.new(n[length], math.min(r, l), LOH, color = #0073ee, style = label.style_label_up, textcolor = color.white, size = size.tiny)
    label.delete(lbl[1])
label.delete(lbl[200])

var table t = table.new(position.bottom_right, 1, 1)
if barstate.islast
    table.cell(t, 0, 0, "DM", text_color=#ffffff, bgcolor=#2196f326, text_size=size.large)

// ======================================================================================================================= //

