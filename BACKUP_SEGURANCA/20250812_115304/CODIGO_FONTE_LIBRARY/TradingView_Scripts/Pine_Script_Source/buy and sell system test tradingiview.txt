//@version=5
indicator("Buy and Sell system", overlay=true)

// =============================================================================
// BLUE SIGNAL PREMIUM PARAMETERS
// =============================================================================
keyValue = input(7, title="Key Value. 'This changes the sensitivity'")
atrPeriod = input(14, title="Value Signals Period")
useHeikinAshi = input(true, title="Activate Signals 90%")
plotSignals = input(true, title="Show Buy/Sell Signals")
filter_signals = input.bool(defval = false, title = "Use Hull Suite as a filter?")

// Hull Suite Parameters
src = input(close, title='Source')
modeSwitch = input.string('Hma', title='Hull Variation', options=['Hma', 'Thma', 'Ehma'])
length = input(100, title='Length (180-200 for floating S/R, 55 for swing entry)')
lengthMult = input(10.0, title='Length multiplier')
switchColor = input(true, 'Color Hull according to trend?')
candleCol = input(false, title='Color candles based on Hull\'s Trend?')
visualSwitch = input(true, title='Show as a Band?')
thicknesSwitch = input(1, title='Line Thickness')
transpSwitch = input.int(40, title='Band Transparency', step=5)

// TP Parameters
tp1Distance = input.float(defval = 0.5, title = "TP 1", group = "TP Settings")
tp2Distance = input.float(defval = 1, title = "TP 2", group = "TP Settings")
tp3Distance = input.float(defval = 1.5, title = "TP 3", group = "TP Settings")
lineStyle = input.string("Dotted", title="Line Style", options=["Solid", "Dashed", "Dotted"])

// =============================================================================
// HULL SUITE FUNCTIONS
// =============================================================================
HMA(_src, _length) =>
    ta.wma(2 * ta.wma(_src, _length / 2) - ta.wma(_src, _length), math.round(math.sqrt(_length)))

EHMA(_src, _length) =>
    ta.ema(2 * ta.ema(_src, _length / 2) - ta.ema(_src, _length), math.round(math.sqrt(_length)))

THMA(_src, _length) =>
    ta.wma(ta.wma(_src, _length / 3) * 3 - ta.wma(_src, _length / 2) - ta.wma(_src, _length), _length)

Mode(modeSwitch, src, len) =>
    modeSwitch == 'Hma' ? HMA(src, len) : modeSwitch == 'Ehma' ? EHMA(src, len) : modeSwitch == 'Thma' ? THMA(src, len / 2) : na

_hull = Mode(modeSwitch, src, int(length * lengthMult))
MHULL = _hull[0]
SHULL = _hull[2]
hullColor = switchColor ? _hull > _hull[2] ? color.rgb(0, 255, 0, 100) : color.rgb(255, 0, 0, 100) : color.rgb(255, 153, 0, 100)

// Plot Hull Suite
Fi1 = plot(MHULL, title='MHULL', color=color.new(hullColor, 50), linewidth=thicknesSwitch)
Fi2 = plot(visualSwitch ? SHULL : na, title='SHULL', color=color.new(hullColor, 50), linewidth=thicknesSwitch)
fill(Fi1, Fi2, title='Band Filler', color=color.new(hullColor, transpSwitch))

// Bar color
barcolor(color=candleCol ? switchColor ? hullColor : na : na)

// =============================================================================
// SIGNAL GENERATION
// =============================================================================
// ATR and Trailing Stop
atrValue = ta.atr(atrPeriod)
lossMultiplier = keyValue * atrValue

// Heiken Ashi source
HA_close = request.security(ticker.heikinashi(syminfo.tickerid), timeframe.period, close[1], lookahead = barmerge.lookahead_on, gaps = barmerge.gaps_on)
source = useHeikinAshi ? HA_close : close[1]

// Trailing Stop Logic
trailingStop = 0.0
iff_1 = src > nz(trailingStop[1], 0) ? src - lossMultiplier : src + lossMultiplier
iff_2 = src < nz(trailingStop[1], 0) and src[1] < nz(trailingStop[1], 0) ? math.min(nz(trailingStop[1]), src + lossMultiplier) : iff_1
trailingStop := src > nz(trailingStop[1], 0) and src[1] > nz(trailingStop[1], 0) ? math.max(nz(trailingStop[1]), src - lossMultiplier) : iff_2

// Position tracking
var int position = na
position := source[1] < nz(trailingStop[1], 0) and source > nz(trailingStop[1], 0) ? 1 : source[1] > nz(trailingStop[1], 0) and source < nz(trailingStop[1], 0) ? -1 : nz(position[1], 0)

// Signal conditions
crossAboveEMA = filter_signals ? barstate.isconfirmed and ta.crossover(source, trailingStop) : barstate.isconfirmed and ta.crossover(source, trailingStop) and MHULL < close
crossBelowEMA = filter_signals ? barstate.isconfirmed and ta.crossover(trailingStop, source) : barstate.isconfirmed and ta.crossover(trailingStop, source) and MHULL > close

buyCondition = source > trailingStop and crossAboveEMA
sellCondition = source < trailingStop and crossBelowEMA

// Signal validation
var int lastSignalBarIndex = na
newSignal = na(lastSignalBarIndex) or (bar_index > lastSignalBarIndex)
validBuyCondition = buyCondition and newSignal
validSellCondition = sellCondition and newSignal

if (validBuyCondition or validSellCondition)
    lastSignalBarIndex := bar_index

// =============================================================================
// TAKE PROFIT LEVELS
// =============================================================================
var float tp1Level = na
var float tp2Level = na
var float tp3Level = na

if (validBuyCondition)
    tp1Level := close * (1 + tp1Distance/100)
    tp2Level := close * (1 + tp2Distance/100)
    tp3Level := close * (1 + tp3Distance/100)

if (validSellCondition)
    tp1Level := close * (1 - tp1Distance/100)
    tp2Level := close * (1 - tp2Distance/100)
    tp3Level := close * (1 - tp3Distance/100)

// Line style
lineStyleValue = switch lineStyle
    "Dashed" => plot.style_linebr
    "Dotted" => plot.style_circles
    "Solid" => plot.style_line
    => plot.style_line

// Plot signals
plotshape(series=validBuyCondition, title="Buy Signal", location=location.belowbar, color=color.blue, style=shape.labelup, text="ðŸ”µBUY", textcolor=color.white)
plotshape(series=validSellCondition, title="Sell Signal", location=location.abovebar, color=color.red, style=shape.labeldown, text="ðŸ”´SELL", textcolor=color.white)

// Plot TP levels
plot(tp1Level, title="TP1", color=color.new(color.blue, 60), linewidth=thicknesSwitch, style=lineStyleValue)
plot(tp2Level, title="TP2", color=color.new(color.blue, 70), linewidth=thicknesSwitch, style=lineStyleValue)
plot(tp3Level, title="TP3", color=color.new(color.blue, 60), linewidth=thicknesSwitch, style=lineStyleValue)

// TP Labels
if (validBuyCondition or validSellCondition)
    label.new(bar_index, tp1Level, text="TP1\n" + str.tostring(tp1Level, format.mintick), color=color.new(color.blue, 50), textcolor=color.white, size=size.small, style=label.style_label_down)
    label.new(bar_index, tp2Level, text="TP2\n" + str.tostring(tp2Level, format.mintick), color=color.new(color.blue, 60), textcolor=color.white, size=size.small, style=label.style_label_down)
    label.new(bar_index, tp3Level, text="TP3\n" + str.tostring(tp3Level, format.mintick), color=color.new(color.blue, 50), textcolor=color.white, size=size.small, style=label.style_label_down)

// =============================================================================
// ZIZOU'S GARBAGE ALGO SECTION
// =============================================================================
// Signal parameters
nbuysell = input.bool(true, 'Buy/Sell Signal', inline = "BSNM", group='BUY/SELL SIGNAL')
nsensitivity = input.float(defval=3, title="Sensitivity", inline = "BSNM", minval=1, maxval=20, group='BUY/SELL SIGNAL')

// Trend Features
LongTrendAverage = input(false, 'Trend Cloud', group='TREND FEATURES')
TrendFollower = input(false, 'Trend Follower', group='TREND FEATURES')
ShowComulus = input(false, 'Comulus Cloud', group='TREND FEATURES')
CirrusCloud = input(false, 'Cirrus Cloud', group='TREND FEATURES')

// Risk Management
levels = input.bool(false, "Show TP/SL Levels", group = "Risk Management", inline = "MMDB2")
lvlLines = input.bool(false, "Show Lines", inline="levels", group = "Risk Management")
linesStyle = input.string("SOLID", "", ["SOLID", "DASHED", "DOTTED"], inline="levels", group = "Risk Management")
lvlDistance = input.int(1, "Distance", 1, inline="levels2", group = "Risk Management")
lvlDecimals = input.int(2, "Decimals", 1, 8, inline="levels2", group = "Risk Management")
atrRisk = input.int(1, "Risk %", 1, group = "Risk Management", inline="levels3")
atrLen = input.int(14, "ATR Length", 1, group = "Risk Management", inline="levels3")

// Support & Resistance
showsr = input(true, title="Show Support & Resistance", group = 'Support & Resistance')
swing_length = input.int(defval=8, title="Sensitivity", group = 'Support & Resistance')
box_width = input.float(defval=4, title="Zone Width", group = 'Support & Resistance')
box_extend_option = input.string("Right", title="Extend Box", options=["Right", "Both"], group = 'Support & Resistance')
res = input.timeframe(title='Time Frame', defval='', group="Support & Resistance")
demand_color = input.color(color.rgb(0,188,212,70), title = 'Support Color', group = 'Support & Resistance')
supply_color = input.color(color.rgb(178,40,51,70), title = 'Resistance Color', group = 'Support & Resistance')

// Supertrend function
supertrend(_close, factor, atrLen) =>
    atr = ta.atr(atrLen)
    upperBand = _close + factor * atr
    lowerBand = _close - factor * atr
    prevLowerBand = nz(lowerBand[1])
    prevUpperBand = nz(upperBand[1])
    lowerBand := lowerBand > prevLowerBand or close[1] < prevLowerBand ? lowerBand : prevLowerBand
    upperBand := upperBand < prevUpperBand or close[1] > prevUpperBand ? upperBand : prevUpperBand
    int direction = na
    float superTrend = na
    prevSuperTrend = superTrend[1]
    if na(atr[1])
        direction := 1
    else if prevSuperTrend == prevUpperBand
        direction := close > upperBand ? -1 : 1
    else
        direction := close < lowerBand ? 1 : -1
    superTrend := direction == -1 ? lowerBand : upperBand
    [superTrend, direction]

// SMA calculations
sma4 = ta.sma(close, 8)
sma5 = ta.sma(close, 9)
sma9 = ta.sma(close, 13)

// Supertrend calculation
[supertrend_line, direction] = supertrend(close, nsensitivity*2, 11)

// ADX calculation
adxlen = 15
dilen = 15

dirmov(len) =>
    up = ta.change(high)
    down = -ta.change(low)
    plusDM = na(up) ? na : up > down and up > 0 ? up : 0
    minusDM = na(down) ? na : down > up and down > 0 ? down : 0
    truerange = ta.rma(ta.tr, len)
    plus = fixnan(100 * ta.rma(plusDM, len) / truerange)
    minus = fixnan(100 * ta.rma(minusDM, len) / truerange)
    [plus, minus]

adx(dilen, adxlen) =>
    [plus, minus] = dirmov(dilen)
    sum = plus + minus
    adx = 100 * ta.rma(math.abs(plus - minus) / (sum == 0 ? 1 : sum), adxlen)
    adx

sig = adx(dilen, adxlen)
sidewaysThreshold = input.int(title='ADX Sideways Threshold', minval=2, defval=15)
bool isSideways = sig < sidewaysThreshold

// Bar coloring
barcolor(close > supertrend_line ? color.new(color.aqua, 0) : color.new(color.red, 0))

// Signal generation
bull = ta.crossover(close, supertrend_line) and close >= sma9
bear = ta.crossunder(close, supertrend_line) and close <= sma9

// Signal plotting
y1 = low - (ta.atr(30) * 2)
y2 = high + (ta.atr(30) * 2)

if bull and nbuysell
    label.new(bar_index, y1, sma4 >= sma5 ? "Strong Buy" : "Buy", xloc.bar_index, yloc.price, color.new(color.aqua, 0), label.style_label_up, color.white, size.normal)

if bear and nbuysell
    label.new(bar_index, y2, sma4 <= sma5 ? "Strong Sell" : "Sell", xloc.bar_index, yloc.price, color.new(color.red, 0), label.style_label_down, color.white, size.normal)

// =============================================================================
// TREND FOLLOWING FEATURES
// =============================================================================
// Range filter
smoothrng(x, t, m) =>
    wper = t * 2 - 1
    avrng = ta.ema(math.abs(x - x[1]), t)
    smoothrng = ta.ema(avrng, wper) * m
    smoothrng

smrng = smoothrng(close, 22, 6)

rngfilt(x, r) =>
    rngfilt = x
    rngfilt := x > nz(rngfilt[1]) ? x - r < nz(rngfilt[1]) ? nz(rngfilt[1]) : x - r : x + r > nz(rngfilt[1]) ? nz(rngfilt[1]) : x + r
    rngfilt

filt = rngfilt(close, smrng)

upward = 0.0
upward := filt > filt[1] ? nz(upward[1]) + 1 : filt < filt[1] ? 0 : nz(upward[1])
downward = 0.0
downward := filt < filt[1] ? nz(downward[1]) + 1 : filt > filt[1] ? 0 : nz(downward[1])

filtcolor = upward > 0 ? color.new(color.aqua, 50) : downward > 0 ? color.new(color.red, 50) : color.new(color.purple, 0)
plot(TrendFollower ? filt : na, color=filtcolor, linewidth=1, title='Trend Tracer')

// Trend Cloud
tclength = 600
hullma = ta.wma(2*ta.wma(close, tclength/2)-ta.wma(close, tclength), math.floor(math.sqrt(tclength)))
plot(LongTrendAverage ? hullma : na, 'Trend Cloud', linewidth=4, color=close[8] > hullma ? color.new(color.aqua, 65) : color.new(color.red, 65))

// =============================================================================
// SUPPORT AND RESISTANCE
// =============================================================================
atr567 = ta.atr(50)
swing_high = ta.pivothigh(high, swing_length, swing_length)
swing_low = ta.pivotlow(low, swing_length, swing_length)

// Basic S/R zones (simplified version)
if not na(swing_high) and showsr
    box.new(bar_index - swing_length, swing_high - atr567 * box_width/10, bar_index + 20, swing_high + atr567 * box_width/10, 
             border_color=supply_color, bgcolor=supply_color, extend=box_extend_option == "Right" ? extend.right : extend.both)

if not na(swing_low) and showsr
    box.new(bar_index - swing_length, swing_low - atr567 * box_width/10, bar_index + 20, swing_low + atr567 * box_width/10, 
             border_color=demand_color, bgcolor=demand_color, extend=box_extend_option == "Right" ? extend.right : extend.both)

// =============================================================================
// ALERTS
// =============================================================================
alertcondition(validBuyCondition, title="Buy Alert", message="Buy signal generated")
alertcondition(validSellCondition, title="Sell Alert", message="Sell signal generated")
alertcondition(bull, title='Zizou Buy Signal', message = "BUY")
alertcondition(bear, title='Zizou Sell Signal', message = "SELL")