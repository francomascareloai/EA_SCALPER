/*
   Generated by EX4-TO-MQ4 decompiler V4.0.224.1 []
   Website: http://purebeam.biz
   E-mail : purebeam@gmail.com
*/
#property copyright "Copyright © 2005, MetaQuotes Software Corp."
#property link      "http://www.metaquotes.net/"
#property show_inputs

#include <stdlib.mqh>

string gs_76 = "Version 4.2";
extern bool trade = TRUE;
extern double MinUr = 4.0;
extern double Lots = 0.01;
extern int LotsPercent = 50;
extern double max_lots = 1.95;
extern int TakeProfit = 50;
extern int StopLoss = 10;
extern double FixTP = 1.0;
extern double FixSL = 7.0;
extern bool whc = FALSE;
extern bool new = TRUE;
extern int NTrades = 3;
extern bool sound = FALSE;
int gi_156 = 10;
bool gi_160 = TRUE;
bool gi_164 = FALSE;
double gd_168 = 0.0;
double g_slippage_176 = 1.0;
string gs_184 = "expert.wav";
double g_point_192;
string gs_dummy_200;
string gs_dummy_208;
int g_fontsize_216;
int g_fontsize_220;
double gd_224;
double gd_232;
int g_magic_240;
int g_digits_244;
int gi_248;
double gd_252;
int g_count_260;
int g_ticket_264;
int g_pos_268;
string gs_dummy_272;
string gs_dummy_280;
string gs_dummy_288;
string gs_296;
string gs_dummy_304;
double gd_unused_312 = 0.0;
double g_price_320;
double gd_328;
double g_price_344;
double g_price_352;
int gi_unused_360 = 32768;
int g_color_364 = Green;
double gd_368;
double gd_376;
double gd_384;
double g_price_392;
double g_price_400;
string gs_dummy_408;
string gs_416;
double g_bars_424;
double gd_432;

int init() {
   return (0);
}

int start() {
   double l_price_0;
   double l_price_8;
   string l_dbl2str_16;
   string ls_24;
   int li_32 = GetTickCount();
   g_digits_244 = Digits;
   if (g_digits_244 == 3) g_digits_244 = 2;
   if (g_digits_244 == 5) g_digits_244 = 4;
   g_point_192 = Point;
   if (Point == 0.001) g_point_192 = 0.01;
   if (Point == 0.00001) g_point_192 = 0.0001;
   int li_36 = MarketInfo(Symbol(), MODE_STOPLEVEL);
   if (Digits == 3 || Digits == 5) li_36 /= 10;
   MathSrand(TimeLocal());
   g_magic_240 = MathRand();
   if (li_36 > TakeProfit && TakeProfit != 0) {
      TakeProfit = li_36;
      l_dbl2str_16 = DoubleToStr(TakeProfit, g_digits_244);
      Print("TakeProfit less than possible. trying to change it to " + l_dbl2str_16);
   }
   if (li_36 > StopLoss && StopLoss != 0) {
      StopLoss = li_36;
      l_dbl2str_16 = DoubleToStr(StopLoss, g_digits_244);
      Print("StopLoss less than possible. trying to change it to " + l_dbl2str_16);
   }
   getsizelot();
   while (IsStopped() == FALSE) {
      gs_416 = gs_76 
      + "\n";
      rash();
      proverki();
      gs_416 = gs_416 + "The Minimal Level of Reaction=" + DoubleToStr(MinUr, 1) + " Dynamic=" + DoubleToStr(gd_224, 1) + " spread of MT4=" + DoubleToStr(gd_232, 1) + " Reaction=" + DoubleToStr(gd_224 + gd_232, 1) 
      + "\n";
      gs_416 = gs_416 + "Aggressive SL=" + DoubleToStr(StopLoss, 0) + "  Aggressive TP=" + DoubleToStr(TakeProfit, 0) 
      + "\n";
      if (trade && g_price_352 > 0.0) {
         g_count_260 = 0;
         if (OrdersTotal() > 0) {
            for (g_pos_268 = 0; g_pos_268 < OrdersTotal(); g_pos_268++) {
               OrderSelect(g_pos_268, SELECT_BY_POS, MODE_TRADES);
               if (OrderSymbol() == Symbol() && OrderMagicNumber() == g_magic_240) g_count_260++;
            }
         }
         if (g_price_320 != g_price_392 && g_price_344 != g_price_400) {
            if (GetTickCount() - li_32 > 1000 * gi_156) {
               g_price_392 = g_price_320;
               g_price_400 = g_price_344;
               li_32 = GetTickCount();
            }
            if (g_count_260 < NTrades && MathAbs(gd_328) >= gd_224 + gd_232) {
               l_price_0 = 0;
               l_price_8 = 0;
               getsizelot();
               if (gd_328 >= gd_224) {
                  if (whc != TRUE && TakeProfit > 0) l_price_0 = Ask + TakeProfit * g_point_192;
                  if (whc != TRUE && StopLoss > 0) l_price_8 = Bid - StopLoss * g_point_192;
                  g_ticket_264 = OrderSend(Symbol(), OP_BUY, Lots, Ask, g_slippage_176, l_price_8, l_price_0, "Newest EA || Westernpips.com || skype:Westernpips.com", g_magic_240, 0, MediumBlue);
                  Print("buy on the price=" + Ask + " with a lot=" + NormalizeDouble(Lots, 2) + " spread of SaxoBank=" + NormalizeDouble(gd_168, 1) + " spread of MT4=" + NormalizeDouble(gd_232, 2) +
                     " SL=" + l_price_8 + " with TP=" + l_price_0 + " reaction level =" + DoubleToStr(gd_224 + gd_232, 1));
                  if (g_ticket_264 > 0) {
                     if (OrderSelect(g_ticket_264, SELECT_BY_TICKET, MODE_TRADES)) Print("BUY order opened : ", ErrorDescription(OrderOpenPrice()));
                     PlaySound(gs_184);
                  } else Print("Error opening BUY order : ", ErrorDescription(GetLastError()));
               }
               if (gd_328 <= -gd_224) {
                  if (whc != TRUE && TakeProfit > 0) l_price_0 = Bid - TakeProfit * g_point_192;
                  if (whc != TRUE && StopLoss > 0) l_price_8 = Ask + StopLoss * g_point_192;
                  g_ticket_264 = OrderSend(Symbol(), OP_SELL, Lots, Bid, g_slippage_176, l_price_8, l_price_0, "Newest EA || Westernpips.com || skype:Westernpips.com", g_magic_240, 0, Red);
                  Print("sell on the price=" + Bid + " with a lot=" + NormalizeDouble(Lots, 2) + " spread of SaxoBank=" + NormalizeDouble(gd_168, 1) + " spread of MT4=" + NormalizeDouble(gd_232, 2) +
                     " SL=" + l_price_8 + " with TP=" + l_price_0 + " reaction level =" + DoubleToStr(gd_224 + gd_232, 1));
                  if (g_ticket_264 > 0) {
                     if (OrderSelect(g_ticket_264, SELECT_BY_TICKET, MODE_TRADES)) Print("SELL order opened : ", OrderOpenPrice());
                     PlaySound(gs_184);
                  } else Print("Error opening SELL order : ", ErrorDescription(GetLastError()));
               }
            }
            OBJ();
            if (whc == TRUE && TakeProfit > 0) {
               tppModifyBuy();
               tppModifySell();
            }
            if (whc == TRUE && StopLoss > 0) {
               slModifyBuy();
               slModifySell();
            }
         }
      }
      if (GetTickCount() - li_32 > 1000 * gi_156) {
         g_price_392 = g_price_320;
         g_price_400 = g_price_344;
         li_32 = GetTickCount();
      }
      if (FixTP != 0.0)
         if (MathAbs(gd_328) <= (Ask - Bid) / g_point_192) TrailingTPs();
      if (FixSL != 0.0 && MathAbs(gd_328) < gd_232) TrailingSLs();
      if (trade) ls_24 = "Trading is allowed";
      else ls_24 = "Trading is denied";
      gs_416 = gs_416 + "Programmed TP=" + DoubleToStr(gd_432, 1) 
      + "\n";
      gs_416 = gs_416 + "Programmed SL=" + DoubleToStr(FixSL, 1) 
      + "\n";
      gs_416 = gs_416 + "Percent of Deposit=" + DoubleToStr(LotsPercent, 1) 
      + "\n";
      gs_416 = gs_416 + "Working Lot=" + DoubleToStr(Lots, 2) 
      + "\n";
      gs_416 = gs_416 
         + "\n" 
         + ls_24 
      + "\n";
      Comment(gs_416);
      gi_248++;
      Sleep(300);
   }
   return (0);
}

int deinit() {
   ObjectDelete("BidMT");
   ObjectDelete("BidGL");
   ObjectDelete("RMTGL");
   ObjectDelete("RMTGLsig");
   ObjectDelete("bid_saxo");
   ObjectDelete("bid_mt");
   ObjectDelete("bid label");
   ObjectDelete("ask label");
   Comment("");
   return (0);
}

int OBJ() {
   string ls_unused_0;
   if (ObjectFind("bid_saxo") != 0) {
      ObjectCreate("bid_saxo", OBJ_HLINE, 0, TimeCurrent(), g_price_320);
      ObjectSet("bid_saxo", OBJPROP_COLOR, Yellow);
      ObjectSet("bid_saxo", OBJPROP_STYLE, STYLE_SOLID);
   } else ObjectMove("bid_saxo", 0, TimeCurrent(), g_price_320);
   if (gi_164) {
      if (ObjectFind("bid label") != 0) {
         ObjectCreate("bid label", OBJ_TEXT, 0, Time[0], Low[0] - 10.0 * g_point_192);
         ObjectSetText("bid label", DoubleToStr(gd_328, 1), g_fontsize_220, "Arial", Red);
      } else {
         if (gd_328 >= 0.0) ObjectSetText("bid label", DoubleToStr(gd_328, 1), g_fontsize_220, "Arial", Lime);
         else ObjectSetText("bid label", DoubleToStr(gd_328, 1), g_fontsize_220, "Arial", Red);
         ObjectMove("bid label", 0, Time[0], Low[0] - 10.0 * g_point_192);
      }
   }
   if (!new) {
      if (ObjectFind("ask label") != 0) {
         ObjectCreate("ask label", OBJ_TEXT, 0, Time[0], High[0] + 10.0 * g_point_192);
         ObjectSetText("ask label", DoubleToStr(gd_168, 1), 8, "Arial", Red);
      } else {
         ObjectSetText("ask label", DoubleToStr(gd_168, 1), 8, "Arial", Red);
         ObjectMove("ask label", 0, Time[0], High[0] + 10.0 * g_point_192);
      }
   }
   if (ObjectFind("RMTGL") == -1) {
      ObjectCreate("RMTGL", OBJ_LABEL, 0, 0, 0);
      ObjectSet("RMTGL", OBJPROP_CORNER, 1);
      ObjectSet("RMTGL", OBJPROP_XDISTANCE, 15);
      ObjectSet("RMTGL", OBJPROP_YDISTANCE, 0);
   }
   ObjectSetText("RMTGL", DoubleToStr(gd_328, 1), g_fontsize_216, "Arial Black", g_color_364);
   if (ObjectFind("bid_mt") != 0) {
      if (new) ObjectCreate("bid_mt", OBJ_HLINE, 0, TimeCurrent(), Bid + (Ask - Bid) / 2.0);
      else ObjectCreate("bid_mt", OBJ_HLINE, 0, TimeCurrent(), g_price_344);
      ObjectSet("bid_mt", OBJPROP_COLOR, Red);
      ObjectSet("bid_mt", OBJPROP_STYLE, STYLE_SOLID);
   } else {
      if (new) ObjectMove("bid_mt", 0, TimeCurrent(), Bid + (Ask - Bid) / 2.0);
      else ObjectMove("bid_mt", 0, TimeCurrent(), g_price_344);
   }
   return (0);
}

void TrailingTPs() {
   for (int l_pos_0 = 0; l_pos_0 < OrdersTotal(); l_pos_0++) {
      if (OrderSelect(l_pos_0, SELECT_BY_POS, MODE_TRADES)) {
         if (OrderMagicNumber() == g_magic_240) {
            if (OrderType() == OP_BUY) {
               gd_368 = Bid - OrderOpenPrice();
               gd_384 = gd_432 * g_point_192;
               gd_384 = NormalizeDouble(gd_384, g_digits_244);
               if (gd_368 >= gd_384) {
                  OrderClose(OrderTicket(), OrderLots(), Bid, g_slippage_176);
                  return;
               }
            }
            if (OrderType() == OP_SELL) {
               gd_376 = OrderOpenPrice() - Ask;
               gd_384 = gd_432 * g_point_192;
               gd_384 = NormalizeDouble(gd_384, g_digits_244);
               if (gd_376 >= gd_384) {
                  OrderClose(OrderTicket(), OrderLots(), Ask, g_slippage_176);
                  return;
               }
            }
         }
      }
   }
}

void TrailingSLs() {
   for (int l_pos_0 = 0; l_pos_0 < OrdersTotal(); l_pos_0++) {
      if (OrderSelect(l_pos_0, SELECT_BY_POS, MODE_TRADES)) {
         if (OrderMagicNumber() == g_magic_240) {
            if (OrderType() == OP_BUY) {
               gd_368 = OrderOpenPrice() - Bid;
               gd_368 = NormalizeDouble(gd_368, g_digits_244);
               gd_384 = FixSL * g_point_192;
               gd_384 = NormalizeDouble(gd_384, g_digits_244);
               if (gd_368 >= gd_384) {
                  OrderClose(OrderTicket(), OrderLots(), Bid, g_slippage_176);
                  return;
               }
            }
            if (OrderType() == OP_SELL) {
               gd_376 = Ask - OrderOpenPrice();
               gd_376 = NormalizeDouble(gd_376, g_digits_244);
               gd_384 = FixSL * g_point_192;
               gd_384 = NormalizeDouble(gd_384, g_digits_244);
               if (gd_376 >= gd_384) {
                  OrderClose(OrderTicket(), OrderLots(), Ask, g_slippage_176);
                  return;
               }
            }
         }
      }
   }
}

int tppModifySell() {
   double l_price_0;
   if (OrdersTotal() > 0) {
      for (int l_pos_8 = 0; l_pos_8 < OrdersTotal(); l_pos_8++) {
         OrderSelect(l_pos_8, SELECT_BY_POS, MODE_TRADES);
         if (OrderType() == OP_SELL) {
            if (OrderMagicNumber() == g_magic_240) {
               l_price_0 = NormalizeDouble(OrderOpenPrice(), g_digits_244) - TakeProfit * g_point_192;
               if (NormalizeDouble(OrderTakeProfit(), g_digits_244) != l_price_0) OrderModify(OrderTicket(), OrderOpenPrice(), OrderStopLoss(), l_price_0, 0, Red);
            }
         }
      }
   }
   return (0);
}

int tppModifyBuy() {
   double l_price_0;
   if (OrdersTotal() > 0) {
      for (int l_pos_8 = 0; l_pos_8 < OrdersTotal(); l_pos_8++) {
         OrderSelect(l_pos_8, SELECT_BY_POS, MODE_TRADES);
         if (OrderType() == OP_BUY) {
            if (OrderMagicNumber() == g_magic_240) {
               l_price_0 = NormalizeDouble(OrderOpenPrice(), g_digits_244) + TakeProfit * g_point_192;
               if (NormalizeDouble(OrderTakeProfit(), g_digits_244) != l_price_0) OrderModify(OrderTicket(), OrderOpenPrice(), OrderStopLoss(), l_price_0, 0, Red);
            }
         }
      }
   }
   return (0);
}

int slModifySell() {
   double l_price_0;
   if (OrdersTotal() > 0) {
      for (int l_pos_8 = 0; l_pos_8 < OrdersTotal(); l_pos_8++) {
         OrderSelect(l_pos_8, SELECT_BY_POS, MODE_TRADES);
         if (OrderType() == OP_SELL) {
            if (OrderMagicNumber() == g_magic_240) {
               l_price_0 = NormalizeDouble(OrderOpenPrice(), g_digits_244) + StopLoss * g_point_192;
               if (NormalizeDouble(OrderStopLoss(), g_digits_244) != l_price_0) OrderModify(OrderTicket(), OrderOpenPrice(), l_price_0, OrderTakeProfit(), 0, Red);
            }
         }
      }
   }
   return (0);
}

int slModifyBuy() {
   double l_price_0;
   if (OrdersTotal() > 0) {
      for (int l_pos_8 = 0; l_pos_8 < OrdersTotal(); l_pos_8++) {
         OrderSelect(l_pos_8, SELECT_BY_POS, MODE_TRADES);
         if (OrderType() == OP_BUY) {
            if (OrderMagicNumber() == g_magic_240) {
               l_price_0 = NormalizeDouble(OrderOpenPrice(), g_digits_244) - StopLoss * g_point_192;
               if (NormalizeDouble(OrderStopLoss(), g_digits_244) != l_price_0) OrderModify(OrderTicket(), OrderOpenPrice(), l_price_0, OrderTakeProfit(), 0, Red);
            }
         }
      }
   }
   return (0);
}

int rash() {
   string ls_4;
   int li_12;
   string ls_16;
   int l_file_0 = FileOpen(Symbol() + "_Quote.txt", FILE_CSV|FILE_READ);
   if (l_file_0 > 0) {
      ls_4 = FileReadString(l_file_0);
      li_12 = StringFind(ls_4, ",", 0);
      ls_4 = StringSubstr(ls_4, 0, li_12) + "." + StringSubstr(ls_4, li_12 + 1, StringLen(ls_4));
      g_price_320 = StrToDouble(ls_4);
      ls_16 = FileReadString(l_file_0);
      li_12 = StringFind(ls_16, ",", 0);
      ls_16 = StringSubstr(ls_16, 0, li_12) + "." + StringSubstr(ls_16, li_12 + 1, StringLen(ls_16));
      g_price_344 = StrToDouble(ls_16);
      FileClose(l_file_0);
   }
   RefreshRates();
   gd_232 = (NormalizeDouble(Ask, Digits) - NormalizeDouble(Bid, Digits)) / g_point_192;
   if (new) {
      g_price_320 += (g_price_344 - g_price_320) / 2.0;
      gd_168 = 0;
      g_price_352 = g_price_320;
      gd_328 = (g_price_320 - NormalizeDouble(Bid + (Ask - Bid) / 2.0, Digits)) / g_point_192;
   } else {
      gd_328 = (g_price_320 - NormalizeDouble(Bid, Digits)) / g_point_192;
      gd_168 = (g_price_344 - g_price_320) / g_point_192;
   }
   if (MathAbs(gd_328) >= 100.0) {
      gd_328 = 0;
      Sleep(8000);
   }
   return (0);
}

int proverki() {
   gd_224 = MinUr;
   if (!new && gi_160) {
      if (gd_168 > 4.0) {
         if (gd_168 > gd_232) gd_224 = MinUr + (gd_168 - gd_232) / 2.0;
         if (2.0 * MathAbs(gd_232) < MathAbs(gd_168)) gd_224 = MinUr + (gd_168 - gd_232);
      }
   }
   gd_432 = FixTP;
   if (gd_232 < MathAbs(gd_328)) gd_432 = TakeProfit;
   if (gd_224 < MinUr) gd_224 = MinUr;
   if (gd_328 > 0.0) gi_unused_360 = 16711680;
   if (gd_328 <= 0.0) gi_unused_360 = 255;
   g_fontsize_216 = 14;
   g_fontsize_220 = 8;
   g_color_364 = Red;
   if (MathAbs(gd_328) >= gd_224 + gd_232) {
      g_fontsize_216 = 26;
      g_fontsize_220 = 16;
      g_color_364 = Lime;
      if (gd_328 >= gd_224) gs_296 = "BUY " + DoubleToStr(Ask, g_digits_244);
      else gs_296 = "SELL " + DoubleToStr(Bid, g_digits_244);
      if (sound == TRUE && g_bars_424 != Bars) g_bars_424 = Bars;
   }
   if (sound) {
      gs_416 = gs_416 + "Voice alert is enabled" 
      + "\n";
   }
   return (0);
}

int getsizelot() {
   double ld_0;
   double ld_8;
   double ld_16;
   int li_24;
   if (LotsPercent > 0) {
      ld_0 = NormalizeDouble(NormalizeDouble(AccountEquity() / MarketInfo(Symbol(), MODE_MARGINREQUIRED), 2) * LotsPercent / 100.0, 2);
      ld_8 = ld_0;
      li_24 = ld_8 / MarketInfo(Symbol(), MODE_LOTSTEP);
      ld_16 = li_24 * MarketInfo(Symbol(), MODE_LOTSTEP);
      gd_252 = ld_16;
      if (gd_252 < MarketInfo(Symbol(), MODE_MINLOT)) gd_252 = MarketInfo(Symbol(), MODE_MINLOT);
      if (gd_252 > MarketInfo(Symbol(), MODE_MAXLOT)) gd_252 = MarketInfo(Symbol(), MODE_MAXLOT);
      Lots = gd_252;
   }
   if (Lots > max_lots) Lots = max_lots;
   return (0);
}