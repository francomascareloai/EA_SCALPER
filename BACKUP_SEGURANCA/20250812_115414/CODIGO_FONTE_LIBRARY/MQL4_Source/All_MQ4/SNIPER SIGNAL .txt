//+------------------------------------------------------------------+
//|                                                      SniperSignal.mq4 |
//|                        Custom Indicator for MT4                  |
//+------------------------------------------------------------------+
#property indicator_separate_window
#property indicator_buffers 3
#property indicator_color1 Blue
#property indicator_color2 Red
#property indicator_color3 Gray

// Input parameters
input int lengthWT = 21;
input int channelLength = 9;
input int avgLength = 12;
input int lengthSMA = 100;

// Indicator buffers
double wt1Buffer[];
double wt2Buffer[];
double smaBuffer[];

//+------------------------------------------------------------------+
//| Custom indicator initialization function                         |
//+------------------------------------------------------------------+
int OnInit()
  {
   // Indicator buffers mapping
   SetIndexBuffer(0, wt1Buffer);
   SetIndexBuffer(1, wt2Buffer);
   SetIndexBuffer(2, smaBuffer);

   // Set indicator labels
   IndicatorShortName("Sniper Signal");
   SetIndexLabel(0, "WT1");
   SetIndexLabel(1, "WT2");
   SetIndexLabel(2, "SMA 100");

   return(INIT_SUCCEEDED);
  }
//+------------------------------------------------------------------+
//| WaveTrend calculation function                                   |
//+------------------------------------------------------------------+
void CalculateWaveTrend(int lengthWT, int channelLength, int avgLength, int barsCount)
  {
   double miHlc3, esa, ci, absDiff;
   double wt1, wt2;

   for(int i = 0; i < barsCount; i++)
     {
      // HLC3 calculation
      miHlc3 = (High[i] + Low[i] + Close[i]) / 3.0;

      // ESA (EMA of HLC3)
      esa = iMA(NULL, 0, lengthWT, 0, MODE_EMA, PRICE_MEDIAN, i);

      // CI (WTMO component)
      absDiff = MathAbs(miHlc3 - esa);
      ci = (miHlc3 - esa) / (0.015 * iMAOnArray(absDiff, 0, lengthWT, 0, MODE_EMA, i));

      // WT1 (EMA of CI)
      wt1 = iMAOnArray(ci, 0, channelLength, 0, MODE_EMA, i);

      // WT2 (SMA of WT1)
      wt2 = iMAOnArray(wt1, 0, avgLength, 0, MODE_SMA, i);

      // Store results in buffers
      wt1Buffer[i] = wt1;
      wt2Buffer[i] = wt2;
     }
  }
//+------------------------------------------------------------------+
//| Simple Moving Average calculation                                |
//+------------------------------------------------------------------+
void CalculateSMA(int lengthSMA, int barsCount)
  {
   for(int i = 0; i < barsCount; i++)
     {
      smaBuffer[i] = iMA(NULL, 0, lengthSMA, 0, MODE_SMA, PRICE_CLOSE, i);
     }
  }
//+------------------------------------------------------------------+
//| Custom indicator iteration function                              |
//+------------------------------------------------------------------+
int OnCalculate(const int rates_total,      // size of the price data
                const int prev_calculated,  // bars calculated in the previous run
                const datetime &time[],     // Time
                const double &open[],       // Open price
                const double &high[],       // High price
                const double &low[],        // Low price
                const double &close[],      // Close price
                const long &tick_volume[],  // Tick Volume
                const long &volume[],       // Real Volume
                const int &spread[])        // Spread
  {
   int limit = rates_total - prev_calculated;
   
   if(prev_calculated > 0)
      limit++;
   
   // Calculate WTMO and SMA for all bars
   CalculateWaveTrend(lengthWT, channelLength, avgLength, limit);
   CalculateSMA(lengthSMA, limit);

   // Loop through bars to check conditions and place arrows for Buy/Sell signals
   for(int i = 0; i < limit; i++)
     {
      bool buyCondition = (wt1Buffer[i] > wt2Buffer[i] && wt1Buffer[i] < -5 && Close[i] > smaBuffer[i]);
      bool sellCondition = (wt1Buffer[i] < wt2Buffer[i] && wt1Buffer[i] > 5 && Close[i] < smaBuffer[i]);

      if(buyCondition)
         ObjectCreate(0, "BuyArrow" + IntegerToString(i), OBJ_ARROW, 0, Time[i], Low[i] - 10 * Point);
      if(sellCondition)
         ObjectCreate(0, "SellArrow" + IntegerToString(i), OBJ_ARROW, 0, Time[i], High[i] + 10 * Point);
     }

   return(rates_total);
  }
//+------------------------------------------------------------------+
