
//+------------------------------------------------------------------+
//|                                               Shved Supply EA   |
//|                                       Generated by ChatGPT       |
//+------------------------------------------------------------------+
#include <Trade\Trade.mqh>
#include <Indicators\Indicators.mqh>

input double RiskPercent = 1.0;
input ENUM_TIMEFRAMES TimeFrame = PERIOD_H1;
input bool zone_show_weak = false;
input bool zone_show_untested = false;
input bool zone_show_turncoat = true;
input bool zone_fuzzfactor = true;
input bool EnableAutoTrading = true;
input bool UseNewsFilter = false;
input bool AllowMultipleTrades = false;
input bool UseFixedLot = true;
input double FixedLotSize = 0.1;
input bool UseAutoSLTP = true;
input double SL_Pips = 30;
input double TP_Pips = 60;

CTrade trade;

int OnInit()
{
    return INIT_SUCCEEDED;
}

void OnTick()
{
    if (!EnableAutoTrading) return;

    static datetime lastTradeTime = 0;
    datetime currentTime = TimeCurrent();
    if (!AllowMultipleTrades && (currentTime - lastTradeTime < 60)) return;

    if (PositionsTotal() > 0 && !AllowMultipleTrades)
        return;

    double ask = SymbolInfoDouble(_Symbol, SYMBOL_ASK);
    double bid = SymbolInfoDouble(_Symbol, SYMBOL_BID);

    double demandPrice = GetDemandZone();
    double supplyPrice = GetSupplyZone();

    double lotSize = UseFixedLot ? FixedLotSize : CalculateLotSize();

    if (demandPrice > 0 && bid <= demandPrice)
    {
        if (trade.Buy(lotSize, _Symbol, ask, 0, 0, "Buy from demand"))
            lastTradeTime = currentTime;
    }

    if (supplyPrice > 0 && ask >= supplyPrice)
    {
        if (trade.Sell(lotSize, _Symbol, bid, 0, 0, "Sell from supply"))
            lastTradeTime = currentTime;
    }
}

double GetDemandZone()
{
    // Placeholder - connect to indicator buffer if needed
    return iCustom(_Symbol, TimeFrame, "Shved Supply and Demand v1.5 BT", 0, 0);
}

double GetSupplyZone()
{
    // Placeholder - connect to indicator buffer if needed
    return iCustom(_Symbol, TimeFrame, "Shved Supply and Demand v1.5 BT", 1, 0);
}

double CalculateLotSize()
{
    double balance = AccountInfoDouble(ACCOUNT_BALANCE);
    double risk = balance * RiskPercent / 100.0;
    double stopLoss = SL_Pips * _Point;
    double tickValue;
    SymbolInfoDouble(_Symbol, SYMBOL_TRADE_TICK_VALUE, tickValue);
    double lot = risk / (stopLoss * tickValue);
    return NormalizeDouble(lot, 2);
}
