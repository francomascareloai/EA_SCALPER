//@version=6
indicator("WIN FOREVER", shorttitle="WIN FOREVER", overlay=true, max_bars_back=500, max_boxes_count=500, max_lines_count=500, max_labels_count=500)

// ====== 1. QUANTUM EDGE PRO+ INPUTS ====== //
// Timeframes
res1 = input.timeframe(title="Short-Term TF", defval="15")
res2 = input.timeframe(title="Medium-Term TF", defval="240")
res3 = input.timeframe(title="Long-Term TF", defval="1D")

// Trend Indicators
emaFast = input.int(title="Fast EMA", defval=9, minval=1)
emaSlow = input.int(title="Slow EMA", defval=21, minval=1)
emaTrend = input.int(title="Trend EMA", defval=50, minval=1)
stLength = input.int(title="SuperTrend ATR Period", defval=10, minval=1)
stFactor = input.float(title="SuperTrend Multiplier", defval=3.0, minval=0.1)

// Momentum Indicators
rsiLength = input.int(title="RSI Length", defval=14, minval=1)
stochLength = input.int(title="Stochastic Length", defval=14, minval=1)
macdFast = input.int(title="MACD Fast", defval=12, minval=1)
macdSlow = input.int(title="MACD Slow", defval=26, minval=1)
macdSignal = input.int(title="MACD Signal", defval=9, minval=1)

// Volume Analysis
volumeThreshold = input.float(title="Volume Threshold", defval=1.5, minval=1.0, maxval=5.0, step=0.1)
obvLength = input.int(title="OBV Smoothing", defval=20, minval=1)

// Risk Management
riskPercent = input.float(title="Risk % per Trade", defval=1.0, minval=0.1, maxval=100, step=0.1)

// ====== 2. ORCA ORDER FLOW INPUTS ====== //
lookback = input.int(20, minval=5, title="Order Flow Lookback")
poc_d = input.bool(true, "Show POC", inline="poc")
poc_col = input.color(color.orange, "", inline="poc")
lbl_size = input.string("Small", "Info Size", ["Normal", "Small", "Tiny", "Auto"])
col_up = input.color(color.teal, "Bullish Color", inline="color")
col_dn = input.color(#ffffff, "Bearish Color", inline="color")

// ====== 3. CORE CALCULATIONS (BOTH INDICATORS) ====== //
// Quantum Edge Calculations
emaFastLine = ta.ema(close, emaFast)
emaSlowLine = ta.ema(close, emaSlow)
emaTrendLine = ta.ema(close, emaTrend)
[supertrendLine, supertrendDir] = ta.supertrend(stFactor, stLength)
superTrendBullish = supertrendDir < 0
macdLine = ta.ema(close, macdFast) - ta.ema(close, macdSlow)
macdSignalLine = ta.ema(macdLine, macdSignal)
macdHist = macdLine - macdSignalLine
rsi = ta.rsi(close, rsiLength)
stochK = ta.sma(100 * (close - ta.lowest(low, stochLength)) / (ta.highest(high, stochLength) - ta.lowest(low, stochLength)), 3)
stochD = ta.sma(stochK, 3)
avgVolume = ta.sma(volume, 20)
volumeSpike = volume > avgVolume[1] * volumeThreshold
obv = ta.obv
obvTrendUp = ta.ema(obv, obvLength) > ta.ema(obv, obvLength)[1]
atr = ta.atr(14)
liquidityHigh = ta.highest(high, 5)[1]
liquidityLow = ta.lowest(low, 5)[1]
isLiquiditySweep = high > liquidityHigh and close < liquidityHigh ? "Bear Trap" : 
                  low < liquidityLow and close > liquidityLow ? "Bull Trap" : "None"

// Orca Order Flow Calculations
time_ = timeframe.in_seconds("")/60
div = time_ <= 15 ? time_ : time_ >= 60 ? 30 : 20

// Arrays for Order Flow visualization
var hl = array.new_line(lookback)
var labels = array.new_label(lookback)
var labels_b = array.new_label(lookback)
var labels_s = array.new_label(lookback)
var labels_p = array.new_label(lookback)
var line_poc = array.new_line(lookback)
var vol_bin = array.new<float>()

float buyers = 0
float sellers = 0
float tot = 0
float buy_per = 0
float sell_per = 0

// Order Flow Delta Calculation
array<float> req = request.security_lower_tf('', str.tostring(int(time_/div)), volume)
array<float> price = request.security_lower_tf('', str.tostring(int(time_/div)), close)
array<float> delta_sign = request.security_lower_tf('', str.tostring(int(time_/div)), (close > open ? volume : -volume))

if delta_sign.size() > 0
    for i = 0 to delta_sign.size() - 1 
        value = delta_sign.get(i)
        buyers := buyers + (value > 0 ? value : 0)
        sellers := sellers + (value < 0 ? -value : 0)
        tot := buyers + sellers
        buy_per := (buyers / tot) * 100
        sell_per := (sellers / tot) * 100

// ====== 4. SCORING SYSTEM ====== //
// Trend Components (30%)
emaScore = emaFastLine > emaSlowLine ? 10 : -10
superTrendScore = superTrendBullish ? 15 : -15
kijun = ta.sma(ta.highest(high, 26) + ta.lowest(low, 26), 1) / 2
ichimokuScore = close > kijun ? 5 : -5

// Momentum Components (30%)
rsiScore = rsi > 60 ? 10 : rsi < 40 ? -10 : 0
macdScore = macdHist > 0 ? 10 : -10
stochScore = stochK > stochD ? 5 : -5

// Volume Components (20%)
obvScore = obvTrendUp ? 10 : -10
volumeSpikeScore = volumeSpike ? 10 : 0

// Multi-Timeframe Components (20%)
hClose1 = request.security(syminfo.tickerid, res1, close)
hOpen1 = request.security(syminfo.tickerid, res1, open)
hClose2 = request.security(syminfo.tickerid, res2, close)
hOpen2 = request.security(syminfo.tickerid, res2, open)
mtfScore = hClose1 > hOpen1 and hClose2 > hOpen2 ? 20 : -20

// Final Score Calculation
smartScore = (emaScore + superTrendScore + ichimokuScore + rsiScore + 
             macdScore + stochScore + obvScore + volumeSpikeScore + mtfScore)
normalizedScore = math.min(100, math.max(0, smartScore + 50))

// ====== 5. VISUAL ELEMENTS ====== //
// Plot Trend Indicators
plot(emaFastLine, "Fast EMA", color.new(color.blue, 0), 2)
plot(emaSlowLine, "Slow EMA", color.new(color.red, 0), 2)
plot(emaTrendLine, "Trend EMA", color.new(color.purple, 0), 2)
plot(supertrendLine, "SuperTrend", superTrendBullish ? color.new(color.green, 0) : color.new(color.red, 0), 2)

// Plot Market Strength Histogram
plot(normalizedScore - 50, "Market Strength", 
     color=normalizedScore > 70 ? color.new(color.green, 0) : 
          normalizedScore < 30 ? color.new(color.red, 0) : 
          color.new(color.gray, 0), 
     style=plot.style_histogram, linewidth=2)

// Plot MACD Histogram
plot(macdHist, "MACD Histogram", 
     macdHist >= 0 ? (macdHist > macdHist[1] ? color.new(color.lime, 0) : color.new(color.green, 0)) : 
     (macdHist < macdHist[1] ? color.new(color.red, 0) : color.new(color.maroon, 0)), 
     style=plot.style_columns)

// Orca Order Flow Visualization
if barstate.islast and time_ >= 5 
    l_size = switch lbl_size
        "Normal" => size.normal
        "Small" => size.small
        "Tiny" => size.tiny
        => size.auto

    // Clear existing objects
    for i = 0 to lookback - 1
        line.delete(hl.get(i))
        label.delete(labels.get(i))
        label.delete(labels_b.get(i))
        label.delete(labels_s.get(i))
        label.delete(labels_p.get(i))
        line.delete(line_poc.get(i))
    
    // Create new order flow visualization
    for i = 0 to lookback - 1
        h = high[i]
        l = low[i]
        o = open[i]
        c = close[i]
        vol = req[i]
        pr = price[i]
        bot = c > o ? o : c
        top = c > o ? c : o
        step = (h - l) / 100  
        step1 = (top - bot) / 100 

        array.clear(vol_bin)
        for k = 0 to 99
            vol_bin.push(0.0)

        // Fill volume bins
        if vol.size() > 0
            for j = 0 to pr.size() - 1
                clos = pr.get(j)
                vol_ = vol.get(j)
                if clos >= l and clos <= h
                    bin_index = int(math.floor((clos - l) / step))
                    bin_index := math.min(bin_index, 99)  
                    vol_bin.set(bin_index, vol_bin.get(bin_index) + vol_)

        // Find POC
        max_vol = vol_bin.max()
        poc_index = vol_bin.indexof(max_vol)
        poc_price = l + step * poc_index

        // Plot POC level
        if poc_d
            array.set(line_poc, i,
                 line.new(
                         bar_index-i,
                         poc_price,
                         bar_index+1,
                         poc_price,
                         color = poc_col,
                         style = line.style_dashed
                         )
                 )
                 
        // Plot POC label
        if poc_d
            array.set(labels_p, i,
             label.new(
                 bar_index - i,
                 poc_price,
                 "--------",
                 color=color.new(color.red, 100),
                 textcolor=poc_col,
                 style=label.style_label_center,
                 size=size.auto
                 )
             )

        candle_col = c > o ? col_up : col_dn
        
        array.set(hl, i, 
                 line.new(
                           bar_index-i,
                           h,
                           bar_index-i,
                           l,
                           style = line.style_solid,
                           color = candle_col
                           )
                  )

        array.set(labels_b, i, 
                 label.new(
                             bar_index - i,
                             bot+step1*buy_per[i],
                             "      ══",
                             color = color.new(color.black,100),
                             force_overlay = true,
                             style = label.style_label_center,
                             size = size.auto,
                             textcolor = col_up
                             )
                     )

        array.set(labels_s, i, 
                 label.new(
                             bar_index - i,
                             bot+step1*sell_per[i],
                             "══      ",
                             color = color.new(color.black,100),
                             force_overlay = true,
                             style = label.style_label_center,
                             size = size.auto,
                             textcolor = col_dn
                             )
                     )

        array.set(labels, i, 
                 label.new(
                             bar_index - i,
                             top,
                             "Sᴇʟʟ" + "  " + "Bᴜʏ\n" + str.tostring(sell_per[i], "##") + "%" + "  " + str.tostring(math.round(buy_per[i]), "##") + "%",
                             color = color.new(color.black,100),
                             force_overlay = true,
                             style = label.style_label_down,
                             size = l_size,
                             textcolor = chart.fg_color
                             )
                     )

        if poc_d
            for j = line_poc.size() -1 to 0 
                line_id = line_poc.get(j)
                level = line_id.get_y1()
                
                for s = lookback -1 to 0
                    if high[s] > level and low[s] < level and bar_index[s] > line_id.get_x1()
                        line.delete(line_id)

    // Start of the Period marker
    line.delete(line.new(bar_index-lookback,high[lookback], bar_index-lookback,high[lookback], extend = extend.both, color = color.gray)[1])
    label.delete(label.new(bar_index-lookback,high[lookback], ">", force_overlay = true, color = color.gray, style = label.style_label_center)[1])

plotcandle(open, high, low, close, title='Candles', color = chart.bg_color, bordercolor = close>open ? #001fe6 : #eb33ff, show_last = lookback)

// ====== 6. DASHBOARD ====== //
var table dashboard = table.new(position.top_right, 3, 10)

if barstate.islast
    // Header
    table.cell(dashboard, 0, 0, "Quantum Edge", bgcolor=color.new(#2C3E50, 0), text_color=color.white)
    table.cell(dashboard, 1, 0, "Aura", bgcolor=color.new(#2C3E50, 0), text_color=color.white)
    table.cell(dashboard, 2, 0, "Pro+", bgcolor=color.new(#2C3E50, 0), text_color=color.white)
    
    // Score
    table.cell(dashboard, 0, 1, "Smart Score", bgcolor=color.new(#2C3E50, 0), text_color=color.white)
    table.cell(dashboard, 1, 1, str.tostring(normalizedScore, "#.##") + "%", 
              bgcolor=color.new(normalizedScore > 70 ? #27AE60 : normalizedScore < 30 ? #E74C3C : #F39C12, 70), text_color=color.white)
    table.cell(dashboard, 2, 1, normalizedScore > 70 ? "Bullish" : normalizedScore < 30 ? "Bearish" : "Neutral",
              bgcolor=color.new(normalizedScore > 70 ? #27AE60 : normalizedScore < 30 ? #E74C3C : #F39C12, 70), text_color=color.white)
    
    // Trend
    table.cell(dashboard, 0, 2, "Trend", bgcolor=color.new(#2C3E50, 0), text_color=color.white)
    table.cell(dashboard, 1, 2, emaFastLine > emaSlowLine and emaSlowLine > emaTrendLine ? "Bullish" : 
              emaFastLine < emaSlowLine and emaSlowLine < emaTrendLine ? "Bearish" : "Neutral",
              bgcolor=emaFastLine > emaSlowLine and emaSlowLine > emaTrendLine ? color.new(#27ae5f, 17) : 
                     emaFastLine < emaSlowLine and emaSlowLine < emaTrendLine ? color.new(#e74d3c, 22) : 
                     color.new(#F39C12, 70), text_color=color.white)
    table.cell(dashboard, 2, 2, superTrendBullish ? "Bullish" : "Bearish",
              bgcolor=superTrendBullish ? color.new(#27ae5f, 15) : color.new(#e74d3c, 16), text_color=color.white)
    
    // Momentum
    table.cell(dashboard, 0, 3, "Momentum", bgcolor=color.new(#2C3E50, 0), text_color=color.white)
    table.cell(dashboard, 1, 3, macdHist > 0 and rsi > 50 ? "Bullish" : macdHist < 0 and rsi < 50 ? "Bearish" : "Neutral",
              bgcolor=macdHist > 0 and rsi > 50 ? color.new(#27ae5f, 11) : 
                     macdHist < 0 and rsi < 50 ? color.new(#e74d3c, 21) : 
                     color.new(#f39d12, 25), text_color=color.white)
    table.cell(dashboard, 2, 3, str.tostring(rsi, "#.##"), 
              bgcolor=rsi > 70 ? color.new(#e74d3c, 14) : rsi < 30 ? color.new(#27ae5f, 14) : color.new(#f39d12, 29), text_color=color.white)
    
    // Risk
    table.cell(dashboard, 0, 4, "Risk", bgcolor=color.new(#2C3E50, 0), text_color=color.white)
    table.cell(dashboard, 1, 4, "ATR: " + str.tostring(atr, "#.##"), bgcolor=color.new(#3498db, 35), text_color=color.white)
    table.cell(dashboard, 2, 4, volumeSpike ? "High Vol" : "Normal Vol",
              bgcolor=volumeSpike ? color.new(#F39C12, 70) : color.new(#3498db, 30), text_color=color.white)
    
    // Recommendation
    table.cell(dashboard, 0, 5, "Action", bgcolor=color.new(#2C3E50, 0), text_color=color.white)
    table.cell(dashboard, 1, 5, normalizedScore > 70 ? "Strong Buy" : 
              normalizedScore < 30 ? "Strong Sell" : "Wait",
              bgcolor=normalizedScore > 70 ? color.new(#27ae5f, 6) : 
                     normalizedScore < 30 ? color.new(#e74d3c, 9) : 
                     color.new(#f39d12, 44), text_color=color.white)
    table.cell(dashboard, 2, 5, isLiquiditySweep != "None" ? isLiquiditySweep : "-",
              bgcolor=isLiquiditySweep == "Bull Trap" ? color.new(#27ae5f, 16) : 
                     isLiquiditySweep == "Bear Trap" ? color.new(#e74c3c, 18) : 
                     color.new(#2C3E50, 70), text_color=color.white)

// ====== 7. SIGNAL GENERATION ====== //
buySignal = normalizedScore >= 70 and barstate.isconfirmed
sellSignal = normalizedScore <= 30 and barstate.isconfirmed

plotshape(buySignal, "Buy Signal", shape.triangleup, location.belowbar, #3013ea, size=size.tiny)
plotshape(sellSignal, "Sell Signal", shape.triangledown, location.abovebar, color.rgb(233, 254, 46), size=size.tiny)

// === Branding Table ===
var table brandingTable = table.new(position.top_center, 1, 1, border_width=1, frame_color=color.black, bgcolor=color.white)
table.cell(brandingTable, 0, 0, "@TrendPulseNXT - Quantum Edge  &  Order Flow", bgcolor=color.white, text_color=color.black, text_size=size.normal)
