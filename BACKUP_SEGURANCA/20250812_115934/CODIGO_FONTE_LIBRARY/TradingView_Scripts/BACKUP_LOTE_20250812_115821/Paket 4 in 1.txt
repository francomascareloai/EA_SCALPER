//@version=5
//@author=autosignalindo.com

indicator("Paket 4 in 1", "Paket 4 in 1", overlay = true, max_lines_count = 500, max_labels_count = 500)

bool display_fibo = input.bool(true, 'Fibonacci Retracment', group = "Choose Indicator")
bool display_ms = input(false, "Market Structure", group = "Choose Indicator")
bool display_orderblock = input.bool(false, 'Order Block', group = "Choose Indicator")
bool display_tren = input.bool(false, 'Trendline', group = "Choose Indicator")

len = input(50, 'Period', group = "Structure Market", tooltip = 'TF 1-15 min : 20-50\nTF 1-4 H : 50-100\nTF > 1 D : > 100-200')
shortLen = input(4, 'IDM Length', group = "Structure Market", tooltip = 'TF 1-15 min : 2-4\nTF 1-4 H : 4-10\nTF > 1 D : > 10-20')
showChoch = true
showBos = true
showIdm = input(false, "IDM", inline = "Setting", group = "Structure Market")
showSweeps = input(false, "Liquidity Sweep", inline = "Setting", group = "Structure Market")
showCircles = input(true, "Swing High/ Low", inline = "Setting", group = "Structure Market")
bullCss = input(#006400, 'Bullish', inline = "Color", group = "Structure Market")
bearCss = input(#8B0000, 'Bearish', inline = "Color", group = "Structure Market")
idmCss = input(#FFD700, "IDM", inline = "Color", group = "Structure Market")
sweepsCss = input(#000000, "Sweep", inline = "Color", group = "Structure Market")
showTrgt = input(false, "Plan", inline = "Target", group = "Structure Market")
tpPerc = input.float(0.5, "TP", minval = 0.1, step = 0.1, inline = "Target", group = "Structure Market") / 100
slPerc = input.float(0.25, "SL", minval = 0.1, step = 0.1, inline = "Target", group = "Structure Market") / 100

FIBS = 1
Foption = 'Candle'
FP = input(defval = 20, title = 'Length', group = 'Fibonacci Retracment', tooltip = 'TF 1-15 min : 20-50\nTF 1-4 H : 50-100\nTF > 1 D : 100-200')
Reverse = input(defval = false, title = 'Reverse Fibo', group = 'Fibonacci Retracment')
High = 0
Low = -1
Bull_Color = input(#006400, title = 'Support', group = 'Fibonacci Retracment', inline = 'SNR')
Bear_Color = input(#8B0000, title = 'Resistence', group = 'Fibonacci Retracment', inline = 'SNR')
CurrentFib = false
Current_Color = #FFD700
LineStyle = 'Dashed'
LineWidth = 1
Ext = false

zigzagBool = input.bool(false, 'Zigzag', group = 'Order Block', tooltip = "false : Tidak Mengaktifkan Zigzag (HH/LH/LL/HL)\nTrue : Mengaktifkan Zigzag (HH/LH/LL/HL)")
zigzagLen = input.int(5, 'Length', group = 'Order Block', tooltip = "TF 1-30 min : 3-9\nTF 1-4 H 9-21\n TF > 1 D : 21-50")
orderblockBool = true
numberObShow = input.int(2, 'Order Block', group = 'Order Block', minval = 1, maxval = 10)
bearishOrderblockColor = input.color(color.new(#8B0000, 50), title = 'Order Block', group = 'Order Block', inline = 'OB')
bullishOrderblockColor = input.color(color.new(#006400, 50), title = ' ', group = 'Order Block', inline = 'OB')

int Period = input.int(20, 'Period', group = 'TrendLine', inline = 'TL', tooltip = 'TF 1-15 min : 5-20\nTF 1-4 H : 20-50\nTF > 1 D : 50-100')
string style2 = 'Solid'
int extend_ = 50
color LineCol1 = input.color(#006400, 'Bullish', group = 'TrendLine', inline = 'Color TL')
color LineCol2 = input.color(#8B0000, 'Bearish', group = 'TrendLine', inline = 'Color TL')
n = bar_index

swings(len)=>
    var os = 0
    var int topx = na
    var int btmx = na
    
    upper = ta.highest(len)
    lower = ta.lowest(len)

    os := high[len] > upper ? 0 : low[len] < lower ? 1 : os[1]

    top = os == 0 and os[1] != 0 ? high[len] : na
    topx := os == 0 and os[1] != 0 ? n[len] : topx

    btm = os == 1 and os[1] != 1 ? low[len] : na
    btmx := os == 1 and os[1] != 1 ? n[len] : btmx

    [top, topx, btm, btmx]

[top, topx, btm, btmx] = swings(len)
[stop, stopx, sbtm, sbtmx] = swings(shortLen)

var os = 0
var top_crossed = false
var btm_crossed = false

var float max = na
var float min = na

var int max_x1 = na
var int min_x1 = na

var float topy = na
var float btmy = na
var stop_crossed = false
var sbtm_crossed = false

var int totalSignals = 0
var int hitTP = 0
var int hitSL = 0
var bool inTrade = false
var float entryPrice = na
var bool isLong = na


if top
    topy := top
    top_crossed := false
if btm
    btmy := btm
    btm_crossed := false
    
if close > topy and not top_crossed
    os := 1
    top_crossed := true
if close < btmy and not btm_crossed
    os := 0
    btm_crossed := true
    
if os != os[1] and display_ms
    max := high
    min := low
    max_x1 := n
    min_x1 := n
    stop_crossed := false
    sbtm_crossed := false

    if os == 1 and showChoch
        line.new(topx, topy, n, topy, color = bullCss, style = line.style_dashed)
        label.new(int(math.avg(n, topx)), topy, 'CHoCH', color = color(na), style = label.style_label_down, textcolor = bullCss, size = size.small)
        label.new(bar_index, topy, 'BUY : ' + str.tostring(topy, format.mintick), style = label.style_label_left, color = #FFD700, textcolor = #000000, size = size.small)

    else if showChoch
        line.new(btmx, btmy, n, btmy, color = bearCss, style = line.style_dashed)
        label.new(int(math.avg(n, btmx)), btmy, 'CHoCH', color = color(na), style = label.style_label_up, textcolor = bearCss, size = size.small)
        label.new(bar_index, btmy, 'SELL : ' + str.tostring(btmy, format.mintick), style = label.style_label_left, color = #FFD700, textcolor = #000000, size = size.small)

plotTargets(entryPrice, isBuy) =>
    tp = isBuy ? entryPrice * (1 + tpPerc) : entryPrice * (1 - tpPerc)
    sl  = isBuy ? entryPrice * (1 - slPerc)  : entryPrice * (1 + slPerc)
    
    label.new(bar_index, tp, 'TP : ' + str.tostring(tp, format.mintick), style = label.style_label_left, color = #006400, textcolor = #FFFFFF, size = size.small)
    label.new(bar_index, sl, 'SL : ' + str.tostring(sl, format.mintick), style = label.style_label_left, color = #8B0000, textcolor = #FFFFFF, size = size.small)
    
if os != os[1] and showTrgt
    if os == 1
        plotTargets(topy, true)
    else
        plotTargets(btmy, false)
stopy = fixnan(stop)
sbtmy = fixnan(sbtm)

if low < sbtmy and not sbtm_crossed and os == 1 and sbtmy != btmy
    if showIdm
        line.new(sbtmx, sbtmy, n, sbtmy, color = #FFD700, style = line.style_dashed)
        label.new(int(math.avg(n, sbtmx)), sbtmy, 'IDM', color = color(na), style = label.style_label_up, textcolor = idmCss, size = size.small)
    
    sbtm_crossed := true
    
if close > max and sbtm_crossed and os == 1
    if showBos
        if showTrgt
            line.new(max_x1, max, n, max, color = bullCss, style = line.style_dashed)
            label.new(int(math.avg(n, max_x1)), max, 'BOS', color = color(na), style = label.style_label_down, textcolor = bullCss, size = size.small)
            label.new(bar_index, max, 'BUY : ' + str.tostring(max, format.mintick), style = label.style_label_left, color = #FFD700, textcolor = #000000, size = size.small)
            
            tp = max * (1 + tpPerc)
            sl  = max * (1 - slPerc)

            line.new(n, tp, n, tp, color=#006400, style = line.style_dashed)
            label.new(n, tp, 'TP : ' + str.tostring(tp, format.mintick), style=label.style_label_left, color = #006400, textcolor = #FFFFFF, size = size.small)
            line.new(n, sl, n, sl, color=#8B0000, style = line.style_dashed)
            label.new(n, sl, 'SL : ' + str.tostring(sl, format.mintick), style=label.style_label_left, color = #8B0000, textcolor = #FFFFFF, size = size.small)

    sbtm_crossed := false
    
if high > stopy and not stop_crossed and os == 0 and stopy != topy
    if showIdm
        line.new(stopx, stopy, n, stopy, color = #FFD700, style = line.style_dashed)
        label.new(int(math.avg(n, stopx)), stopy, 'IDM', color = color(na), style = label.style_label_down, textcolor = #FFD700, size = size.small)
    
    stop_crossed := true
    
if close < min and stop_crossed and os == 0
    if showBos
        if showTrgt
            line.new(min_x1, min, n, min, color = bearCss, style = line.style_dashed)
            label.new(int(math.avg(n, min_x1)), min, 'BOS', color = color(na), style = label.style_label_up, textcolor = bearCss, size = size.small)
            label.new(bar_index, min, 'SELL : ' + str.tostring(min, format.mintick), style = label.style_label_left, color = #FFD700, textcolor = #000000, size = size.small)

            tp = min * (1 - tpPerc)
            sl  = min * (1 + slPerc)

            line.new(n, tp, n, tp, color=#006400, style = line.style_dashed)
            label.new(n, tp, 'TP : ' + str.tostring(tp, format.mintick), style=label.style_label_left, color = #006400, textcolor = #FFFFFF, size = size.small)
            line.new(n, sl, n, sl, color=#8B0000, style = line.style_dashed)
            label.new(n, sl, 'SL : ' + str.tostring(sl, format.mintick), style=label.style_label_left, color = #8B0000, textcolor = #FFFFFF, size = size.small)

    stop_crossed := false
    
if high > max and close < max and os == 1 and n - max_x1 > 1 and showSweeps
    line.new(max_x1, max, n, max, color = sweepsCss, style = line.style_dashed)
    label.new(int(math.avg(n, max_x1)), max, '$', color = color(na), style = label.style_label_down, textcolor = sweepsCss, size = size.small)

if low < min and close > min and os == 0 and n - min_x1 > 1 and showSweeps
    line.new(min_x1, min, n, min, color = sweepsCss, style = line.style_dashed)
    label.new(int(math.avg(n, min_x1)), min, '$', color = color(na), style = label.style_label_up, textcolor = sweepsCss, size = size.small)
    
max := math.max(high, max)
min := math.min(low, min)

if max > max[1]
    max_x1 := n
if min < min[1]
    min_x1 := n
    
var ext_choch = line.new(na,na,na,na, style = line.style_dashed)
var ext_bos   = line.new(na,na,na,na, style = line.style_dashed)
var ext_idm   = line.new(na,na,na,na, style = line.style_dashed, color = idmCss)

var ext_choch_lbl = label.new(na,na, 'CHoCH', color = color(na), size = size.small)
var ext_bos_lbl   = label.new(na,na, 'BOS'  , color = color(na), size = size.small)
var ext_idm_lbl   = label.new(na,na, 'IDM'  , color = color(na), size = size.small, textcolor = idmCss)

if barstate.islast
    if os == 1
        if showChoch
            ext_choch.set_xy1(btmx, btmy), ext_choch.set_xy2(n, btmy), ext_choch.set_color(bearCss)    
            ext_choch_lbl.set_xy(n, btmy), ext_choch_lbl.set_style(label.style_label_up), ext_choch_lbl.set_textcolor(bearCss)
        
        if showBos
            ext_bos.set_xy1(max_x1, max), ext_bos.set_xy2(n, max), ext_bos.set_color(bullCss)    
            ext_bos_lbl.set_xy(n, max), ext_bos_lbl.set_style(label.style_label_down), ext_bos_lbl.set_textcolor(bullCss)
        
        if not sbtm_crossed and showIdm
            ext_idm.set_xy1(sbtmx, sbtmy), ext_idm.set_xy2(n+15, sbtmy)   
            ext_idm_lbl.set_xy(n+15, sbtmy), ext_idm_lbl.set_style(label.style_label_up)
            ext_idm.set_color(idmCss), ext_idm_lbl.set_textcolor(idmCss)
        else
            ext_idm.set_color(na)
            ext_idm_lbl.set_textcolor(na)
    else
        if showChoch
            ext_choch.set_xy1(topx, topy), ext_choch.set_xy2(n, topy), ext_choch.set_color(bullCss)    
            ext_choch_lbl.set_xy(n, topy), ext_choch_lbl.set_style(label.style_label_down), ext_choch_lbl.set_textcolor(bullCss)
        
        if showBos
            ext_bos.set_xy1(min_x1, min), ext_bos.set_xy2(n, min), ext_bos.set_color(bearCss)    
            ext_bos_lbl.set_xy(n, min), ext_bos_lbl.set_style(label.style_label_up), ext_bos_lbl.set_textcolor(bearCss)

        if not stop_crossed and showIdm
            ext_idm.set_xy1(stopx, stopy), ext_idm.set_xy2(n+15, stopy)   
            ext_idm_lbl.set_xy(n+15, stopy), ext_idm_lbl.set_style(label.style_label_down)
            ext_idm.set_color(idmCss), ext_idm_lbl.set_textcolor(idmCss)
        else
            ext_idm.set_color(na)
            ext_idm_lbl.set_textcolor(na)
            
plot(showCircles ? top : na, 'Swing High', color.new(bearCss, 50), 5, plot.style_circles, offset = -len)
plot(showCircles ? btm : na, 'Swing Low', color.new(bullCss, 50), 5, plot.style_circles, offset = -len)

//Trendline
var array<line> Lines = array.new<line>(5)

PH = ta.pivothigh(high, Period, Period)
PL = ta.pivotlow(low, Period, Period)

method draw_trendLine(float pivot, bool isBullish) =>
    var int Start = 0
    var int end = 0
    var int TIME = 1
    var float YEnd = 0
    var float YStart = 0
    var float Slope = 0
    var float src = 0

    style = switch style2
        'Solid' => line.style_solid
        'Dashed' => line.style_dashed
        => line.style_solid

    if not na(pivot)
        BarTIME = time - time[1]
        src := pivot
        TIME := time[Period]
        YStart := src[1]
        Start := TIME[1]
        Slope := (src - YStart) / (TIME - Start)

        extend = BarTIME * extend_ * 2
        end := TIME + extend
        YEnd := src + extend * Slope
        LineCond = Slope * time < 0 ? isBullish ? na : LineCol2 : isBullish ? LineCol1 : na

        if not na(LineCond)
            line1 = line.new(x1 = Start, y1 = YStart, x2 = end, y2 = YEnd, xloc = xloc.bar_time, color = LineCond, width = 1, style = style)
            Lines.push(line1)

if display_tren
    PH.draw_trendLine(false)
    PL.draw_trendLine(true)

if Lines.size() > 1
    line.delete(Lines.shift())

//Order Block
type orderblock
	float value
	int barStart
	int barEnd
	box block
	bool broken

type liquidity
	float value
	int barStart
	int barEnd
	line liquidityLine
	bool broken
	label sweep

type zone
	float value
	int barStart
	int barEnd
	box block
	string zoneType

var array<orderblock> bullishOrderblock = array.new<orderblock>()
var array<orderblock> bearishOrderblock = array.new<orderblock>()
var array<liquidity> bullishLiquidity = array.new<liquidity>()
var array<liquidity> bearishLiquidity = array.new<liquidity>()
var array<int> highValIndex = array.new<int>()
var array<int> lowValIndex = array.new<int>()
var array<float> highVal = array.new_float()
var array<float> lowVal = array.new_float()

var bool drawUp = false
var bool drawDown = false
var string lastState = na
var bool to_up = false
var bool to_down = false
var int trend = 1
var float fibTopVal = na
var int fibTopIndex = na
var float fibBotVal = na
var int fibBotIndex = na
var float premiumVal = na
var float discountVal = na
var int premiumValIndex = na
var int discountValIndex = na
var box premiumBox = na
var box discountBox = na
var label premiumLabel = na
var label discountLabel = na
var string textOfPremium = na
var string textOfDiscount = na
var line newBearishTrendline = na
var line newBullishTrendline = na

atr = ta.atr(14)

to_up := high[zigzagLen] >= ta.highest(high, zigzagLen)
to_down := low[zigzagLen] <= ta.lowest(low, zigzagLen)

trend := trend == 1 and to_down ? -1 : trend == -1 and to_up ? 1 : trend

drawZigzag(x1, y1, x2, y2) =>
    line.new(x1 = x1, y1 = y1, x2 = x2, y2 = y2, xloc = xloc.bar_time, width = 1, color = #FFD700)

if ta.change(trend) != 0 and trend == 1
    array.push(highValIndex, time[zigzagLen])
    array.push(highVal, high[zigzagLen])
    if array.size(lowVal) > 1
        lastLowVal = array.get(lowVal, array.size(lowVal) - 1)
        lastLowIndex = array.get(lowValIndex, array.size(lowValIndex) - 1)
        lastHighIndex = array.get(highValIndex, array.size(highValIndex) - 1)
        lastHighVal = array.get(highVal, array.size(highVal) - 1)
        if zigzagBool
            drawZigzag(x1 = lastLowIndex, y1 = lastLowVal, x2 = lastHighIndex, y2 = lastHighVal)
        drawUp := false
        drawUp
    fibTopIndex := time[zigzagLen]
    fibTopVal := high[zigzagLen]
    fibTopVal

if ta.change(trend) != 0 and trend == -1
    array.push(lowValIndex, time[zigzagLen])
    array.push(lowVal, low[zigzagLen])
    if array.size(highVal) > 1
        lastHighVal = array.get(highVal, array.size(highVal) - 1)
        lastHighIndex = array.get(highValIndex, array.size(highValIndex) - 1)
        lastLowIndex = array.get(lowValIndex, array.size(lowValIndex) - 1)
        lastLowVal = array.get(lowVal, array.size(lowVal) - 1)
        if zigzagBool
            drawZigzag(x1 = lastHighIndex, y1 = lastHighVal, x2 = lastLowIndex, y2 = lastLowVal)
        drawDown := false
        drawDown
    fibBotIndex := time[zigzagLen]
    fibBotVal := low[zigzagLen]
    fibBotVal

if array.size(lowVal) > 1 and drawDown == false
    if close < array.get(lowVal, array.size(lowVal) - 1)
        drawDown := true
        lastState := 'down'
        if display_orderblock and orderblockBool
            orderblock newOrderblock = orderblock.new()
            float max = 0
            int bar = na
            for i = (time - array.get(lowValIndex, array.size(lowValIndex) - 1) - (time - time[1])) / (time - time[1]) to 0 by 1
                if high[i] > max
                    max := high[i]
                    bar := time[i]
                    bar
            newOrderblock.barStart := bar
            newOrderblock.barEnd := time
            newOrderblock.broken := false
            newOrderblock.value := max
            newOrderblock.block := box.new(left = newOrderblock.barStart, top = newOrderblock.value - atr, right = newOrderblock.barEnd, bottom = newOrderblock.value, xloc = xloc.bar_time, bgcolor = bearishOrderblockColor, border_width = 1, border_color = bearishOrderblockColor)
            array.push(bearishOrderblock, newOrderblock)
            if array.size(bearishOrderblock) > 20
                array.shift(bearishOrderblock)

if array.size(highVal) > 1 and drawUp == false
    if close > array.get(highVal, array.size(highVal) - 1)
        drawUp := true
        lastState := 'up'
        if display_orderblock and orderblockBool
            orderblock newOrderblock = orderblock.new()
            float min = 999999999
            int bar = na
            for i = (time - array.get(highValIndex, array.size(highValIndex) - 1) - (time - time[1])) / (time - time[1]) to 0 by 1
                if low[i] < min
                    min := low[i]
                    bar := time[i]
                    bar

            newOrderblock.barStart := bar
            newOrderblock.barEnd := time
            newOrderblock.broken := false
            newOrderblock.value := min
            newOrderblock.block := box.new(left = newOrderblock.barStart, top = newOrderblock.value + atr, right = newOrderblock.barEnd, bottom = newOrderblock.value, xloc = xloc.bar_time, bgcolor = bullishOrderblockColor, border_width = 1, border_color = bullishOrderblockColor)
            array.push(bullishOrderblock, newOrderblock)
            if array.size(bullishOrderblock) > 20
                array.shift(bullishOrderblock)
                
if array.size(bullishOrderblock) > 0
    orderblock testOrderblock = na
    int counter = 0
    for i = array.size(bullishOrderblock) - 1 to 0 by 1
        testOrderblock := array.get(bullishOrderblock, i)
        if counter < numberObShow
            testOrderblock.block.set_right(time)
            if close < testOrderblock.value
                testOrderblock.block.delete()
                array.remove(bullishOrderblock, i)
            counter := counter + 1
            counter
        else
            testOrderblock.block.set_right(testOrderblock.barStart)

if array.size(bearishOrderblock) > 0
    orderblock testOrderblock = na
    int counter = 0
    for i = array.size(bearishOrderblock) - 1 to 0 by 1
        testOrderblock := array.get(bearishOrderblock, i)
        if counter < numberObShow
            testOrderblock.block.set_right(time)
            if close > testOrderblock.value
                testOrderblock.block.delete()
                array.remove(bearishOrderblock, i)
            counter := counter + 1
            counter
        else
            testOrderblock.block.set_right(testOrderblock.barStart)

BullColor = Bull_Color
BearColor = Bear_Color

//Fibonacci Retracment
FPeriod = timeframe.isintraday and Foption == '2. Days' ? 1440 / timeframe.multiplier * FP : timeframe.isdaily and Foption == '2. Days' ? FP / timeframe.multiplier : timeframe.isweekly and Foption == '2. Days' ? FP / (7 * timeframe.multiplier) : timeframe.ismonthly and Foption == '2. Days' ? FP / (28 * timeframe.multiplier) : Foption == '1. Candles' ? FP : 100

Fhigh = ta.highest(FPeriod)
Flow = ta.lowest(FPeriod)
// Deteksi Higher High manual
var float prevFhigh = na
var float lastFhigh = na

if na(lastFhigh)
    lastFhigh := Fhigh
else
    if Fhigh != lastFhigh
        prevFhigh := lastFhigh
        lastFhigh := Fhigh

isHH = not na(prevFhigh) and Fhigh > prevFhigh

FH = FIBS == 1 ? ta.highestbars(high, FPeriod) : 1
FL = FIBS == 1 ? ta.lowestbars(low, FPeriod) : 2
revfibs = not Reverse ? FL > FH : FL < FH

Fib_x(n) =>
    revfibs ? (Fhigh - Flow) * n + Flow : Fhigh - (Fhigh - Flow) * n

Current = revfibs ? (close - Flow) / (Fhigh - Flow) : (Fhigh - close) / (Fhigh - Flow)

var label Current_Fib_Label = na
label.delete(Current_Fib_Label)

if CurrentFib and barstate.islast
    Current_Fib_Label := label.new(bar_index, close, str.tostring(Current, '##.##'), textcolor = #8B0000, color = #FFD700, style = label.style_label_left, yloc = yloc.price)
    Current_Fib_Label

EXTEND = Ext ? extend.left : extend.none
STYLE = LineStyle == 'Dashed' ? line.style_dashed : line.style_solid
WIDTH = LineWidth

BB = FL < FH ? bar_index[-FL] : bar_index[-FH]

Fib_line(x) =>
    var line ln = na
    line.delete(ln)
    ln := line.new(BB, x, bar_index, x, color = close > x ? BullColor : BearColor, extend = EXTEND, style = STYLE, width = WIDTH)
    ln

Fib_label(x, _txt) =>
    var label lbl = na
    label.delete(lbl)
    lbl := label.new(bar_index, x, _txt + str.tostring(x, '##.##') + ' )', textcolor = close > x ? BullColor : BearColor, color = color.new(#8B0000, 100), style = label.style_label_left, yloc = yloc.price)
    lbl

if display_fibo
    Fib0 = Fib_line(Fib_x(0))
    Fib12 = Fib_line(Fib_x(0.12))
    Fib236 = Fib_line(Fib_x(0.236))
    Fib382 = Fib_line(Fib_x(0.382))
    Fib500 = Fib_line(Fib_x(0.500))
    Fib618 = Fib_line(Fib_x(0.618))
    Fib786 = Fib_line(Fib_x(0.786))
    Fib88 = Fib_line(Fib_x(0.88))
    Fib1000 = Fib_line(Fib_x(1.000))

    LFib0 = Fib_label(Fib_x(0), isHH ? 'SL\n( ' : 'SL ( ')
    LFib12 = Fib_label(Fib_x(0.12), isHH ? 'Sell ( ' : 'Buy ( ')
    LFib236 = Fib_label(Fib_x(0.236), isHH ? 'Sell Again ( ' : 'Buy Again ( ')
    LFib382 = Fib_label(Fib_x(0.382), isHH ? 'SL+ ( ' : 'SL+ ( ')
    LFib500 = Fib_label(Fib_x(0.500), isHH ? 'TP Partial ( ' : 'TP Partial ( ')
    LFib618 = Fib_label(Fib_x(0.618), isHH ? 'TP Max ( ' : 'TP Max ( ')
    LFib786 = Fib_label(Fib_x(0.786), isHH ? 'Rebound ( ' : 'Pullback ( ')
    LFib88 = Fib_label(Fib_x(0.88), isHH ? 'Rebound Again ( ' : 'Pullback Again ( ')
    LFib1000 = Fib_label(Fib_x(1.000), isHH ? 'Prepare Retracment ( ' : 'Prepare Retracment ( ')

var tb = table.new(position.bottom_center, 1, 1, bgcolor = color.new(#006400, 75))
if barstate.isfirst
    table.cell(tb, 0, 0, 'Indikator Paket 4 in 1\nMore Indicator https://lynk.id/autosignalindo', text_size = size.normal, text_color = #8B0000)