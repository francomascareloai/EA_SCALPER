//@version=5
indicator(title="Pivot Proximity by nnamdert v3 (only S/R)", shorttitle="Pivot Proximity", overlay=true)

// Inputs
lookbackPeriod          = input.int(10, title="Lookback Period")
pivotStrength           = input.int(1, title="Pivot Strength", minval=1)
priceProximityThresholdPerc = input.float(0.01, title="Price Proximity Threshold (%)", minval=0, step = 0.01)
maxAge                = input.int(500, title="Maximum Age of Boxes", minval=1)

// Calculate Price Diff
priceProximityThreshold = priceProximityThresholdPerc / 100 * close

// Pivot Highs and Lows
ph = ta.pivothigh(pivotStrength, pivotStrength)
pl = ta.pivotlow(pivotStrength, pivotStrength)

// Array to Store Pivot Prices and Bar Indices
var array<float> pivotHighPrices   = array.new_float(0)
var array<int>   pivotHighIndices  = array.new_int(0)
var array<float> pivotLowPrices    = array.new_float(0)
var array<int>   pivotLowIndices   = array.new_int(0)
var array<box>     proximityBoxes    = array.new_box()

// Function to Check Proximity
isClose(price1, price2) =>
    math.abs(price1 - price2) <= priceProximityThreshold

// Function to Create Box
//createBox(startIndex, endIndex, boxPriceHigh, boxPriceLow) =>
//    box.new(startIndex, boxPriceHigh, endIndex, boxPriceLow, bgcolor = color.new(color.yellow, 100), border_style = line.style_dashed)
createBox(startIndex, endIndex, boxPriceHigh, boxPriceLow, boxColor, borderColor) =>
    box.new(startIndex, boxPriceHigh, endIndex, boxPriceLow, bgcolor = boxColor, border_color = borderColor, border_style = line.style_dotted)
// Detect and Highlight Proximity
if not na(ph)
    pivotPriceHigh = high[pivotStrength]
    pivotIndexHigh = bar_index[pivotStrength]

    // Check proximity to existing pivot lows
    if array.size(pivotLowPrices) > 0
        for i = 0 to array.size(pivotLowPrices) - 1
            if isClose(pivotPriceHigh, array.get(pivotLowPrices, i))
                boxPriceHigh = math.max(pivotPriceHigh, array.get(pivotLowPrices, i))
                boxPriceLow  = math.min(pivotPriceHigh, array.get(pivotLowPrices, i))
                startIndex   = array.get(pivotLowIndices, i)
                if bar_index - startIndex <= maxAge
                    //currentBox = createBox(startIndex, bar_index[pivotStrength], boxPriceHigh, boxPriceLow)
                    //array.push(proximityBoxes, currentBox)
                    boxColor = color.new(color.red, 50)  //  pivot high is followed by a pivot low
                    borderColor = color.new(color.red, 50)
                    currentBox = createBox(startIndex, bar_index[pivotStrength], boxPriceHigh, boxPriceLow, boxColor, borderColor)
                    array.push(proximityBoxes, currentBox)

    // Add the new pivot price to the array
    array.push(pivotHighPrices, pivotPriceHigh)
    array.push(pivotHighIndices, pivotIndexHigh)

if not na(pl)
    pivotPriceLow = low[pivotStrength]
    pivotIndexLow = bar_index[pivotStrength]

    // Check proximity to existing pivot highs
    if array.size(pivotHighPrices) > 0
        for i = 0 to array.size(pivotHighPrices) - 1
            if isClose(pivotPriceLow, array.get(pivotHighPrices, i))
                boxPriceHigh = math.max(pivotPriceLow, array.get(pivotHighPrices, i))
                boxPriceLow  = math.min(pivotPriceLow, array.get(pivotHighPrices, i))
                startIndex   = array.get(pivotHighIndices, i)
                if bar_index - startIndex <= maxAge
                    //currentBox = createBox(startIndex, bar_index[pivotStrength], boxPriceHigh, boxPriceLow)
                    boxColor = color.new(color.green, 50)  // pivot low is followed by a pivot high
                    borderColor = color.new(color.green, 50)
                    currentBox = createBox(startIndex, bar_index[pivotStrength], boxPriceHigh, boxPriceLow, boxColor, borderColor)
                    array.push(proximityBoxes, currentBox)

    // Add the new pivot price to the array
    array.push(pivotLowPrices, pivotPriceLow)
    array.push(pivotLowIndices, pivotIndexLow)

// Remove older pivot prices if the array gets too large
if array.size(pivotHighPrices) > 20
    array.shift(pivotHighPrices)
    array.shift(pivotHighIndices)
if array.size(pivotLowPrices) > 20
    array.shift(pivotLowPrices)
    array.shift(pivotLowIndices)