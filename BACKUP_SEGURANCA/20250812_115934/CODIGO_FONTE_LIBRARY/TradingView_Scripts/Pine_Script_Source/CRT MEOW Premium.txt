//@version=6
indicator("CRT MEOW", overlay=true, max_boxes_count=500, max_labels_count=500)

// ═══════════════════════════════════════════════════════════════════════════════
// CRT MEOW - Candle Range Theory Professional Indicator
// Author: MEOW PURR
// Telegram: @MeowForex1
// Version: 1.0
// ═══════════════════════════════════════════════════════════════════════════════

// STARTUP ALERT - Shows when indicator is first attached
if barstate.isfirst
    alert("🎉 Welcome to CRT MEOW! 🎉\n\nPlease join our telegram channel for more free bots:\nTelegram Channel: https://t.me/FreeForextools145\n\nAuthor: @MeowForex1", alert.freq_once_per_bar)

// INPUTS
showCRT = input.bool(false, "Show CRT Boxes", group="Display Settings")
showSignals = input.bool(true, "Show Buy/Sell Signals", group="Display Settings")
showInsideBars = input.bool(false, "Show Inside Bar Count", group="Display Settings")

minInsideBars = input.int(1, "Minimum Inside Bars for Signal", minval=0, maxval=5, group="CRT Quality")
useTimeFilter = input.bool(true, "Use Time-Based Filter", group="CRT Quality")
useKeyLevels = input.bool(true, "Use Key Level Detection", group="CRT Quality")
keyLevelLookback = input.int(50, "Key Level Lookback", minval=10, maxval=200, group="CRT Quality")

h4Times = input.bool(true, "H4 Formation Times (9PM, 1AM, 5AM EST)", group="Time Filters")
h4PurgeTimes = input.bool(true, "H4 Purge Times (1AM, 3AM, 6AM, 9AM EST)", group="Time Filters")

// Alert Settings
enableAlerts = input.bool(true, "Enable Alerts", group="Alert Settings")
enablePushNotifications = input.bool(true, "Enable Push Notifications", group="Alert Settings")
alertFrequency = input.string("Once Per Bar", "Alert Frequency", ["Once Per Bar", "Once Per Bar Close"], group="Alert Settings")

// Colors
bullishColor = input.color(color.new(color.green, 80), "Bullish CRT Color", group="Colors")
bearishColor = input.color(color.new(color.red, 80), "Bearish CRT Color", group="Colors")
neutralColor = input.color(color.new(color.gray, 80), "Neutral CRT Color", group="Colors")
signalBuyColor = input.color(#2BBC4D, "Buy Signal Color", group="Colors")
signalSellColor = input.color(#C51D0B, "Sell Signal Color", group="Colors")

// FUNCTIONS
toEST(timeVal) =>
    timeVal - 5 * 60 * 60 * 1000

isH4FormationTime() =>
    result = true
    if timeframe.period == "240"
        hourEST = hour(toEST(time))
        result := hourEST == 21 or hourEST == 1 or hourEST == 5
    result

isH4PurgeTime() =>
    result = true
    if timeframe.period == "240"
        hourEST = hour(toEST(time))
        result := hourEST == 1 or hourEST == 3 or hourEST == 6 or hourEST == 9
    result

isInsideBar() =>
    high <= high[1] and low >= low[1]

countInsideBars() =>
    count = 0
    for i = 0 to 10
        if isInsideBar()[i]
            count += 1
        else
            break
    count

detectKeyLevel(lookback) =>
    highestHigh = ta.highest(high, lookback)
    lowestLow = ta.lowest(low, lookback)
    isNearHighLevel = math.abs(high - highestHigh) < (highestHigh - lowestLow) * 0.02
    isNearLowLevel = math.abs(low - lowestLow) < (highestHigh - lowestLow) * 0.02
    isNearHighLevel or isNearLowLevel

calculateCRTQuality(keyLevelDetected, formationTimeValid) =>
    quality = 0
    insideBars = countInsideBars()
    quality += insideBars * 11
    if useTimeFilter and formationTimeValid
        quality += 11
    if useKeyLevels and keyLevelDetected
        quality += 11
    math.min(quality, 100)

detectPurge(purgeTimeValid) =>
    bullishPurge = low < low[1] and close > low[1] and (not useTimeFilter or purgeTimeValid)
    bearishPurge = high > high[1] and close < high[1] and (not useTimeFilter or purgeTimeValid)
    [bullishPurge, bearishPurge]

detectCSD() =>
    bullishCSD = close > open and close > high[1] and volume > volume[1]
    bearishCSD = close < open and close < low[1] and volume > volume[1]
    [bullishCSD, bearishCSD]

// MAIN LOGIC
crtHigh = high
crtLow = low
crtMid = (crtHigh + crtLow) / 2
crtRange = crtHigh - crtLow

keyLevelDetected = detectKeyLevel(keyLevelLookback)
formationTimeValid = isH4FormationTime()
purgeTimeValid = isH4PurgeTime()

quality = calculateCRTQuality(keyLevelDetected, formationTimeValid)
[bullishPurge, bearishPurge] = detectPurge(purgeTimeValid)
[bullishCSD, bearishCSD] = detectCSD()
insideBarCount = countInsideBars()

qualityThreshold = minInsideBars * 11
isHighQuality = quality >= qualityThreshold

buySignal = bullishPurge and bullishCSD and isHighQuality and barstate.isconfirmed
sellSignal = bearishPurge and bearishCSD and isHighQuality and barstate.isconfirmed

// FIXED POSITIONING USING ATR
y1 = low - (ta.atr(30) * 2)   // Buy signal position below candle
y2 = high + (ta.atr(30) * 2)  // Sell signal position above candle
y1B = low - ta.atr(30)        // Alternative position
y2B = high + ta.atr(30)       // Alternative position

// VISUALIZATION - CRT Boxes
if showCRT
    crtColor = bullishPurge ? bullishColor : bearishPurge ? bearishColor : neutralColor
    box.new(bar_index[1], crtHigh[1], bar_index, crtLow[1], border_color=crtColor, bgcolor=crtColor, border_width=1)

// SIGNALS - Only arrows
buy = buySignal and showSignals ? label.new(bar_index, y1, "BUY\nQ:" + str.tostring(quality) + "%", xloc.bar_index, yloc.price, signalBuyColor, label.style_label_up, #000000, size.normal) : na
sell = sellSignal and showSignals ? label.new(bar_index, y2, "SELL\nQ:" + str.tostring(quality) + "%", xloc.bar_index, yloc.price, signalSellColor, label.style_label_down, #FFFFFF, size.normal) : na

// Inside Bar Count
insideBarLabel = showInsideBars and insideBarCount > 0 ? label.new(bar_index, y2B, str.tostring(insideBarCount) + " IB", xloc.bar_index, yloc.price, color.new(color.blue, 70), label.style_label_down, color.blue, size.tiny) : na

// ALERT SYSTEM
alertFreq = alertFrequency == "Once Per Bar" ? alert.freq_once_per_bar : alert.freq_once_per_bar_close

// Buy Alert
if enableAlerts and buySignal
    buyAlertMsg = "🎯 CRT MEOW BUY SIGNAL 🎯\n" + 
                  "Symbol: " + syminfo.ticker + "\n" +
                  "Price: " + str.tostring(close, "#.#####") + "\n" +
                  "Quality: " + str.tostring(quality) + "%\n" +
                  "Inside Bars: " + str.tostring(insideBarCount) + "\n" +
                  "By: MEOW PURR @MeowForex1\n" +
                  "Free Bots: https://t.me/FreeForextools145"
    alert(buyAlertMsg, alertFreq)

// Sell Alert
if enableAlerts and sellSignal
    sellAlertMsg = "🎯 CRT MEOW SELL SIGNAL 🎯\n" + 
                   "Symbol: " + syminfo.ticker + "\n" +
                   "Price: " + str.tostring(close, "#.#####") + "\n" +
                   "Quality: " + str.tostring(quality) + "%\n" +
                   "Inside Bars: " + str.tostring(insideBarCount) + "\n" +
                   "By: MEOW PURR @MeowForex1\n" +
                   "Free Bots: https://t.me/FreeForextools145"
    alert(sellAlertMsg, alertFreq)

// TradingView Alert Conditions
alertcondition(buySignal and enableAlerts, title="🎯 CRT MEOW - BUY Signal", message="🎯 CRT MEOW BUY Signal - Quality: {{plot_0}}% - By MEOW PURR @MeowForex1 - Free Bots: https://t.me/FreeForextools145")
alertcondition(sellSignal and enableAlerts, title="🎯 CRT MEOW - SELL Signal", message="🎯 CRT MEOW SELL Signal - Quality: {{plot_0}}% - By MEOW PURR @MeowForex1 - Free Bots: https://t.me/FreeForextools145")

plot(quality, display=display.none)

// Enhanced INFO PANEL with prominent author credit
var table infoTable = table.new(position.top_right, 2, 8, bgcolor=color.new(color.black, 80), border_width=2)

if barstate.islast
    table.cell(infoTable, 0, 0, "CRT MEOW", text_color=color.yellow, text_size=size.large)
    table.cell(infoTable, 1, 0, "by @MeowForex1", text_color=color.lime, text_size=size.normal)
    table.cell(infoTable, 0, 1, "Free Bots:", text_color=color.white, text_size=size.tiny)
    table.cell(infoTable, 1, 1, "t.me/FreeForextools145", text_color=color.aqua, text_size=size.tiny)
    table.cell(infoTable, 0, 2, "Quality:", text_color=color.white, text_size=size.small)
    table.cell(infoTable, 1, 2, str.tostring(quality) + "%", text_color=color.green, text_size=size.small)
    table.cell(infoTable, 0, 3, "Inside Bars:", text_color=color.white, text_size=size.small)
    table.cell(infoTable, 1, 3, str.tostring(insideBarCount), text_color=color.blue, text_size=size.small)
    table.cell(infoTable, 0, 4, "Time Valid:", text_color=color.white, text_size=size.small)
    timeValidSymbol = formationTimeValid ? "✓" : "✗"
    timeValidColor = formationTimeValid ? color.green : color.red
    table.cell(infoTable, 1, 4, timeValidSymbol, text_color=timeValidColor, text_size=size.small)
    table.cell(infoTable, 0, 5, "Key Level:", text_color=color.white, text_size=size.small)
    keyLevelSymbol = keyLevelDetected ? "✓" : "✗"
    keyLevelColor = keyLevelDetected ? color.green : color.red
    table.cell(infoTable, 1, 5, keyLevelSymbol, text_color=keyLevelColor, text_size=size.small)
    table.cell(infoTable, 0, 6, "Last Signal:", text_color=color.white, text_size=size.small)
    lastSignalText = buySignal ? "BUY" : sellSignal ? "SELL" : "NONE"
    lastSignalColor = buySignal ? color.green : sellSignal ? color.red : color.gray
    table.cell(infoTable, 1, 6, lastSignalText, text_color=lastSignalColor, text_size=size.small)

// Permanent Author Credit Label on Chart
if barstate.islast
    label.new(bar_index, high + ta.atr(30) * 4, "CRT MEOW by @MeowForex1\nFree Bots: t.me/FreeForextools145", 
              xloc.bar_index, yloc.price, color.new(color.blue, 70), 
              label.style_label_down, color.white, size.small)