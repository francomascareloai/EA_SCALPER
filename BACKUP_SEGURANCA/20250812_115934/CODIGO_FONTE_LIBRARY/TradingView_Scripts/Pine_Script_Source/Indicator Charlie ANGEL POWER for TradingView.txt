// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Join our channel for more free tools: https://t.me/simpleforextools

//@version=5
//Charlie`s

indicator(title='ANGEL POWER', shorttitle='CHARLIE ANGEL POWER', overlay=true)

//MOVING AVERAGE 
//long length > short length = bull market, short length > long length = bear market 

shortlen = input.int(1000, 'Short MA Length', minval=1)
longlen = 2 * shortlen
short = ta.sma(close, shortlen)
long = ta.sma(close, longlen)


// === INPUTS ===
useRes = input(defval=true, title='Use Alternate Resolution?')
intRes = input(defval=18, title='Multiplier for Alernate Resolution')
stratRes = timeframe.ismonthly ? str.tostring(timeframe.multiplier * intRes, '###M') : timeframe.isweekly ? str.tostring(timeframe.multiplier * intRes, '###W') : timeframe.isdaily ? str.tostring(timeframe.multiplier * intRes, '###D') : timeframe.isintraday ? str.tostring(timeframe.multiplier * intRes, '####') : '60'
basisType = input(defval='ALMA', title='MA Type(no repainting)')
basisLen = input.int(defval=2, title='MA Period', minval=1)
offsetSigma = input.int(defval=5, title='Sigma for ALMA', minval=0)
offsetALMA = input.float(defval=0.85, title='Offset for ALMA', minval=0, step=0.01)


// === /INPUTS ===

// === BASE FUNCTIONS ===
// Returns MA input selection variant, default to ALMA if blank or typo.
variant(type, src, len, offSig, offALMA) =>
    v1 = ta.alma(src, len, offALMA, offSig)  // Arnaud Legoux
    v2 = ta.ema(src, len)  // Exponential
    v3 = 2 * v2 - ta.ema(v2, len)  // Double Exponential
    v4 = 3 * (v2 - ta.ema(v2, len)) + ta.ema(ta.ema(v2, len), len)  // Triple Exponential
    v5 = ta.wma(src, len)  // Weighted
    v6 = ta.vwma(src, len)  // Volume Weighted
    v7 = 0.0
    sma_1 = ta.sma(src, len)  // Smoothed
    v7 := na(v7[1]) ? sma_1 : (v7[1] * (len - 1) + src) / len
    v8 = ta.wma(2 * ta.wma(src, len / 2) - ta.wma(src, len), math.round(math.sqrt(len)))  // Hull
    v9 = ta.linreg(src, len, offSig)  // Least Squares
    v10 = ta.sma(src, len)  // Simple
    v11 = ta.sma(v1, len)  // Triangular (extreme smooth)
    // SuperSmoother filter
    // © 2013  John F. Ehlers
    a1 = math.exp(-1.414 * 3.14159 / len)
    b1 = 2 * a1 * math.cos(1.414 * 3.14159 / len)
    c2 = b1
    c3 = -a1 * a1
    c1 = 1 - c2 - c3
    v12 = 0.0
    v12 := c1 * (src + nz(src[1])) / 2 + c2 * nz(v12[1]) + c3 * nz(v12[2])
    type == 'EMA' ? v2 : type == 'DEMA' ? v3 : type == 'TEMA' ? v4 : type == 'WMA' ? v5 : type == 'VWMA' ? v6 : type == 'SMMA' ? v7 : type == 'HullMA' ? v8 : type == 'LSMA' ? v9 : type == 'SMA' ? v10 : type == 'TMA' ? v11 : type == 'SSMA' ? v12 : v1

// USING ALMA IS NO REPAINTING
reso(exp, use, res) =>
    security_1 = request.security(syminfo.tickerid, res, exp, gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_on)
    use ? security_1 : exp

// === /BASE FUNCTIONS ===
//rsi + moving average
ma(source, length, type) =>
    ta.ema(source, length)

rsiLengthInput = input.int(20, minval=1, title='RSI length', group='rsiMA source')
rsiSourceInput = input.source(close, 'rsi source', group='rsiMA source')
maTypeInput = input.string('EMA', title='MA Type', group='rsiMA source')
maLengthInput = input.int(14, title='MA length', group='rsiMA source')
up = ta.rma(math.max(ta.change(rsiSourceInput), 0), rsiLengthInput)
down = ta.rma(-math.min(ta.change(rsiSourceInput), 0), rsiLengthInput)
rsi = down == 0 ? 100 : up == 0 ? 0 : 100 - 100 / (1 + up / down)

//rsiMA option
//this is main option 
rsiMA = ma(rsi, maLengthInput, maTypeInput)
MAvalue = input.int(35, minval=10, title='rsiMA value long', group='MAIN OPTION (rsiMA value)')
MAoption = rsiMA < MAvalue

MAvalue1 = input.int(65, minval=10, title='rsiMA value short', group='MAIN OPTION (rsiMA value)')
MAoption1 = rsiMA > MAvalue1

//rsi option

rsivalue = input.int(50, minval=10, title='rsi value long', group='rsi option')
rsioption = ta.rsi(close, 14) < rsivalue

rsivalue1 = input.int(50, minval=10, title='rsi value short', group='rsi option')
rsioption1 = ta.rsi(close, 14) > rsivalue1



// === SERIES SETUP ===
closeSeries = variant(basisType, close, basisLen, offsetSigma, offsetALMA)
openSeries = variant(basisType, open, basisLen, offsetSigma, offsetALMA)

// === /SERIES ===
closeSeriesAlt = reso(closeSeries, useRes, stratRes)
openSeriesAlt = reso(openSeries, useRes, stratRes)

trendColour = closeSeriesAlt > openSeriesAlt ? color.green : color.red

//ALERT conditions

xlong = ta.crossover(closeSeriesAlt, openSeriesAlt)
longCond = xlong
xshort = ta.crossunder(closeSeriesAlt, openSeriesAlt)
shortCond = xshort

plotshape(ta.crossover(closeSeriesAlt, openSeriesAlt), 'BUY', shape.labelup, location.belowbar, color.new(#1ad827, 0), text='BUY', textcolor=color.new(color.navy, 0))
plotshape(ta.crossunder(closeSeriesAlt, openSeriesAlt), 'LOW', shape.labeldown, location.abovebar, color.new(#d70bb9, 0), text='LOW', textcolor=color.new(color.white, 0))





plotshape(closeSeriesAlt > openSeriesAlt, style=shape.square, color=color.new(#282ff3, 0), location=location.bottom, size=size.small)
plotshape(closeSeriesAlt < openSeriesAlt, style=shape.square, color=color.rgb(231, 238, 38), location=location.bottom, size=size.small)

alertcondition(longCond, 'long')
alertcondition(shortCond, 'short')

//color change

colorgreen = ta.crossunder(closeSeriesAlt, openSeriesAlt)
colorred = ta.crossunder(closeSeriesAlt, openSeriesAlt)

alertcondition(colorgreen, 'color change to green')
alertcondition(colorred, 'color change to red')

i_posColor = input(color.rgb(38, 166, 154), title='Positive Color')
i_negColor = input(color.rgb(240, 83, 80), title='Negative Color')
i_midColor = input(color.rgb(211, 211, 211), title='Neural Color')



alertcondition(ta.crossover(closeSeriesAlt, openSeriesAlt) or ta.crossunder(closeSeriesAlt, openSeriesAlt), 'All in one alert')


// ==========================================================================================

// === Dashboard with Telegram Link ===
var table myTable = table.new(position.top_center, 1, 1, border_width=1, frame_color=color.black, bgcolor=color.white)

// Add Telegram Message to Dashboard
table.cell(myTable, 0, 0, "Join Telegram @simpleforextools", bgcolor=color.blue, text_color=color.white, text_size=size.normal)