// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Join our channel for more free tools: https://t.me/simpleforextools

//@version=5
//author: Dr.Pain
//rebound arrows and TMA angle caution: Ale
//rewritten from MQL5 to Pine: Burkulit
indicator("TMA Band Signal", overlay = true, max_lines_count = 500, max_labels_count = 500)

//INPUTS
// Set 1
var GRP1_1 = "Parameters 1"
HalfLength1 = input.int(12, "Centered TMA half period 1", group = GRP1_1)
string PriceType1 = input.string("Weighted", "Price to use 1", options = ["Close", "Open", "High", "Low", "Median", "Typical", "Weighted", "Average"], group = GRP1_1)
AtrPeriod1 = input.int(100, "Average true range period 1", group = GRP1_1)
AtrMultiplier1 = input.float(2, "Average true range multiplier 1", group = GRP1_1)
TMAangle1 = input.int(4, "Centered TMA angle caution 1", group = GRP1_1)
// Set 2
var GRP1_2 = "Parameters 2"
HalfLength2 = input.int(12, "Centered TMA half period 2", group = GRP1_2)
string PriceType2 = input.string("Weighted", "Price to use 2", options = ["Close", "Open", "High", "Low", "Median", "Typical", "Weighted", "Average"], group = GRP1_2)
AtrPeriod2 = input.int(100, "Average true range period 2", group = GRP1_2)
AtrMultiplier2 = input.float(2, "Average true range multiplier 2", group = GRP1_2)
TMAangle2 = input.int(4, "Centered TMA angle caution 2", group = GRP1_2)
// Set 3
var GRP1_3 = "Parameters 3"
HalfLength3 = input.int(12, "Centered TMA half period 3", group = GRP1_3)
string PriceType3 = input.string("Weighted", "Price to use 3", options = ["Close", "Open", "High", "Low", "Median", "Typical", "Weighted", "Average"], group = GRP1_3)
AtrPeriod3 = input.int(100, "Average true range period 3", group = GRP1_3)
AtrMultiplier3 = input.float(2, "Average true range multiplier 3", group = GRP1_3)
TMAangle3 = input.int(4, "Centered TMA angle caution 3", group = GRP1_3)

//VARIABLES
// Set 1
float tmac1 = na
float tmau1 = na
float tmad1 = na
var float pastTmac1 = na //from the previous candle
var float pastTmau1 = na
var float pastTmad1 = na
float tmau_temp1 = na //before looping
float tmac_temp1 = na
float tmad_temp1 = na
// Set 2
float tmac2 = na
float tmau2 = na
float tmad2 = na
var float pastTmac2 = na //from the previous candle
var float pastTmau2 = na
var float pastTmad2 = na
float tmau_temp2 = na //before looping
float tmac_temp2 = na
float tmad_temp2 = na
// Set 3
float tmac3 = na
float tmau3 = na
float tmad3 = na
var float pastTmac3 = na //from the previous candle
var float pastTmau3 = na
var float pastTmad3 = na
float tmau_temp3 = na //before looping
float tmac_temp3 = na
float tmad_temp3 = na

float point = syminfo.pointvalue //NEEDS MORE TESTS

bool last = false //checks if a loop is needed

var string alertSignal = "EMPTY" //needed for alarms to avoid repetition

//COLORS
// Set 1
var GRP2_1 = "Colors 1"
var color colorBuffer1 = na
color colorDOWN1 = input.color(color.new(color.red, 0), "Bear 1", inline = "5", group = GRP2_1)
color colorUP1 = input.color(color.new(color.green, 0), "Bull 1", inline = "5", group = GRP2_1)
color colorBands1 = input.color(color.new(#b2b5be, 0), "Bands 1", inline = "5", group = GRP2_1)
bool cautionInput1 = input.bool(true, "Caution label 1", inline = "6", group = GRP2_1)
// Set 2
var GRP2_2 = "Colors 2"
var color colorBuffer2 = na
color colorDOWN2 = input.color(color.new(color.red, 0), "Bear 2", inline = "5", group = GRP2_2)
color colorUP2 = input.color(color.new(color.green, 0), "Bull 2", inline = "5", group = GRP2_2)
color colorBands2 = input.color(color.new(#b2b5be, 0), "Bands 2", inline = "5", group = GRP2_2)
bool cautionInput2 = input.bool(true, "Caution label 2", inline = "6", group = GRP2_2)
// Set 3
var GRP2_3 = "Colors 3"
var color colorBuffer3 = na
color colorDOWN3 = input.color(color.new(color.red, 0), "Bear 3", inline = "5", group = GRP2_3)
color colorUP3 = input.color(color.new(color.green, 0), "Bull 3", inline = "5", group = GRP2_3)
color colorBands3 = input.color(color.new(#b2b5be, 0), "Bands 3", inline = "5", group = GRP2_3)
bool cautionInput3 = input.bool(true, "Caution label 3", inline = "6", group = GRP2_3)

//ALERTS
// Set 1
var GRP3_1 = "Alerts 1 (Needs to create alert manually after every change)"
bool crossUpInput1 = input.bool(false, "Crossing up 1", inline = "7", group = GRP3_1)
bool crossDownInput1 = input.bool(false, "Crossing down 1", inline = "7", group = GRP3_1)
bool comingBackInput1 = input.bool(false, "Coming back 1", inline = "7", group = GRP3_1)
bool onArrowDownInput1 = input.bool(false, "On arrow down 1", inline = "8", group = GRP3_1)
bool onArrowUpInput1 = input.bool(false, "On arrow up 1", inline = "8", group = GRP3_1)
// Set 2
var GRP3_2 = "Alerts 2 (Needs to create alert manually after every change)"
bool crossUpInput2 = input.bool(false, "Crossing up 2", inline = "7", group = GRP3_2)
bool crossDownInput2 = input.bool(false, "Crossing down 2", inline = "7", group = GRP3_2)
bool comingBackInput2 = input.bool(false, "Coming back 2", inline = "7", group = GRP3_2)
bool onArrowDownInput2 = input.bool(false, "On arrow down 2", inline = "8", group = GRP3_2)
bool onArrowUpInput2 = input.bool(false, "On arrow up 2", inline = "8", group = GRP3_2)
// Set 3
var GRP3_3 = "Alerts 3 (Needs to create alert manually after every change)"
bool crossUpInput3 = input.bool(false, "Crossing up 3", inline = "7", group = GRP3_3)
bool crossDownInput3 = input.bool(false, "Crossing down 3", inline = "7", group = GRP3_3)
bool comingBackInput3 = input.bool(false, "Coming back 3", inline = "7", group = GRP3_3)
bool onArrowDownInput3 = input.bool(false, "On arrow down 3", inline = "8", group = GRP3_3)
bool onArrowUpInput3 = input.bool(false, "On arrow up 3", inline = "8", group = GRP3_3)

//CLEAR LINES
a_allLines = line.all
if array.size(a_allLines) > 0
    for p = 0 to array.size(a_allLines) - 1
        line.delete(array.get(a_allLines, p))
        
//GET PRICE        
Price(x, PriceType) =>
    float price = switch PriceType
        "Close" => close[x]
        "Open" => open[x]
        "High" => high[x]
        "Low" => low[x]
        "Median" => (high[x] + low[x]) / 2
        "Typical" => (high[x] + low[x] + close[x]) / 3
        "Weighted" => (high[x] + low[x] + close[x] + close[x]) / 4
        "Average" => (high[x] + low[x] + close[x] + open[x])/ 4
    price

//MAIN
// Set 1
for i = HalfLength1 to 0

    //ATR
    atr1 = 0.0
    for j = 0 to  AtrPeriod1 - 1
        atr1 += math.max(high[i + j + 10], close[i + j + 11]) - math.min(low[i + j + 10], close[i + j + 11])
    atr1 /= AtrPeriod1
    
    //BANDS
    sum1 = (HalfLength1 + 1) * Price(i, PriceType1)
    sumw1 = (HalfLength1 + 1)
    k1 = HalfLength1
    for j = 1 to HalfLength1
        sum1 += k1 * Price(i + j, PriceType1)
        sumw1 += k1
        if (j <= i)
            sum1  += k1 * Price(i - j, PriceType1)
            sumw1 += k1
        k1 -= 1
    tmac1 := sum1/sumw1
    tmau1 := tmac1+AtrMultiplier1*atr1
    tmad1 := tmac1-AtrMultiplier1*atr1
    
    //ALERTS
    if i == 0 //Only on a real candle 
        if (high > tmau1 and alertSignal != "UP") //crossing up band
            if crossUpInput1 == true //checks if activated
                alert("Crossing up Band 1") //calling alert
            alertSignal := "UP" //to avoid repeating 
        else if (low < tmad1 and alertSignal != "DOWN") //crossing down band
            if crossDownInput1 == true
                alert("Crossing down Band 1")
            alertSignal := "DOWN"
        else if (alertSignal == "DOWN" and high >= tmad1 and alertSignal != "EMPTY") //back from the down band
            if comingBackInput1 == true
                alert("Coming back 1")
            alertSignal := "EMPTY"
        else if (alertSignal == "UP" and low <= tmau1 and alertSignal != "EMPTY") //back from the up band
            if comingBackInput1 == true
                alert("Coming back 1")
            alertSignal := "EMPTY"
            
    //CHANGE TREND COLOR
    if pastTmac1 != 0.0
        if tmac1 > pastTmac1
            colorBuffer1 := colorUP1
        if tmac1 < pastTmac1
            colorBuffer1 := colorDOWN1
            
    //SIGNALS
    reboundD1 = 0.0
    reboundU1 = 0.0
    caution1 = 0.0
    if pastTmac1 != 0.0
        if (high[i + 1] > pastTmau1 and close[i + 1] > open[i + 1] and close[i] < open[i])
            reboundD1 := high[i] + AtrMultiplier1 * atr1 / 2
            if (tmac1 - pastTmac1 > TMAangle1 * point)
                caution1 := reboundD1 + 10 * point
        if (low[i + 1] < pastTmad1 and close[i + 1] < open[i + 1] and close[i] > open[i])
            reboundU1 := low[i] - AtrMultiplier1 * atr1 / 2
            if (pastTmac1 - tmac1 > TMAangle1 * point)
                caution1 := reboundU1 - 10 * point
    
    //LAST REAL
    if barstate.islast and i == HalfLength1
        last := true
        tmau_temp1 := tmau1
        tmac_temp1 := tmac1
        tmad_temp1 := tmad1
        
    //DRAW HANDICAPPED BANDS
    if barstate.islast and i < HalfLength1
        line.new(bar_index - (i + 1), pastTmau1, bar_index - (i), tmau1, width = 2, style = line.style_dotted, color = colorBands1)
        line.new(bar_index - (i + 1), pastTmac1, bar_index - (i), tmac1, width = 2, style = line.style_dotted, color = colorBuffer1)
        line.new(bar_index - (i + 1), pastTmad1, bar_index - (i), tmad1, width = 2, style = line.style_dotted, color = colorBands1)
        
    //DRAW SIGNALS
    if reboundD1 != 0
        //label.new(bar_index - (i), reboundD1, color = colorDOWN1, style = label.style_triangledown, size = size.tiny, textcolor = na)
        label.new(bar_index - (i), reboundD1, '▼', color = na, textcolor = colorDOWN1, textalign=  text.align_center)
        if i == 0 and onArrowDownInput1 == true //alert
            alert("Down arrow 1") 
        if caution1 != 0 and cautionInput1 == true
            label.new(bar_index - (i), reboundD1, color = colorUP1, style = label.style_xcross, size = size.tiny, textcolor = na)
    if reboundU1 != 0
        //label.new(bar_index - (i), reboundU1, color = colorUP1, style = label.style_triangleup, size = size.tiny, textcolor = na)
        label.new(bar_index - (i), reboundU1, '▲', color = na, textcolor = colorUP1, textalign = text.align_center)
        if i == 0 and onArrowUpInput1 == true //alert
            alert("UP arrow 1") 
        if caution1 != 0 and cautionInput1 == true
            label.new(bar_index - (i), reboundU1, color = colorDOWN1, style = label.style_xcross, size = size.tiny, textcolor = na)
            
    //SAVE HISTORY
    pastTmac1 := tmac1
    pastTmau1 := tmau1
    pastTmad1 := tmad1
    
    //LOOP IS ONLY FOR HANDICAPPED
    if barstate.islast != true
        break

// Set 2
for i = HalfLength2 to 0

    //ATR
    atr2 = 0.0
    for j = 0 to  AtrPeriod2 - 1
        atr2 += math.max(high[i + j + 10], close[i + j + 11]) - math.min(low[i + j + 10], close[i + j + 11])
    atr2 /= AtrPeriod2
    
    //BANDS
    sum2 = (HalfLength2 + 1) * Price(i, PriceType2)
    sumw2 = (HalfLength2 + 1)
    k2 = HalfLength2
    for j = 1 to HalfLength2
        sum2 += k2 * Price(i + j, PriceType2)
        sumw2 += k2
        if (j <= i)
            sum2  += k2 * Price(i - j, PriceType2)
            sumw2 += k2
        k2 -= 1
    tmac2 := sum2/sumw2
    tmau2 := tmac2+AtrMultiplier2*atr2
    tmad2 := tmac2-AtrMultiplier2*atr2
    
    //ALERTS
    if i == 0 //Only on a real candle 
        if (high > tmau2 and alertSignal != "UP") //crossing up band
            if crossUpInput2 == true //checks if activated
                alert("Crossing up Band 2") //calling alert
            alertSignal := "UP" //to avoid repeating 
        else if (low < tmad2 and alertSignal != "DOWN") //crossing down band
            if crossDownInput2 == true
                alert("Crossing down Band 2")
            alertSignal := "DOWN"
        else if (alertSignal == "DOWN" and high >= tmad2 and alertSignal != "EMPTY") //back from the down band
            if comingBackInput2 == true
                alert("Coming back 2")
            alertSignal := "EMPTY"
        else if (alertSignal == "UP" and low <= tmau2 and alertSignal != "EMPTY") //back from the up band
            if comingBackInput2 == true
                alert("Coming back 2")
            alertSignal := "EMPTY"
            
    //CHANGE TREND COLOR
    if pastTmac2 != 0.0
        if tmac2 > pastTmac2
            colorBuffer2 := colorUP2
        if tmac2 < pastTmac2
            colorBuffer2 := colorDOWN2
            
    //SIGNALS
    reboundD2 = 0.0
    reboundU2 = 0.0
    caution2 = 0.0
    if pastTmac2 != 0.0
        if (high[i + 1] > pastTmau2 and close[i + 1] > open[i + 1] and close[i] < open[i])
            reboundD2 := high[i] + AtrMultiplier2 * atr2 / 2
            if (tmac2 - pastTmac2 > TMAangle2 * point)
                caution2 := reboundD2 + 10 * point
        if (low[i + 1] < pastTmad2 and close[i + 1] < open[i + 1] and close[i] > open[i])
            reboundU2 := low[i] - AtrMultiplier2 * atr2 / 2
            if (pastTmac2 - tmac2 > TMAangle2 * point)
                caution2 := reboundU2 - 10 * point
    
    //LAST REAL
    if barstate.islast and i == HalfLength2
        last := true
        tmau_temp2 := tmau2
        tmac_temp2 := tmac2
        tmad_temp2 := tmad2
        
    //DRAW HANDICAPPED BANDS
    if barstate.islast and i < HalfLength2
        line.new(bar_index - (i + 1), pastTmau2, bar_index - (i), tmau2, width = 2, style = line.style_dotted, color = colorBands2)
        line.new(bar_index - (i + 1), pastTmac2, bar_index - (i), tmac2, width = 2, style = line.style_dotted, color = colorBuffer2)
        line.new(bar_index - (i + 1), pastTmad2, bar_index - (i), tmad2, width = 2, style = line.style_dotted, color = colorBands2)
        
    //DRAW SIGNALS
    if reboundD2 != 0
        //label.new(bar_index - (i), reboundD2, color = colorDOWN2, style = label.style_triangledown, size = size.tiny, textcolor = na)
        label.new(bar_index - (i), reboundD2, '▼', color = na, textcolor = colorDOWN2, textalign=  text.align_center)
        if i == 0 and onArrowDownInput2 == true //alert
            alert("Down arrow 2") 
        if caution2 != 0 and cautionInput2 == true
            label.new(bar_index - (i), reboundD2, color = colorUP2, style = label.style_xcross, size = size.tiny, textcolor = na)
    if reboundU2 != 0
        //label.new(bar_index - (i), reboundU2, color = colorUP2, style = label.style_triangleup, size = size.tiny, textcolor = na)
        label.new(bar_index - (i), reboundU2, '▲', color = na, textcolor = colorUP2, textalign = text.align_center)
        if i == 0 and onArrowUpInput2 == true //alert
            alert("UP arrow 2") 
        if caution2 != 0 and cautionInput2 == true
            label.new(bar_index - (i), reboundU2, color = colorDOWN2, style = label.style_xcross, size = size.tiny, textcolor = na)
            
    //SAVE HISTORY
    pastTmac2 := tmac2
    pastTmau2 := tmau2
    pastTmad2 := tmad2
    
    //LOOP IS ONLY FOR HANDICAPPED
    if barstate.islast != true
        break

// Set 3
for i = HalfLength3 to 0

    //ATR
    atr3 = 0.0
    for j = 0 to  AtrPeriod3 - 1
        atr3 += math.max(high[i + j + 10], close[i + j + 11]) - math.min(low[i + j + 10], close[i + j + 11])
    atr3 /= AtrPeriod3
    
    //BANDS
    sum3 = (HalfLength3 + 1) * Price(i, PriceType3)
    sumw3 = (HalfLength3 + 1)
    k3 = HalfLength3
    for j = 1 to HalfLength3
        sum3 += k3 * Price(i + j, PriceType3)
        sumw3 += k3
        if (j <= i)
            sum3  += k3 * Price(i - j, PriceType3)
            sumw3 += k3
        k3 -= 1
    tmac3 := sum3/sumw3
    tmau3 := tmac3+AtrMultiplier3*atr3
    tmad3 := tmac3-AtrMultiplier3*atr3
    
    //ALERTS
    if i == 0 //Only on a real candle 
        if (high > tmau3 and alertSignal != "UP") //crossing up band
            if crossUpInput3 == true //checks if activated
                alert("Crossing up Band 3") //calling alert
            alertSignal := "UP" //to avoid repeating 
        else if (low < tmad3 and alertSignal != "DOWN") //crossing down band
            if crossDownInput3 == true
                alert("Crossing down Band 3")
            alertSignal := "DOWN"
        else if (alertSignal == "DOWN" and high >= tmad3 and alertSignal != "EMPTY") //back from the down band
            if comingBackInput3 == true
                alert("Coming back 3")
            alertSignal := "EMPTY"
        else if (alertSignal == "UP" and low <= tmau3 and alertSignal != "EMPTY") //back from the up band
            if comingBackInput3 == true
                alert("Coming back 3")
            alertSignal := "EMPTY"
            
    //CHANGE TREND COLOR
    if pastTmac3 != 0.0
        if tmac3 > pastTmac3
            colorBuffer3 := colorUP3
        if tmac3 < pastTmac3
            colorBuffer3 := colorDOWN3
            
    //SIGNALS
    reboundD3 = 0.0
    reboundU3 = 0.0
    caution3 = 0.0
    if pastTmac3 != 0.0
        if (high[i + 1] > pastTmau3 and close[i + 1] > open[i + 1] and close[i] < open[i])
            reboundD3 := high[i] + AtrMultiplier3 * atr3 / 2
            if (tmac3 - pastTmac3 > TMAangle3 * point)
                caution3 := reboundD3 + 10 * point
        if (low[i + 1] < pastTmad3 and close[i + 1] < open[i + 1] and close[i] > open[i])
            reboundU3 := low[i] - AtrMultiplier3 * atr3 / 2
            if (pastTmac3 - tmac3 > TMAangle3 * point)
                caution3 := reboundU3 - 10 * point
    
    //LAST REAL
    if barstate.islast and i == HalfLength3
        last := true
        tmau_temp3 := tmau3
        tmac_temp3 := tmac3
        tmad_temp3 := tmad3
        
    //DRAW HANDICAPPED BANDS
    if barstate.islast and i < HalfLength3
        line.new(bar_index - (i + 1), pastTmau3, bar_index - (i), tmau3, width = 2, style = line.style_dotted, color = colorBands3)
        line.new(bar_index - (i + 1), pastTmac3, bar_index - (i), tmac3, width = 2, style = line.style_dotted, color = colorBuffer3)
        line.new(bar_index - (i + 1), pastTmad3, bar_index - (i), tmad3, width = 2, style = line.style_dotted, color = colorBands3)
        
    //DRAW SIGNALS
    if reboundD3 != 0
        //label.new(bar_index - (i), reboundD3, color = colorDOWN3, style = label.style_triangledown, size = size.tiny, textcolor = na)
        label.new(bar_index - (i), reboundD3, '▼', color = na, textcolor = colorDOWN3, textalign=  text.align_center)
        if i == 0 and onArrowDownInput3 == true //alert
            alert("Down arrow 3") 
        if caution3 != 0 and cautionInput3 == true
            label.new(bar_index - (i), reboundD3, color = colorUP3, style = label.style_xcross, size = size.tiny, textcolor = na)
    if reboundU3 != 0
        //label.new(bar_index - (i), reboundU3, color = colorUP3, style = label.style_triangleup, size = size.tiny, textcolor = na)
        label.new(bar_index - (i), reboundU3, '▲', color = na, textcolor = colorUP3, textalign = text.align_center)
        if i == 0 and onArrowUpInput3 == true //alert
            alert("UP arrow 3") 
        if caution3 != 0 and cautionInput3 == true
            label.new(bar_index - (i), reboundU3, color = colorDOWN3, style = label.style_xcross, size = size.tiny, textcolor = na)
            
    //SAVE HISTORY
    pastTmac3 := tmac3
    pastTmau3 := tmau3
    pastTmad3 := tmad3
    
    //LOOP IS ONLY FOR HANDICAPPED
    if barstate.islast != true
        break
        
//DRAW REAL BANDS
// Set 1
plot(last ? tmau_temp1 : tmau1, title = "TMA Up 1", color = colorBands1, linewidth=1, style = plot.style_line, offset = -HalfLength1)
plot(last ? tmac_temp1 : tmac1, title = "TMA Mid 1", color = colorBuffer1, linewidth=1, style = plot.style_line, offset = -HalfLength1)
plot(last ? tmad_temp1 : tmad1, title = "TMA Down 1", color = colorBands1, linewidth=1, style = plot.style_line, offset = -HalfLength1)
// Set 2
plot(last ? tmau_temp2 : tmau2, title = "TMA Up 2", color = colorBands2, linewidth=1, style = plot.style_line, offset = -HalfLength2)
plot(last ? tmac_temp2 : tmac2, title = "TMA Mid 2", color = colorBuffer2, linewidth=1, style = plot.style_line, offset = -HalfLength2)
plot(last ? tmad_temp2 : tmad2, title = "TMA Down 2", color = colorBands2, linewidth=1, style = plot.style_line, offset = -HalfLength2)
// Set 3
plot(last ? tmau_temp3 : tmau3, title = "TMA Up 3", color = colorBands3, linewidth=1, style = plot.style_line, offset = -HalfLength3)
plot(last ? tmac_temp3 : tmac3, title = "TMA Mid 3", color = colorBuffer3, linewidth=1, style = plot.style_line, offset = -HalfLength3)
plot(last ? tmad_temp3 : tmad3, title = "TMA Down 3", color = colorBands3, linewidth=1, style = plot.style_line, offset = -HalfLength3)

// ==========================================================================================

// === Dashboard with Telegram Link ===
var table myTable = table.new(position.top_center, 1, 1, border_width=1, frame_color=color.black, bgcolor=color.white)

// Add Telegram Message to Dashboard
table.cell(myTable, 0, 0, "Join Telegram @simpleforextools", bgcolor=color.blue, text_color=color.white, text_size=size.normal)