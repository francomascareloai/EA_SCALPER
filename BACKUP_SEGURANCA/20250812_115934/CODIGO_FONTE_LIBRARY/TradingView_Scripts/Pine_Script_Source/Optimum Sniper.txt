//+------------------------------------------------------------------+
//|                                                     OptimumSniper |
//|                        Generated by Forex Code Helper GPT         |
//+------------------------------------------------------------------+
#property indicator_separate_window
#property indicator_buffers 2
#property indicator_color1 Blue
#property indicator_color2 Red

// Input parameters
extern bool showBuySell = true;
extern double sensitivity1 = 3.0;
extern double percentStop = 1.0;
extern int lenEma1 = 7;
extern int lenEma2 = 21;
extern int lenEma3 = 144;

// Indicator Buffers
double BuyBuffer[];
double SellBuffer[];

//+------------------------------------------------------------------+
//| Custom indicator initialization function                         |
//+------------------------------------------------------------------+
int OnInit()
{
    // Indicator buffers mapping
    SetIndexBuffer(0, BuyBuffer);
    SetIndexBuffer(1, SellBuffer);
    
    // Indicator display properties
    SetIndexStyle(0, DRAW_ARROW);
    SetIndexArrow(0, 233);  // Buy arrow symbol
    SetIndexArrow(1, 234);  // Sell arrow symbol

    return(INIT_SUCCEEDED);
}

//+------------------------------------------------------------------+
//| Custom indicator iteration function                              |
//+------------------------------------------------------------------+
int OnCalculate(const int rates_total,
                const int prev_calculated,
                const datetime &time[],
                const double &open[],
                const double &high[],
                const double &low[],
                const double &close[],
                const long &tick_volume[],
                const long &volume[],
                const int &spread[])
{
    // Calculate EMAs
    double ema1 = iMA(NULL, 0, lenEma1, 0, MODE_EMA, PRICE_CLOSE, 0);
    double ema2 = iMA(NULL, 0, lenEma2, 0, MODE_EMA, PRICE_CLOSE, 0);
    double ema3 = iMA(NULL, 0, lenEma3, 0, MODE_EMA, PRICE_CLOSE, 0);
    
    // ATR-based stop loss calculation
    double atr = iATR(NULL, 0, 14, 0);  // 14-period ATR
    double atrBand = Close[0] * (percentStop / 120);
    double atrStop;
    
    // Example trigger condition
    bool trigger = Close[0] > ema1;
    if (trigger) {
        atrStop = Close[0] - atrBand;
    } else {
        atrStop = Close[0] + atrBand;
    }
    
    // Example buy/sell signal
    if (showBuySell && trigger) {
        BuyBuffer[0] = Low[0] - 10 * Point;
    } else {
        BuyBuffer[0] = EMPTY_VALUE;
    }
    
    return(rates_total);
}
