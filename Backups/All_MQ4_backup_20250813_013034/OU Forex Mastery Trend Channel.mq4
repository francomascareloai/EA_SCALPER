/*
   Generated by EX4-TO-MQ4 decompiler V4.0.224.1 []
   Website: http://purebeam.biz
   E-mail : purebeam@gmail.com
*/
#property copyright "Copyright ?2009, FlyRight Software Corp."
#property link      "http://www.flyrightsoftware.com"

#property indicator_chart_window
#property indicator_buffers 1
#property indicator_color1 Red
#include "..\include\OU_Forex.mqh"
/*
#import "OU_Loader.dll"
   bool OU_called();
   bool LoadConsole();
   bool RunAllowed();
   bool VersionAllowed(string a0, string a1);
   bool PairAllowed(string a0, string a1);
   bool FeatureAllowed(string a0, string a1);
   int GetUserLevel(string a0);
#import
*/
string gs_76;
bool gi_unused_84 = FALSE;
string gs_88 = "2.00MT";
string gs_unused_96 = "2.00FT";
string gs_104 = "";
bool gi_unused_112 = FALSE;
string gsa_116[] = {"EURUSD", "GBPUSD", "USDCHF", "USDJPY", "USDCAD", "AUDUSD", "NZDUSD", "EURJPY", "EURGBP", "AUDJPY", "GBPJPY", "EURAUD", "EURCAD", "CHFJPY", "AUDCAD", "GBPCHF", "EURCHF", "NZDJPY", "CADJPY", "AUDNZD", "GBPAUD", "GBPCAD"};
int gi_120 = -1;
string gs_124 = "";
double g_ibuf_132[];
extern int AllBars = 240;
extern int BarsForFract = 0;
int gi_144 = 0;
double gd_148 = 0.0;
int gi_156 = -1;
int gi_160 = -1;
int gi_164 = 0;
double g_price_168 = 0.0;
double g_price_176 = 0.0;
double g_price_184 = 0.0;
int gi_192 = 0;
int gi_196 = 300;
int gi_200 = 0;
int gi_204 = 0;
double gd_208 = 0.0;
int g_time_216;
int g_time_220;
bool gi_224 = FALSE;
bool gi_228 = FALSE;

bool OU_loader_call() {
   string ls_unused_0;
   if (!OU_called()) LoadConsole();
   return (OU_called());
}

int DrawAllowed(string &as_0, string as_8) {
   as_8 = BaseSymbol(as_8);
   if (!OU_loader_call()) {
      as_0 = "failure loading console.";
      return (0);
   }
   if (!RunAllowed()) {
      as_0 = "waiting for console.";
      return (0);
   }
   if (!VersionAllowed(gs_76, gs_104)) {
      as_0 = "version " + gs_104 + " outdated." + VersionAllowed(gs_76, gs_104) + 0 + 1;
      return (0);
   }
   if (as_8 == "Scanner.") return (1);
   if (!PairAllowed(gs_76, as_8)) {
      if (validpair(gs_76, as_8)) as_0 = "unsubscribed pair.";
      else as_0 = "unsupported pair.";
      return (0);
   }
   return (1);
}

bool validpair(string as_0, string as_8) {
   string ls_16 = pairtype(as_8);
   if (ls_16 == "4" || ls_16 == "10") return (TRUE);
   if (as_0 == "OUFT" && ls_16 == "17" || ls_16 == "22") return (TRUE);
   return (FALSE);
}

string pairtype(string as_0) {
   string ls_8 = "USDIX,EURUSD,GBPUSD,USDCHF,USDJPY";
   string ls_16 = "EURUSD,GBPUSD,USDCHF,USDJPY,USDCAD,AUDUSD,NZDUSD,EURJPY,EURGBP,AUDJPY";
   string ls_24 = "EURUSD,GBPUSD,USDCHF,USDJPY,USDCAD,AUDUSD,NZDUSD,EURJPY,EURGBP,AUDJPY,GBPJPY,EURAUD,EURCAD,CHFJPY,AUDCAD,GBPCHF,EURCHF";
   string ls_32 = "EURUSD,GBPUSD,USDCHF,USDJPY,USDCAD,AUDUSD,NZDUSD,EURJPY,EURGBP,AUDJPY,GBPJPY,EURAUD,EURCAD,CHFJPY,AUDCAD,GBPCHF,EURCHF,NZDJPY,CADJPY,AUDNZD,GBPAUD,GBPCAD";
   as_0 = StringSubstr(as_0, 0, 6);
   if (StringFind(ls_8, as_0) > -1) as_0 = "4";
   else {
      if (StringFind(ls_16, as_0) > -1) as_0 = "10";
      else {
         if (StringFind(ls_24, as_0) > -1) as_0 = "17";
         else {
            if (StringFind(ls_32, as_0) > -1) as_0 = "22";
            else as_0 = "1000";
         }
      }
   }
   return (as_0);
}

string BaseSymbol(string as_0) {
   if (gi_120 == -1) SetSymbolSuffixLength();
   if (as_0 == "Scanner.") return (as_0);
   if (gi_120 == 0 || StringSubstr(as_0, StringLen(as_0) - gi_120) != gs_124) return (as_0);
   return (StringSubstr(as_0, 0, StringLen(as_0) - gi_120));
}

void SetSymbolSuffixLength() {
   string lsa_0[1000];
   SymbolsList(lsa_0, 0);
   for (int l_index_4 = 0; StringSubstr(lsa_0[l_index_4], 0, 6) != "EURUSD" && l_index_4 < 1000; l_index_4++) {
   }
   gi_120 = StringLen(lsa_0[l_index_4]) - 6;
   gs_124 = StringSubstr(lsa_0[l_index_4], 6);
}

int SymbolsList(string &asa_0[1000], bool ai_4) {
   string l_name_8;
   int li_16;
   int li_ret_20;
   if (ai_4) l_name_8 = "symbols.sel";
   else l_name_8 = "symbols.raw";
   int l_file_24 = FileOpenHistory(l_name_8, FILE_BIN|FILE_READ);
   if (l_file_24 < 0) {
      Print("Symbol open failure.");
      return (-1);
   }
   if (ai_4) {
      li_ret_20 = (FileSize(l_file_24) - 4) / 128;
      li_16 = 116;
   } else {
      li_ret_20 = FileSize(l_file_24) / 1936;
      li_16 = 1924;
   }
   ArrayResize(asa_0, li_ret_20);
   if (ai_4) FileSeek(l_file_24, 4, SEEK_SET);
   for (int l_index_28 = 0; l_index_28 < li_ret_20; l_index_28++) {
      asa_0[l_index_28] = FileReadString(l_file_24, 12);
      FileSeek(l_file_24, li_16, SEEK_CUR);
   }
   FileClose(l_file_24);
   return (li_ret_20);
}

int init() {
   if (!IsDllsAllowed()) Alert("Enable Dlls under Tools/OPtions for OU_Forex_pricelines.");
   gs_76 = "OUFM";
   gs_104 = gs_88;
   OU_loader_call();
   SetIndexStyle(0, DRAW_ARROW);
   SetIndexArrow(0, 164);
   SetIndexBuffer(0, g_ibuf_132);
   SetIndexEmptyValue(0, 0.0);
   return (0);
}

int deinit() {
   ObjectDelete("TL1");
   ObjectDelete("TL2");
   ObjectDelete("MIDL");
   Comment(" ");
   return (0);
}

void DelObj() {
   ObjectDelete("TL1");
   ObjectDelete("TL2");
   ObjectDelete("MIDL");
}

int start() {
   color l_color_16;
   color l_color_20;
   int l_ind_counted_0 = IndicatorCounted();
   if (l_ind_counted_0 < 0) return (-1);
   string ls_4 = "";
   if (!DrawAllowed(ls_4, Symbol())) {
      if (!gi_228) Print(ls_4);
      gi_228 = TRUE;
      gi_224 = FALSE;
      DelObj();
      return (-1);
   }
   if (!gi_224) {
      l_ind_counted_0 = 0;
      gi_224 = TRUE;
      gi_228 = FALSE;
   }
   if (AllBars == 0 || Bars < AllBars) gi_196 = Bars;
   else gi_196 = AllBars;
   if (BarsForFract > 0) gi_200 = BarsForFract;
   else {
      switch (Period()) {
      case PERIOD_M1:
         gi_200 = 12;
         break;
      case PERIOD_M5:
         gi_200 = 48;
         break;
      case PERIOD_M15:
         gi_200 = 24;
         break;
      case PERIOD_M30:
         gi_200 = 24;
         break;
      case PERIOD_H1:
         gi_200 = 12;
         break;
      case PERIOD_H4:
         gi_200 = 15;
         break;
      case PERIOD_D1:
         gi_200 = 10;
         break;
      case PERIOD_W1:
         gi_200 = 6;
         break;
      default:
         DelObj();
         return (-1);
      }
   }
   gi_144 = 2;
   gi_156 = -1;
   gi_160 = -1;
   gi_164 = 0;
   while (gi_156 == -1 || gi_160 == -1 && gi_144 < gi_196) {
      if (gi_164 < 1 && gi_144 == iLowest(Symbol(), Period(), MODE_LOW, gi_200 * 2 + 1, gi_144 - gi_200)) {
         if (gi_164 == 0) {
            gi_164 = -1;
            gi_156 = gi_144;
            g_price_168 = Low[gi_156];
         } else {
            gi_160 = gi_144;
            g_price_176 = Low[gi_160];
         }
      }
      if (gi_164 > -1 && gi_144 == iHighest(Symbol(), Period(), MODE_HIGH, gi_200 * 2 + 1, gi_144 - gi_200)) {
         if (gi_164 == 0) {
            gi_164 = 1;
            gi_156 = gi_144;
            g_price_168 = High[gi_156];
         } else {
            gi_160 = gi_144;
            g_price_176 = High[gi_160];
         }
      }
      gi_144++;
   }
   if (gi_156 == -1 || gi_160 == -1) {
      DelObj();
      return (-1);
   }
   gd_148 = (g_price_176 - g_price_168) / (gi_160 - gi_156);
   g_price_168 -= gi_156 * gd_148;
   gi_156 = 0;
   gi_204 = 0;
   gd_208 = 0;
   if (gi_164 == 1) {
      g_price_184 = Low[2] - 2.0 * gd_148;
      for (gi_192 = 3; gi_192 <= gi_160; gi_192++)
         if (Low[gi_192] < g_price_184 + gd_148 * gi_192) g_price_184 = Low[gi_192] - gi_192 * gd_148;
      if (Low[0] < g_price_184) {
         gi_204 = 0;
         gd_208 = g_price_184;
      }
      if (Low[1] < g_price_184 + gd_148) {
         gi_204 = 1;
         gd_208 = g_price_184 + gd_148;
      }
      if (High[0] > g_price_168) {
         gi_204 = 0;
         gd_208 = g_price_168;
      }
      if (High[1] > g_price_168 + gd_148) {
         gi_204 = 1;
         gd_208 = g_price_168 + gd_148;
      }
   } else {
      g_price_184 = High[2] - 2.0 * gd_148;
      for (gi_192 = 3; gi_192 <= gi_160; gi_192++)
         if (High[gi_192] > g_price_184 + gd_148 * gi_192) g_price_184 = High[gi_192] - gi_192 * gd_148;
      if (Low[0] < g_price_168) {
         gi_204 = 0;
         gd_208 = g_price_168;
      }
      if (Low[1] < g_price_168 + gd_148) {
         gi_204 = 1;
         gd_208 = g_price_168 + gd_148;
      }
      if (High[0] > g_price_184) {
         gi_204 = 0;
         gd_208 = g_price_184;
      }
      if (High[1] > g_price_184 + gd_148) {
         gi_204 = 1;
         gd_208 = g_price_184 + gd_148;
      }
   }
   g_price_176 = g_price_168 + gi_196 * gd_148;
   g_time_216 = Time[gi_156];
   g_time_220 = Time[gi_196];
   if (gd_208 != 0.0) g_ibuf_132[gi_204] = gd_208;
   DelObj();
   if (g_price_184 > g_price_168) {
      l_color_16 = Red;
      l_color_20 = Lime;
   } else {
      l_color_16 = Lime;
      l_color_20 = Red;
   }
   ObjectCreate("TL1", OBJ_TREND, 0, g_time_220, g_price_184 + gd_148 * gi_196, g_time_216, g_price_184);
   ObjectSet("TL1", OBJPROP_COLOR, l_color_16);
   ObjectSet("TL1", OBJPROP_WIDTH, 2);
   ObjectSet("TL1", OBJPROP_STYLE, STYLE_SOLID);
   ObjectCreate("TL2", OBJ_TREND, 0, g_time_220, g_price_176, g_time_216, g_price_168);
   ObjectSet("TL2", OBJPROP_COLOR, l_color_20);
   ObjectSet("TL2", OBJPROP_WIDTH, 2);
   ObjectSet("TL2", OBJPROP_STYLE, STYLE_SOLID);
   ObjectCreate("MIDL", OBJ_TREND, 0, g_time_220, (g_price_176 + g_price_184 + gd_148 * gi_196) / 2.0, g_time_216, (g_price_168 + g_price_184) / 2.0);
   ObjectSet("MIDL", OBJPROP_COLOR, DeepSkyBlue);
   ObjectSet("MIDL", OBJPROP_WIDTH, 1);
   ObjectSet("MIDL", OBJPROP_STYLE, STYLE_DOT);
   Comment(" Channel size = ", DoubleToStr(MathAbs(g_price_184 - g_price_168) / Point, 0), " Slope = ", DoubleToStr((-gd_148) / Point, 2));
   return (0);
}