/*
   Generated by EX4-TO-MQ4 decompiler V4.0.224.1 []
   Website: http://purebeam.biz
   E-mail : purebeam@gmail.com
*/
#property copyright "Copyright ?2009, MetaQuotes Software Corp."
#property link      "http://www.flyrightsoftware.com"

#property indicator_separate_window
#property indicator_minimum -100.0
#property indicator_maximum 100.0
#property indicator_buffers 2
#property indicator_color1 Green
#property indicator_color2 Red

#include "..\include\OU_Forex.mqh"

#import "user32.dll"
   int GetDC(int a0);
   int ReleaseDC(int a0, int a1);
#import "gdi32.dll"
   int GetPixel(int a0, int a1, int a2);
/*
#import "OU_Loader.dll"
   bool OU_called();
   bool LoadConsole();
   bool RunAllowed();
   bool VersionAllowed(string a0, string a1);
   bool PairAllowed(string a0, string a1);
   bool FeatureAllowed(string a0, string a1);
   int GetUserLevel(string a0);
*/
#import

string gs_76;
bool gi_unused_84 = FALSE;
string gs_88 = "2.00MT";
string gs_unused_96 = "2.00FT";
string gs_104 = "";
bool gi_unused_112 = FALSE;
string gsa_116[] = {"EURUSD", "GBPUSD", "USDCHF", "USDJPY", "USDCAD", "AUDUSD", "NZDUSD", "EURJPY", "EURGBP", "AUDJPY", "GBPJPY", "EURAUD", "EURCAD", "CHFJPY", "AUDCAD", "GBPCHF", "EURCHF", "NZDJPY", "CADJPY", "AUDNZD", "GBPAUD", "GBPCAD"};
int gi_120 = -1;
string gs_124 = "";
int gi_132 = 14;
int g_period_136 = 5;
int g_period_140 = 3;
int g_period_144 = 3;
extern int Show_Bars = 5000;
int gi_unused_152 = 0;
extern int ZoomLevel1to5 = 2;
extern bool ShowPriceMarker = TRUE;
extern bool ShowCrossover = TRUE;
bool gi_168 = TRUE;
double g_ibuf_172[];
double g_ibuf_176[];
double g_ibuf_180[];
double g_ibuf_184[];
double g_ibuf_188[];
double g_ibuf_192[];
double g_ibuf_196[];
double g_ibuf_200[];
string gs_dummy_204;
string gs_dummy_212;
bool gi_unused_220 = FALSE;
string gs_224;
string gs_232 = "1 - Trend Momentum";
string gs_oufm_tm_240 = "OUFM TM";
bool gi_unused_248 = FALSE;

int chartcolor() {
   int li_0 = WindowHandle(Symbol(), Period());
   int li_4 = GetDC(li_0);
   int li_ret_8 = GetPixel(li_4, 1, 2);
   ReleaseDC(li_0, li_4);
   return (li_ret_8);
}

bool OU_loader_call() {
   string ls_unused_0;
   if (!OU_called()) LoadConsole();
   return (OU_called());
}

int DrawAllowed(string &as_0, string as_8) {
   as_8 = BaseSymbol(as_8);
   if (!OU_loader_call()) {
      as_0 = "failure loading console.";
      return (0);
   }
   if (!RunAllowed()) {
      as_0 = "waiting for console.";
      return (0);
   }
   if (!VersionAllowed(gs_76, gs_104)) {
      as_0 = "version " + gs_104 + " outdated." + VersionAllowed(gs_76, gs_104) + 0 + 1;
      return (0);
   }
   if (as_8 == "Scanner.") return (1);
   if (!PairAllowed(gs_76, as_8)) {
      if (validpair(gs_76, as_8)) as_0 = "unsubscribed pair.";
      else as_0 = "unsupported pair.";
      return (0);
   }
   return (1);
}

bool validpair(string as_0, string as_8) {
   string ls_16 = pairtype(as_8);
   if (ls_16 == "4" || ls_16 == "10") return (TRUE);
   if (as_0 == "OUFT" && ls_16 == "17" || ls_16 == "22") return (TRUE);
   return (FALSE);
}

string pairtype(string as_0) {
   string ls_8 = "USDIX,EURUSD,GBPUSD,USDCHF,USDJPY";
   string ls_16 = "EURUSD,GBPUSD,USDCHF,USDJPY,USDCAD,AUDUSD,NZDUSD,EURJPY,EURGBP,AUDJPY";
   string ls_24 = "EURUSD,GBPUSD,USDCHF,USDJPY,USDCAD,AUDUSD,NZDUSD,EURJPY,EURGBP,AUDJPY,GBPJPY,EURAUD,EURCAD,CHFJPY,AUDCAD,GBPCHF,EURCHF";
   string ls_32 = "EURUSD,GBPUSD,USDCHF,USDJPY,USDCAD,AUDUSD,NZDUSD,EURJPY,EURGBP,AUDJPY,GBPJPY,EURAUD,EURCAD,CHFJPY,AUDCAD,GBPCHF,EURCHF,NZDJPY,CADJPY,AUDNZD,GBPAUD,GBPCAD";
   as_0 = StringSubstr(as_0, 0, 6);
   if (StringFind(ls_8, as_0) > -1) as_0 = "4";
   else {
      if (StringFind(ls_16, as_0) > -1) as_0 = "10";
      else {
         if (StringFind(ls_24, as_0) > -1) as_0 = "17";
         else {
            if (StringFind(ls_32, as_0) > -1) as_0 = "22";
            else as_0 = "1000";
         }
      }
   }
   return (as_0);
}

string BaseSymbol(string as_0) {
   if (gi_120 == -1) SetSymbolSuffixLength();
   if (as_0 == "Scanner.") return (as_0);
   if (gi_120 == 0 || StringSubstr(as_0, StringLen(as_0) - gi_120) != gs_124) return (as_0);
   return (StringSubstr(as_0, 0, StringLen(as_0) - gi_120));
}

void SetSymbolSuffixLength() {
   string lsa_0[1000];
   SymbolsList(lsa_0, 0);
   for (int l_index_4 = 0; StringSubstr(lsa_0[l_index_4], 0, 6) != "EURUSD" && l_index_4 < 1000; l_index_4++) {
   }
   gi_120 = StringLen(lsa_0[l_index_4]) - 6;
   gs_124 = StringSubstr(lsa_0[l_index_4], 6);
}

int SymbolsList(string &asa_0[1000], bool ai_4) {
   string l_name_8;
   int li_16;
   int li_ret_20;
   if (ai_4) l_name_8 = "symbols.sel";
   else l_name_8 = "symbols.raw";
   int l_file_24 = FileOpenHistory(l_name_8, FILE_BIN|FILE_READ);
   if (l_file_24 < 0) {
      Print("Symbol open failure.");
      return (-1);
   }
   if (ai_4) {
      li_ret_20 = (FileSize(l_file_24) - 4) / 128;
      li_16 = 116;
   } else {
      li_ret_20 = FileSize(l_file_24) / 1936;
      li_16 = 1924;
   }
   ArrayResize(asa_0, li_ret_20);
   if (ai_4) FileSeek(l_file_24, 4, SEEK_SET);
   for (int l_index_28 = 0; l_index_28 < li_ret_20; l_index_28++) {
      asa_0[l_index_28] = FileReadString(l_file_24, 12);
      FileSeek(l_file_24, li_16, SEEK_CUR);
   }
   FileClose(l_file_24);
   return (li_ret_20);
}

int init() {
   if (!IsDllsAllowed()) Alert("Enable Dlls under Tools/OPtions for OU_Forex_pricelines.");
   gs_76 = "OUFM";
   gs_104 = gs_88;
   OU_loader_call();
   deleteobjects();
   IndicatorBuffers(8);
   SetIndexEmptyValue(0, 0.0);
   SetIndexBuffer(0, g_ibuf_172);
   SetIndexLabel(0, "LineA");
   SetIndexEmptyValue(1, 0.0);
   SetIndexBuffer(1, g_ibuf_176);
   SetIndexLabel(1, "LineB LineA");
   SetIndexEmptyValue(2, 0.0);
   SetIndexBuffer(2, g_ibuf_180);
   SetIndexStyle(2, DRAW_NONE);
   SetIndexEmptyValue(3, 0.0);
   SetIndexBuffer(3, g_ibuf_184);
   SetIndexStyle(3, DRAW_NONE);
   SetIndexEmptyValue(4, 0.0);
   SetIndexBuffer(4, g_ibuf_188);
   SetIndexStyle(4, DRAW_NONE);
   SetIndexEmptyValue(5, 0.0);
   SetIndexBuffer(5, g_ibuf_192);
   SetIndexStyle(5, DRAW_NONE);
   SetIndexEmptyValue(6, 0.0);
   SetIndexBuffer(6, g_ibuf_196);
   SetIndexStyle(6, DRAW_NONE);
   SetIndexEmptyValue(7, 0.0);
   SetIndexBuffer(7, g_ibuf_200);
   SetIndexStyle(7, DRAW_NONE);
   gs_224 = gs_232;
   IndicatorShortName(gs_224);
   return (0);
}

int deinit() {
   return (0);
}

int start() {
   int li_4;
   bool li_20;
   RefreshRates();
   int l_ind_counted_0 = IndicatorCounted();
   string ls_12 = "";
   setmidlinecolor();
   if (l_ind_counted_0 < 0) return (-1);
   if (!DrawAllowed(ls_12, Symbol())) {
      gs_224 = gs_232 + " - " + ls_12;
      IndicatorShortName(gs_224);
      deleteobjects();
      li_20 = FALSE;
      return (-1);
   }
   if (!li_20) {
      gs_224 = gs_232;
      IndicatorShortName(gs_232);
      li_20 = TRUE;
      li_4 = Show_Bars;
   } else li_4 = l_ind_counted_0;
   if (gi_168) createobjects();
   if (li_4 >= Bars - 1) li_4 = Bars - 1;
   if (li_4 >= Show_Bars) li_4 = Show_Bars;
   for (int li_8 = li_4; li_8 >= 0; li_8--) {
      g_ibuf_180[li_8] = Close[li_8] - (High[iHighest(Symbol(), 0, MODE_HIGH, gi_132, li_8)] + Low[iLowest(Symbol(), 0, MODE_LOW, gi_132, li_8)]) / 2.0;
      g_ibuf_200[li_8] = High[iHighest(Symbol(), 0, MODE_HIGH, gi_132, li_8)] - Low[iLowest(Symbol(), 0, MODE_LOW, gi_132, li_8)];
   }
   for (li_8 = li_4 - g_period_136; li_8 >= 0; li_8--) {
      g_ibuf_184[li_8] = iMAOnArray(g_ibuf_180, 0, g_period_136, 0, MODE_EMA, li_8);
      g_ibuf_192[li_8] = iMAOnArray(g_ibuf_200, 0, g_period_136, 0, MODE_EMA, li_8);
   }
   for (li_8 = li_4 - g_period_136 - g_period_140; li_8 >= 0; li_8--) {
      g_ibuf_188[li_8] = iMAOnArray(g_ibuf_184, 0, g_period_140, 0, MODE_EMA, li_8);
      g_ibuf_196[li_8] = iMAOnArray(g_ibuf_192, 0, g_period_140, 0, MODE_EMA, li_8);
   }
   for (li_8 = li_4 - g_period_136 - g_period_140 - g_period_144; li_8 >= 0; li_8--) g_ibuf_172[li_8] = 100.0 * (g_ibuf_188[li_8] / (g_ibuf_196[li_8] / 2.0));
   for (li_8 = li_4 - g_period_136 - g_period_140; li_8 >= 0; li_8--) {
      g_ibuf_176[li_8] = iMAOnArray(g_ibuf_172, 0, g_period_144, 0, MODE_EMA, li_8);
      if (li_8 == 0) break;
      if (ShowPriceMarker) Draw_PriceMarker(li_8, LightGray);
      if (ShowCrossover) {
         if (g_ibuf_172[li_8 + 2] > g_ibuf_172[li_8 + 1] && g_ibuf_172[li_8 + 1] < g_ibuf_172[li_8]) Draw_Crossover(li_8, Green, 1);
         else
            if (g_ibuf_172[li_8 + 2] < g_ibuf_172[li_8 + 1] && g_ibuf_172[li_8 + 1] > g_ibuf_172[li_8]) Draw_Crossover(li_8, Red, 0);
      }
   }
   return (0);
}

int deleteobjects() {
   string l_name_4;
   ObjectDelete(gs_oufm_tm_240 + "TM_Candle1");
   ObjectDelete("TM1HL50");
   ObjectDelete("TM1HL0");
   ObjectDelete("TM1HL-50");
   ObjectDelete("GA2HL80");
   ObjectDelete("GA2HL50");
   ObjectDelete("GA2HL20");
   ObjectDelete("GA1HL-50");
   int li_0 = ObjectsTotal() - 1;
   for (int li_12 = li_0; li_12 >= 0; li_12--) {
      l_name_4 = ObjectName(li_12);
      if (StringSubstr(l_name_4, 0, 4) == "OUFM") ObjectDelete(l_name_4);
   }
   gi_168 = TRUE;
   return (0);
}

int createobjects() {
   int l_window_0 = WindowFind(gs_224);
   if (l_window_0 != -1) {
      ObjectDelete("TM1HL50");
      ObjectCreate("TM1HL50", OBJ_HLINE, l_window_0, 0, 50, 0, 0, 0, 0);
      ObjectSet("TM1HL50", OBJPROP_STYLE, STYLE_SOLID);
      ObjectSet("TM1HL50", OBJPROP_COLOR, Red);
      ObjectSet("TM1HL50", OBJPROP_WIDTH, 2);
      ObjectDelete("TM1HL0");
      ObjectCreate("TM1HL0", OBJ_HLINE, l_window_0, 0, 0, 0, 0, 0, 0);
      ObjectSet("TM1HL0", OBJPROP_STYLE, STYLE_SOLID);
      ObjectSet("TM1HL0", OBJPROP_WIDTH, 2);
      setmidlinecolor();
      ObjectDelete("TM1HL-50");
      ObjectCreate("TM1HL-50", OBJ_HLINE, l_window_0, 0, -50, 0, 0, 0, 0);
      ObjectSet("TM1HL-50", OBJPROP_STYLE, STYLE_SOLID);
      ObjectSet("TM1HL-50", OBJPROP_COLOR, Green);
      ObjectSet("TM1HL-50", OBJPROP_WIDTH, 2);
   }
   return (0);
}

void Draw_Crossover(int ai_0, color a_color_4, bool ai_8) {
   double l_price_20;
   double l_price_28;
   string l_name_12 = gs_oufm_tm_240 + TimeToStr(Time[ai_0]);
   if (ai_8) {
      l_price_28 = MathMax(g_ibuf_176[ai_0], g_ibuf_172[ai_0]) + 4.0;
      l_price_20 = l_price_28 + 3.0;
   } else {
      l_price_20 = MathMin(g_ibuf_176[ai_0], g_ibuf_172[ai_0]) - 4.0;
      l_price_28 = l_price_20 - 3.0;
   }
   ObjectDelete(l_name_12);
   ObjectCreate(l_name_12, OBJ_TREND, WindowFind(gs_224), Time[ai_0], l_price_20, Time[ai_0], l_price_28, 0, 0);
   ObjectSet(l_name_12, OBJPROP_COLOR, a_color_4);
   ObjectSet(l_name_12, OBJPROP_BACK, FALSE);
   ObjectSet(l_name_12, OBJPROP_RAY, FALSE);
   ObjectSet(l_name_12, OBJPROP_WIDTH, 5.0 * ZoomFactor());
}

void Draw_PriceMarker(int ai_0, color a_color_4) {
   ObjectDelete(gs_oufm_tm_240 + "TM_Candle1");
   ObjectCreate(gs_oufm_tm_240 + "TM_Candle1", OBJ_TREND, WindowFind(gs_224), Time[ai_0], 100, Time[ai_0], -100, 0, 0);
   ObjectSet(gs_oufm_tm_240 + "TM_Candle1", OBJPROP_COLOR, a_color_4);
   ObjectSet(gs_oufm_tm_240 + "TM_Candle1", OBJPROP_BACK, TRUE);
   ObjectSet(gs_oufm_tm_240 + "TM_Candle1", OBJPROP_RAY, FALSE);
   ObjectSet(gs_oufm_tm_240 + "TM_Candle1", OBJPROP_WIDTH, 8.0 * ZoomFactor());
}

double ZoomFactor() {
   if (ZoomLevel1to5 == 1) return (2.5);
   if (ZoomLevel1to5 == 2) return (1);
   if (ZoomLevel1to5 == 3) return (0.7);
   if (ZoomLevel1to5 == 4) return (0.25);
   if (ZoomLevel1to5 == 5) return (0.1);
   return (1);
}

void setmidlinecolor() {
   if (chartcolor() == 16777215) {
      ObjectSet("TM1HL0", OBJPROP_COLOR, Black);
      return;
   }
   ObjectSet("TM1HL0", OBJPROP_COLOR, DarkSlateGray);
}