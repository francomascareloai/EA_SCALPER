/*
   Generated by EX4-TO-MQ4 decompiler V4.0.224.1 []
   Website: http://purebeam.biz
   E-mail : purebeam@gmail.com
*/

#property indicator_separate_window
#property indicator_minimum 0.0
#property indicator_maximum 3.0
#property indicator_buffers 6
#property indicator_color1 Blue
#property indicator_color2 Red
#property indicator_color3 Blue
#property indicator_color4 Red
#property indicator_color5 Blue
#property indicator_color6 Red

string gs_unused_76 = "Signal Set 1";
int g_period_84 = 10;
int g_ma_method_88 = MODE_EMA;
int g_applied_price_92 = PRICE_CLOSE;
int g_period_96 = 35;
int g_ma_method_100 = MODE_EMA;
int g_applied_price_104 = PRICE_CLOSE;
string gs_unused_108 = "Signal Set 2";
int g_period_116 = 20;
int g_ma_method_120 = MODE_EMA;
int g_applied_price_124 = PRICE_CLOSE;
int g_period_128 = 50;
int g_ma_method_132 = MODE_EMA;
int g_applied_price_136 = PRICE_CLOSE;
int gi_140 = 0;
int gi_144 = 4;
int g_color_148 = Lime;
int g_color_152 = Red;
int g_color_156 = Yellow;
int gi_160 = 3;
int gi_164 = 2;
int gi_unused_168 = 1;
int gi_unused_172 = 0;
double gd_176 = 0.2;
bool gi_unused_184 = TRUE;
double gd_unused_188 = 0.5;
int gi_unused_196 = 20;
int gi_unused_200 = 16711680;
int gi_unused_204 = 255;
string gs_unused_208 = "";
string gs_216;
double g_ibuf_224[];
double g_ibuf_228[];
double g_ibuf_232[];
double g_ibuf_236[];
double g_ibuf_240[];
double g_ibuf_244[];
double g_ima_248;
double g_ima_256;
double g_ima_264;
double g_ima_272;
double g_ima_280;
double g_ima_288;
double g_ima_296;
double g_ima_304;

int init() {
   int li_0;
   int li_4;
   int li_8;
   if (gi_140 == 0) {
      li_0 = 167;
      li_4 = 167;
      li_8 = 167;
   }
   SetIndexStyle(0, DRAW_ARROW, STYLE_SOLID, gi_144, g_color_148);
   SetIndexArrow(0, li_0);
   SetIndexBuffer(0, g_ibuf_224);
   SetIndexEmptyValue(0, 0.0);
   SetIndexStyle(1, DRAW_ARROW, STYLE_SOLID, gi_144, g_color_152);
   SetIndexArrow(1, li_4);
   SetIndexBuffer(1, g_ibuf_228);
   SetIndexEmptyValue(1, 0.0);
   SetIndexStyle(2, DRAW_ARROW, STYLE_SOLID, gi_144, g_color_156);
   SetIndexArrow(2, li_8);
   SetIndexBuffer(2, g_ibuf_232);
   SetIndexEmptyValue(2, 0.0);
   SetIndexStyle(3, DRAW_ARROW, STYLE_SOLID, gi_144, g_color_148);
   SetIndexArrow(3, li_0);
   SetIndexBuffer(3, g_ibuf_236);
   SetIndexEmptyValue(3, 0.0);
   SetIndexStyle(4, DRAW_ARROW, STYLE_SOLID, gi_144, g_color_152);
   SetIndexArrow(4, li_4);
   SetIndexBuffer(4, g_ibuf_240);
   SetIndexEmptyValue(4, 0.0);
   SetIndexStyle(5, DRAW_ARROW, STYLE_SOLID, gi_144, g_color_156);
   SetIndexArrow(5, li_8);
   SetIndexBuffer(5, g_ibuf_244);
   SetIndexEmptyValue(5, 0.0);
   SetIndexLabel(0, "SignalSet1.Buffer.UP");
   SetIndexLabel(1, "SignalSet1.Buffer.DN");
   SetIndexLabel(2, "SignalSet1.Buffer.SW");
   SetIndexLabel(3, "SignalSet2.Buffer.DN");
   SetIndexLabel(4, "SingalSet2.Buffer.UP");
   SetIndexLabel(5, "SingalSet2.Buffer.SW");
   IndicatorDigits(0);
   gs_216 = "Signal Generator " + Symbol();
   IndicatorShortName(gs_216);
   return (0);
}

int deinit() {
   return (0);
}

int start() {
   int li_0 = IndicatorCounted();
   if (li_0 < 0) return (-1);
   if (li_0 > 0) li_0--;
   int li_8 = Bars - li_0;
   for (int li_4 = li_8; li_4 >= 0; li_4--) {
      g_ima_248 = iMA(NULL, 0, g_period_84, 0, g_ma_method_88, g_applied_price_92, li_4);
      g_ima_256 = iMA(NULL, 0, g_period_84, 0, g_ma_method_88, g_applied_price_92, li_4 + 1);
      g_ima_264 = iMA(NULL, 0, g_period_96, 0, g_ma_method_100, g_applied_price_104, li_4);
      g_ima_272 = iMA(NULL, 0, g_period_96, 0, g_ma_method_100, g_applied_price_104, li_4 + 1);
      g_ima_280 = iMA(NULL, 0, g_period_116, 0, g_ma_method_120, g_applied_price_124, li_4);
      g_ima_288 = iMA(NULL, 0, g_period_116, 0, g_ma_method_120, g_applied_price_124, li_4 + 1);
      g_ima_296 = iMA(NULL, 0, g_period_128, 0, g_ma_method_132, g_applied_price_136, li_4);
      g_ima_304 = iMA(NULL, 0, g_period_128, 0, g_ma_method_132, g_applied_price_136, li_4 + 1);
      g_ibuf_224[li_4] = EMPTY_VALUE;
      g_ibuf_228[li_4] = EMPTY_VALUE;
      g_ibuf_232[li_4] = EMPTY_VALUE;
      if (g_ima_248 < g_ima_256 && g_ima_264 < g_ima_272 && g_ima_248 < g_ima_264) g_ibuf_228[li_4] = gd_176 * gi_160 + 0.3;
      else {
         if (g_ima_248 > g_ima_256 && g_ima_264 > g_ima_272 && g_ima_248 > g_ima_264) g_ibuf_224[li_4] = gd_176 * gi_160 + 0.3;
         else g_ibuf_232[li_4] = gd_176 * gi_160 + 0.3;
      }
      g_ibuf_236[li_4] = EMPTY_VALUE;
      g_ibuf_240[li_4] = EMPTY_VALUE;
      g_ibuf_244[li_4] = EMPTY_VALUE;
      if (g_ima_296 < g_ima_304 && g_ima_280 < g_ima_296 && Close[li_4] < g_ima_296 && Close[li_4] < g_ima_280) g_ibuf_240[li_4] = gd_176 * gi_164 + 0.3;
      else {
         if (g_ima_296 > g_ima_304 && g_ima_280 > g_ima_296 && Open[li_4] > g_ima_296 && Open[li_4] > g_ima_280) g_ibuf_236[li_4] = gd_176 * gi_164 + 0.3;
         else g_ibuf_244[li_4] = gd_176 * gi_164 + 0.3;
      }
   }
   return (0);
}
