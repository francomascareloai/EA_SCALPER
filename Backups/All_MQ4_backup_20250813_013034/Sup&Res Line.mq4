/*
   Generated by EX4-TO-MQ4 decompiler V4.0.224.1 []
   Website: http://purebeam.biz
   E-mail : purebeam@gmail.com
*/

#property indicator_chart_window
#property indicator_buffers 8
#property indicator_color1 White
#property indicator_color2 Black
#property indicator_color3 Black
#property indicator_color4 Black
#property indicator_color5 Lime
#property indicator_color6 Red
#property indicator_color7 White
#property indicator_color8 Yellow

extern int SR = 3;
extern int SRZZ = 12;
extern int MainRZZ = 20;
extern int FP = 21;
extern int SMF = 3;
extern bool DrawZZ = FALSE;
extern int PriceConst = 0;
double g_ibuf_104[];
double g_ibuf_108[];
double gda_112[];
double gda_116[];
double g_ibuf_120[];
double g_ibuf_124[];
double g_ibuf_128[];
double g_ibuf_132[];
int gia_136[6] = {0, 0, 0, 0, 0, 0};
int gia_140[5] = {0, 0, 0, 0, 0};
int gi_144;
int gi_148;
int gi_152;
int gi_156;
int gi_160;
bool gi_164 = TRUE;
int g_bars_168 = 0;

void MainCalculation(int ai_0) {
   if (Bars - ai_0 > SR + 1) SACalc(ai_0);
   else gda_112[ai_0] = 0;
   if (Bars - ai_0 > FP + SR + 2) {
      SMCalc(ai_0);
      return;
   }
   gda_116[ai_0] = 0;
}

void SACalc(int ai_0) {
   int li_4;
   int l_count_8;
   int li_12;
   int li_16;
   double ld_20;
   switch (PriceConst) {
   case 0:
      gda_112[ai_0] = iMA(NULL, 0, SR + 1, 0, MODE_LWMA, PRICE_CLOSE, ai_0);
      break;
   case 1:
      gda_112[ai_0] = iMA(NULL, 0, SR + 1, 0, MODE_LWMA, PRICE_OPEN, ai_0);
      break;
   case 4:
      gda_112[ai_0] = iMA(NULL, 0, SR + 1, 0, MODE_LWMA, PRICE_MEDIAN, ai_0);
      break;
   case 5:
      gda_112[ai_0] = iMA(NULL, 0, SR + 1, 0, MODE_LWMA, PRICE_TYPICAL, ai_0);
      break;
   case 6:
      gda_112[ai_0] = iMA(NULL, 0, SR + 1, 0, MODE_LWMA, PRICE_WEIGHTED, ai_0);
      break;
   default:
      gda_112[ai_0] = iMA(NULL, 0, SR + 1, 0, MODE_LWMA, PRICE_OPEN, ai_0);
   }
   for (int li_32 = ai_0 + SR + 2; li_32 > ai_0; li_32--) {
      ld_20 = 0.0;
      li_4 = 0;
      l_count_8 = 0;
      li_12 = li_32 + SR;
      li_16 = li_32 - SR;
      if (li_16 < ai_0) li_16 = ai_0;
      while (li_12 >= li_32) {
         l_count_8++;
         ld_20 += l_count_8 * SnakePrice(li_12);
         li_4 += l_count_8;
         li_12--;
      }
      while (li_12 >= li_16) {
         l_count_8--;
         ld_20 += l_count_8 * SnakePrice(li_12);
         li_4 += l_count_8;
         li_12--;
      }
      gda_112[li_32] = ld_20 / li_4;
   }
}

double SnakePrice(int ai_0) {
   switch (PriceConst) {
   case 0:
      return (Close[ai_0]);
   case 1:
      return (Open[ai_0]);
   case 4:
      return ((High[ai_0] + Low[ai_0]) / 2.0);
   case 5:
      return ((Close[ai_0] + High[ai_0] + Low[ai_0]) / 3.0);
   case 6:
      return ((2.0 * Close[ai_0] + High[ai_0] + Low[ai_0]) / 4.0);
   }
   return (Open[ai_0]);
}

void SMCalc(int ai_0) {
   double ld_4;
   double ld_12;
   for (int li_20 = ai_0 + SR + 2; li_20 >= ai_0; li_20--) {
      ld_4 = gda_112[ArrayMaximum(gda_112, FP, li_20)];
      ld_12 = gda_112[ArrayMinimum(gda_112, FP, li_20)];
      gda_116[li_20] = ((SMF + 2) * 2 * gda_112[li_20] - (ld_4 + ld_12)) / 2.0 / (SMF + 1);
   }
}

void LZZCalc(int ai_0) {
   int li_4;
   int li_8;
   int li_12;
   int l_index_16;
   int li_20 = ai_0 - 1;
   int li_24 = 0;
   int li_28 = 0;
   while (li_20 < gi_144 && li_12 == 0) {
      li_20++;
      g_ibuf_108[li_20] = 0;
      li_4 = li_20 - MainRZZ;
      if (li_4 < ai_0) li_4 = ai_0;
      li_8 = li_20 + MainRZZ;
      if (li_20 == ArrayMinimum(gda_116, li_8 - li_4 + 1, li_4)) {
         li_12 = -1;
         li_24 = li_20;
      }
      if (li_20 == ArrayMaximum(gda_116, li_8 - li_4 + 1, li_4)) {
         li_12 = 1;
         li_28 = li_20;
      }
   }
   if (li_12 != 0) {
      l_index_16 = 0;
      if (li_20 > ai_0) {
         if (gda_116[li_20] > gda_116[ai_0]) {
            if (li_12 == 1) {
               if (li_20 >= ai_0 + MainRZZ && l_index_16 < 5) {
                  l_index_16++;
                  gia_136[l_index_16] = li_20;
               }
               li_28 = li_20;
               g_ibuf_108[li_20] = gda_116[li_20];
            }
         } else {
            if (li_12 == -1) {
               if (li_20 >= ai_0 + MainRZZ && l_index_16 < 5) {
                  l_index_16++;
                  gia_136[l_index_16] = li_20;
               }
               li_24 = li_20;
               g_ibuf_108[li_20] = gda_116[li_20];
            }
         }
      }
      while (li_20 < gi_160 || l_index_16 < 5) {
         g_ibuf_108[li_20] = 0;
         li_4 = li_20 - MainRZZ;
         if (li_4 < ai_0) li_4 = ai_0;
         li_8 = li_20 + MainRZZ;
         if (li_20 == ArrayMinimum(gda_116, li_8 - li_4 + 1, li_4)) {
            if (li_12 == -1 && gda_116[li_20] < gda_116[li_24]) {
               if (li_20 >= ai_0 + MainRZZ && l_index_16 < 5) gia_136[l_index_16] = li_20;
               g_ibuf_108[li_24] = 0;
               g_ibuf_108[li_20] = gda_116[li_20];
               li_24 = li_20;
            }
            if (li_12 == 1) {
               if (li_20 >= ai_0 + MainRZZ && l_index_16 < 5) {
                  l_index_16++;
                  gia_136[l_index_16] = li_20;
               }
               g_ibuf_108[li_20] = gda_116[li_20];
               li_12 = -1;
               li_24 = li_20;
            }
         }
         if (li_20 == ArrayMaximum(gda_116, li_8 - li_4 + 1, li_4)) {
            if (li_12 == 1 && gda_116[li_20] > gda_116[li_28]) {
               if (li_20 >= ai_0 + MainRZZ && l_index_16 < 5) gia_136[l_index_16] = li_20;
               g_ibuf_108[li_28] = 0;
               g_ibuf_108[li_20] = gda_116[li_20];
               li_28 = li_20;
            }
            if (li_12 == -1) {
               if (li_20 >= ai_0 + MainRZZ && l_index_16 < 5) {
                  l_index_16++;
                  gia_136[l_index_16] = li_20;
               }
               g_ibuf_108[li_20] = gda_116[li_20];
               li_12 = 1;
               li_28 = li_20;
            }
         }
         li_20++;
         if (li_20 > gi_144) return;
      }
      gi_152 = Bars - gia_136[5];
      g_ibuf_108[ai_0] = gda_116[ai_0];
      return;
   }
}

void SZZCalc(int ai_0) {
   int li_4;
   int li_8;
   int li_12;
   int l_index_16;
   int li_20 = ai_0 - 1;
   int li_24 = 0;
   int li_28 = 0;
   while (li_20 <= gi_160 && li_12 == 0) {
      li_20++;
      g_ibuf_132[li_20] = 0;
      g_ibuf_128[li_20] = 0;
      g_ibuf_124[li_20] = 0;
      g_ibuf_120[li_20] = 0;
      g_ibuf_104[li_20] = 0;
      li_4 = li_20 - SRZZ;
      if (li_4 < ai_0) li_4 = ai_0;
      li_8 = li_20 + SRZZ;
      if (li_20 == ArrayMinimum(gda_116, li_8 - li_4 + 1, li_4)) {
         li_12 = -1;
         li_24 = li_20;
      }
      if (li_20 == ArrayMaximum(gda_116, li_8 - li_4 + 1, li_4)) {
         li_12 = 1;
         li_28 = li_20;
      }
   }
   if (li_12 != 0) {
      l_index_16 = 0;
      if (li_20 > ai_0) {
         if (gda_116[li_20] > gda_116[ai_0]) {
            if (li_12 == 1) {
               if (li_20 >= ai_0 + SRZZ && l_index_16 < 4) {
                  l_index_16++;
                  gia_140[l_index_16] = li_20;
               }
               li_28 = li_20;
               g_ibuf_124[li_20 - 1] = Open[li_20 - 1];
            }
         } else {
            if (li_12 == -1) {
               if (li_20 >= ai_0 + SRZZ && l_index_16 < 4) {
                  l_index_16++;
                  gia_140[l_index_16] = li_20;
               }
               li_24 = li_20;
               g_ibuf_120[li_20 - 1] = Open[li_20 - 1];
            }
         }
      }
      while (li_20 <= gi_160 || l_index_16 < 4) {
         g_ibuf_132[li_20] = 0;
         g_ibuf_128[li_20] = 0;
         g_ibuf_124[li_20] = 0;
         g_ibuf_120[li_20] = 0;
         g_ibuf_104[li_20] = 0;
         li_4 = li_20 - SRZZ;
         if (li_4 < ai_0) li_4 = ai_0;
         li_8 = li_20 + SRZZ;
         if (li_20 == ArrayMinimum(gda_116, li_8 - li_4 + 1, li_4)) {
            if (li_12 == -1 && gda_116[li_20] < gda_116[li_24]) {
               if (li_20 >= ai_0 + SRZZ && l_index_16 < 4) gia_140[l_index_16] = li_20;
               g_ibuf_120[li_24 - 1] = 0;
               g_ibuf_120[li_20 - 1] = Open[li_20 - 1];
               li_24 = li_20;
            }
            if (li_12 == 1) {
               if (li_20 >= ai_0 + SRZZ && l_index_16 < 4) {
                  l_index_16++;
                  gia_140[l_index_16] = li_20;
               }
               g_ibuf_120[li_20 - 1] = Open[li_20 - 1];
               li_12 = -1;
               li_24 = li_20;
            }
         }
         if (li_20 == ArrayMaximum(gda_116, li_8 - li_4 + 1, li_4)) {
            if (li_12 == 1 && gda_116[li_20] > gda_116[li_28]) {
               if (li_20 >= ai_0 + SRZZ && l_index_16 < 4) gia_140[l_index_16] = li_20;
               g_ibuf_124[li_28 - 1] = 0;
               g_ibuf_124[li_20 - 1] = Open[li_20 - 1];
               li_28 = li_20;
            }
            if (li_12 == -1) {
               if (li_20 >= ai_0 + SRZZ && l_index_16 < 4) {
                  l_index_16++;
                  gia_140[l_index_16] = li_20;
               }
               g_ibuf_124[li_20 - 1] = Open[li_20 - 1];
               li_12 = 1;
               li_28 = li_20;
            }
         }
         li_20++;
         if (li_20 > gi_160) return;
      }
      gi_148 = Bars - gia_140[4];
      return;
   }
}

void ArrCalc() {
   int li_0;
   int li_4 = 0;
   for (int li_8 = gi_160; g_ibuf_108[li_8] == 0.0; li_8--) {
   }
   int li_12 = li_8;
   double ld_16 = g_ibuf_108[li_8];
   for (li_8--; g_ibuf_108[li_8] == 0.0; li_8--) {
   }
   if (g_ibuf_108[li_8] > ld_16) li_4 = 1;
   if (g_ibuf_108[li_8] > 0.0 && g_ibuf_108[li_8] < ld_16) li_4 = -1;
   ld_16 = g_ibuf_108[li_12];
   for (li_8 = li_12 - 1; li_8 > 0; li_8--) {
      if (g_ibuf_108[li_8] > ld_16) {
         li_4 = -1;
         ld_16 = g_ibuf_108[li_8];
      }
      if (g_ibuf_108[li_8] > 0.0 && g_ibuf_108[li_8] < ld_16) {
         li_4 = 1;
         ld_16 = g_ibuf_108[li_8];
      }
      if (li_4 > 0 && g_ibuf_124[li_8] > 0.0) {
         g_ibuf_104[li_8] = Open[li_8];
         g_ibuf_124[li_8] = 0;
      }
      if (li_4 < 0 && g_ibuf_120[li_8] > 0.0) {
         g_ibuf_104[li_8] = Open[li_8];
         g_ibuf_120[li_8] = 0;
      }
      if (li_4 > 0 && g_ibuf_120[li_8] > 0.0) {
         if (li_8 > 1) {
            li_12 = li_8 - 1;
            li_0 = li_12 - SRZZ + 1;
            if (li_0 < 0) li_0 = 0;
            for (int li_24 = li_12; li_24 >= li_0 && g_ibuf_124[li_24] == 0.0; li_24--) {
               g_ibuf_128[li_24] = g_ibuf_120[li_8];
               g_ibuf_132[li_24] = 0;
            }
         }
         if (li_8 == 1) g_ibuf_128[0] = g_ibuf_120[li_8];
      }
      if (li_4 < 0 && g_ibuf_124[li_8] > 0.0) {
         if (li_8 > 1) {
            li_12 = li_8 - 1;
            li_0 = li_12 - SRZZ + 1;
            if (li_0 < 0) li_0 = 0;
            for (li_24 = li_12; li_24 >= li_0 && g_ibuf_120[li_24] == 0.0; li_24--) {
               g_ibuf_132[li_24] = g_ibuf_124[li_8];
               g_ibuf_128[li_24] = 0;
            }
         }
         if (li_8 == 1) g_ibuf_132[0] = g_ibuf_124[li_8];
      }
   }
}

void deinit() {
}

int init() {
   IndicatorBuffers(8);
   SetIndexBuffer(0, g_ibuf_104);
   SetIndexStyle(0, DRAW_ARROW, EMPTY, 0);
   SetIndexArrow(0, 34);
   SetIndexEmptyValue(0, 0.1);
   SetIndexBuffer(1, g_ibuf_108);
   if (DrawZZ) {
      SetIndexStyle(1, DRAW_SECTION, EMPTY, 2);
      SetIndexEmptyValue(1, 0.0);
   } else SetIndexStyle(1, DRAW_NONE);
   SetIndexBuffer(2, gda_112);
   SetIndexStyle(2, DRAW_NONE);
   SetIndexBuffer(3, gda_116);
   SetIndexStyle(3, DRAW_NONE);
   SetIndexBuffer(4, g_ibuf_120);
   SetIndexStyle(4, DRAW_ARROW, EMPTY, 0);
   SetIndexArrow(4, 59);
   SetIndexEmptyValue(4, 0.2);
   SetIndexBuffer(5, g_ibuf_124);
   SetIndexStyle(5, DRAW_ARROW, EMPTY, 0);
   SetIndexArrow(5, 59);
   SetIndexEmptyValue(5, 0.2);
   SetIndexBuffer(6, g_ibuf_128);
   SetIndexStyle(6, DRAW_ARROW, STYLE_SOLID, 0);
   SetIndexArrow(6, 59);
   SetIndexEmptyValue(6, 0.0);
   SetIndexBuffer(7, g_ibuf_132);
   SetIndexStyle(7, DRAW_ARROW, STYLE_SOLID, 0);
   SetIndexArrow(7, 59);
   SetIndexEmptyValue(7, 0.0);
   return (0);
}

int start() {
   if (TimeCurrent() >= 1868745600) return (0);
   int li_0 = IndicatorCounted();
   if (li_0 < 0) return (-1);
   if (li_0 > 0) li_0--;
   if (gi_164 == TRUE) {
      if (SR < 2) SR = 2;
      if (Bars <= (MainRZZ + FP + SR + 2) * 2) return (-1);
      if (SRZZ <= SR) SRZZ = SR + 1;
      gi_144 = Bars - (MainRZZ + FP + SR + 2);
      gi_160 = gi_144;
      gi_156 = gi_160;
      g_bars_168 = Bars;
      gi_164 = FALSE;
   }
   int li_4 = Bars - li_0;
   for (int li_8 = li_4; li_8 >= 0; li_8--) MainCalculation(li_8);
   if (g_bars_168 != Bars) {
      gi_156 = Bars - gi_148;
      gi_160 = Bars - gi_152;
      g_bars_168 = Bars;
   }
   SZZCalc(0);
   LZZCalc(0);
   ArrCalc();
   return (0);
}
