/*
   Generated by EX4-TO-MQ4 decompiler V4.0.224.1 []
   Website: http://purebeam.biz
   E-mail : purebeam@gmail.com
*/
#property copyright "Copyright 2011, www.wallstreet-forex.com"
#property link      "http://www.wallstreet-forex.com"

#import "WALLSTREET.dll"
   int SessionInit(int a0, int a1, int a2, int a3, string a4);
   int SessionDeinit(int a0, int a1, int a2, int a3, string a4);
   int ParamValue(int a0, int a1);
   bool CheckCloseLong(int a0, double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9);
   bool CheckCloseShort(int a0, double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9);
   bool CheckOpenLong(int a0, double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8);
   bool CheckOpenShort(int a0, double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8);
#import

extern int Magic = 4698523;
extern int MaxSpread = 4;
extern int Slippage = 2;
int gi_88 = 3;
int gi_92 = 3;
extern bool StealthMode = FALSE;
bool gi_100 = TRUE;
extern bool CloseOnlyOnProfit = FALSE;
extern string SS = "==== Custom Settings ====";
extern int StopLoss = 120;
extern int TakeProfit = 0;
extern int SecureProfit = 0;
extern int SecureProfitTriger = 0;
extern bool UseCustomPair = TRUE;
extern string UseSettingsFrom = "EURUSD";
extern string MM = "==== Risk Management ====";
extern bool RecoveryMode = FALSE;
extern double FixedLots = 0.1;
extern double AutoMM = 0.0;
extern double AutoMM_Max = 20.0;
int gi_180 = 50;
double gd_184 = 25.0;
double gd_192 = 1.1;
extern string PeriodInd = "====Indicator==========";
extern int g_period_ma = 0;
int gi_204 = 0;//
int gi_208 = 0;//
int gi_212 = 0;//
int gi_216 = 0;//
int gi_220 = 0;//
int gi_224 = 0;// --CloseOnlyOnProfit=TRUE = 0
extern int g_period_wpr = 0;
int gi_232 = 0;//
int gi_236 = 0;//
int gi_240 = 0;//
int gi_244 = 0;//
int gi_248 = 0;// --Параметр флета-----
extern int g_period_atr = 14;
int gi_256 = 0;//??? & 1000
extern int g_period_cci = 0;
int gi_264 = 0;//????????
int gi_268 = 0;//что то с Time
int gi_272 = -1;
bool gi_276 = TRUE;//бред какой то
bool gi_280 = FALSE;
int g_stoplevel_284 = 0;
double g_minlot_288 = 0.01;
double g_maxlot_296 = 0.01;
double g_lotstep_304 = 0.01;
int g_lotsize_312 = 100000;
double g_marginrequired_316 = 1000.0;
double gd_324 = 0.0001;
double gd_unused_332 = 0.1;
double gd_unused_340 = 1.0;

void init() {
   gi_276 = TRUE;
   gi_272 = -1;
   Comment("");
   if (ObjectFind("BKGR") >= 0) ObjectDelete("BKGR");
   if (ObjectFind("BKGR2") >= 0) ObjectDelete("BKGR2");
   if (ObjectFind("BKGR3") >= 0) ObjectDelete("BKGR3");
   if (ObjectFind("BKGR4") >= 0) ObjectDelete("BKGR4");
   if (ObjectFind("LV") >= 0) ObjectDelete("LV");
}

int deinit() {
   Comment("");
   if (ObjectFind("BKGR") >= 0) ObjectDelete("BKGR");
   if (ObjectFind("BKGR2") >= 0) ObjectDelete("BKGR2");
   if (ObjectFind("BKGR3") >= 0) ObjectDelete("BKGR3");
   if (ObjectFind("BKGR4") >= 0) ObjectDelete("BKGR4");
   if (ObjectFind("LV") >= 0) ObjectDelete("LV");
   if (gi_272 != -1) gi_272 = MyDeinit();
   return (0);
}

int start() {
   double l_price_0;
   double ld_8;
   double ld_16;
   color l_color_24;
   double l_lots_28;
   int l_ticket_36;
   double l_price_40;
   double l_price_48;
   string ls_56;
   string ls_64 = "";
   double ld_72 = 0;
   double ld_80 = 0;
   double ld_88 = 0;
   if (gi_276) {
      gi_276 = FALSE;
      g_stoplevel_284 = MarketInfo(Symbol(), MODE_STOPLEVEL);
      g_minlot_288 = MarketInfo(Symbol(), MODE_MINLOT);
      g_maxlot_296 = MarketInfo(Symbol(), MODE_MAXLOT);
      g_lotsize_312 = MarketInfo(Symbol(), MODE_LOTSIZE);
      g_lotstep_304 = MarketInfo(Symbol(), MODE_LOTSTEP);
      g_marginrequired_316 = MarketInfo(Symbol(), MODE_MARGINREQUIRED);
      if (Digits <= 3) gd_324 = 0.01;
      else gd_324 = 0.0001;
      if (Digits == 3 || Digits == 5) gd_unused_332 = 0.1;
      else gd_unused_332 = 1;
      Comment("\nInitializing ...");
      Sleep(1000);
      gi_280 = TRUE;
      Sleep(1000);
   }
   if (!IsTesting() && IsStopped()) return (0);
   if (!IsTesting() && !IsTradeAllowed()) {
      Print("Trading is not Allowed ...");
      return (0);
   }
   if (!IsTesting() && IsTradeContextBusy()) {
      Print("Trade Context is Busy ...");
      return (0);
   }
   if (IsDllsAllowed() == FALSE) {
      Comment("\nWarning: Set Parameter **AllowDLL Imports** ON in menu Tools -> Options -> ExpertAdvisors.");
      Print("Warning: Set Parameter **AllowDLL Imports** ON in menu Tools -> Options -> ExpertAdvisors.");
      Alert("Warning: Set Parameter **AllowDLL Imports** ON in menu Tools -> Options -> ExpertAdvisors.");
      Sleep(30000);
      return (0);
   }
   if (gi_272 <= 0) {
      if (!gi_280) {
         Comment("\nInternet connection problem");
         Alert("Internet connection problem");
         Sleep(10000);
         return (0);
      }
      Comment("\nUpdating settings ...");
      Sleep(2000);
      gi_272 = MyFirstInit();
      Sleep(2000);
      if (gi_272 < 0) Comment("\nInitializing ...");
   }
   if (gi_272 <= 0) {
      if (gi_272 == -8) {
         Comment("\nUnsupported currency pair " + Symbol());
         Alert("Unsupported currency pair " + Symbol());
      } else {
         Comment("\nInitialization is failed with error code " + DoubleToStr(gi_272, 0));
         Alert("Initialization is failed with error code " + DoubleToStr(gi_272, 0));
      }
      Sleep(10000);
      return (0);
   }
   if (g_period_ma <= 0 || g_period_wpr <= 0 || g_period_atr <= 0 || g_period_cci <= 0) {
      Comment("\nWrong initialization parameters for pair " + Symbol());
      Alert("Wrong initialization parameters for pair " + Symbol());
      Sleep(10000);
      return (0);
   }
   HideTestIndicators(FALSE);
   double l_iclose_96 = iClose(NULL, PERIOD_M15, 1);
   double l_ima_104 = iMA(NULL, PERIOD_M15, g_period_ma, 0, MODE_SMMA, PRICE_CLOSE, 1);
   double l_iwpr_112 = iWPR(NULL, PERIOD_M15, g_period_wpr, 1);
   double l_iatr_120 = iATR(NULL, PERIOD_M15, g_period_atr, 1);
   double l_icci_128 = iCCI(NULL, PERIOD_M15, g_period_cci, PRICE_TYPICAL, 1);
   HideTestIndicators(FALSE);
   if (AutoMM > 0.0 && !RecoveryMode) l_lots_28 = MathMax(g_minlot_288, MathMin(g_maxlot_296, MathCeil(MathMin(AutoMM_Max, AutoMM) / 100.0 * AccountFreeMargin() / g_lotstep_304 / (g_lotsize_312 / 100)) * g_lotstep_304));
   if (AutoMM > 0.0 && RecoveryMode) l_lots_28 = CalcLots();
   if (AutoMM == 0.0) l_lots_28 = FixedLots;
   ls_64 = ls_64 
      + "\n  " 
      + "\n " 
      + "\n  Authorization - OK!" 
      + "\n -----------------------------------------------" 
   + "\n  Spread = " + DoubleToStr((Ask - Bid) / gd_324, 1) + " pips";
   if (Ask - Bid > MaxSpread * gd_324) ls_64 = ls_64 + " - TOO HIGH";
   else ls_64 = ls_64 + " - NORMAL";
   ls_64 = ls_64 
   + "\n -----------------------------------------------";
   if (AutoMM > 0.0) {
      ls_64 = ls_64 
         + "\n  AutoMM - ENABLED" 
      + "\n  Risk = " + DoubleToStr(AutoMM, 1) + "%";
   }
   ls_64 = ls_64 
   + "\n  Trading Lots = " + DoubleToStr(l_lots_28, 2);
   ls_64 = ls_64 
   + "\n -----------------------------------------------";
   if (RecoveryMode) {
      ls_64 = ls_64 
      + "\n  Recovery Mode - ENABLED";
   } else {
      ls_64 = ls_64 
      + "\n  Recovery Mode - DISABLED";
   }
   if (StealthMode) {
      ls_64 = ls_64 
      + "\n  Stealth Mode - ENABLED";
   } else {
      ls_64 = ls_64 
      + "\n  Stealth Mode - DISABLED";
   }
   ls_64 = ls_64 
   + "\n -----------------------------------------------";
   Comment(ls_64);
   if (ObjectFind("BKGR") < 0) {
      ObjectCreate("BKGR", OBJ_LABEL, 0, 0, 0);
      ObjectSetText("BKGR", "g", 110, "Webdings", LightSlateGray);
      ObjectSet("BKGR", OBJPROP_CORNER, 0);
      ObjectSet("BKGR", OBJPROP_BACK, TRUE);
      ObjectSet("BKGR", OBJPROP_XDISTANCE, 5);
      ObjectSet("BKGR", OBJPROP_YDISTANCE, 15);
   }
   if (ObjectFind("BKGR2") < 0) {
      ObjectCreate("BKGR2", OBJ_LABEL, 0, 0, 0);
      ObjectSetText("BKGR2", "g", 110, "Webdings", DimGray);
      ObjectSet("BKGR2", OBJPROP_BACK, TRUE);
      ObjectSet("BKGR2", OBJPROP_XDISTANCE, 5);
      ObjectSet("BKGR2", OBJPROP_YDISTANCE, 60);
   }
   if (ObjectFind("BKGR3") < 0) {
      ObjectCreate("BKGR3", OBJ_LABEL, 0, 0, 0);
      ObjectSetText("BKGR3", "g", 110, "Webdings", DimGray);
      ObjectSet("BKGR3", OBJPROP_CORNER, 0);
      ObjectSet("BKGR3", OBJPROP_BACK, TRUE);
      ObjectSet("BKGR3", OBJPROP_XDISTANCE, 5);
      ObjectSet("BKGR3", OBJPROP_YDISTANCE, 45);
   }
   if (ObjectFind("LV") < 0) {
      ObjectCreate("LV", OBJ_LABEL, 0, 0, 0);
      ObjectSetText("LV", "WALL STREET ROBOT", 9, "Tahoma Bold", White);
      ObjectSet("LV", OBJPROP_CORNER, 0);
      ObjectSet("LV", OBJPROP_BACK, FALSE);
      ObjectSet("LV", OBJPROP_XDISTANCE, 13);
      ObjectSet("LV", OBJPROP_YDISTANCE, 23);
   }
   if (ObjectFind("BKGR4") < 0) {
      ObjectCreate("BKGR4", OBJ_LABEL, 0, 0, 0);
      ObjectSetText("BKGR4", "g", 110, "Webdings", DimGray);
      ObjectSet("BKGR4", OBJPROP_CORNER, 0);
      ObjectSet("BKGR4", OBJPROP_BACK, TRUE);
      ObjectSet("BKGR4", OBJPROP_XDISTANCE, 5);
      ObjectSet("BKGR4", OBJPROP_YDISTANCE, 73);
   }
   if (TakeProfit < g_stoplevel_284 * Point / gd_324) TakeProfit = g_stoplevel_284 * Point / gd_324;
   if (StopLoss < g_stoplevel_284 * Point / gd_324) StopLoss = g_stoplevel_284 * Point / gd_324;
   Slippage = Slippage * gd_324;
   int l_count_136 = 0;
   int l_count_140 = 0;
   if (CloseOnlyOnProfit) gi_224 = 0;
   for (int l_pos_144 = OrdersTotal() - 1; l_pos_144 >= 0; l_pos_144--) {
      if (!OrderSelect(l_pos_144, SELECT_BY_POS, MODE_TRADES)) Print("Error in OrderSelect! Position:", l_pos_144);
      else {
         if (OrderType() <= OP_SELL && OrderSymbol() == Symbol()) {
            if (OrderMagicNumber() == Magic) {
               ld_88 += OrderProfit();
               if (OrderType() == OP_BUY) ld_72 = (Bid - OrderOpenPrice()) / gd_324;
               else ld_72 = (OrderOpenPrice() - Ask) / gd_324;
               ld_80 += ld_72;
               if (OrderType() == OP_BUY) {
                  l_count_136++;
                  if (OrderStopLoss() == 0.0 && StealthMode == FALSE) {
                     l_price_40 = NormalizeDouble(OrderOpenPrice() - StopLoss * gd_324, Digits);
                     l_price_48 = NormalizeDouble(OrderOpenPrice() + TakeProfit * gd_324, Digits);
                     OrderModify(OrderTicket(), OrderOpenPrice(), l_price_40, l_price_48, 0, Green);
                  } else {
                     if (Bid >= OrderOpenPrice() + TakeProfit * gd_324 || Bid <= OrderOpenPrice() - StopLoss * gd_324 || CloseLong(OrderOpenPrice(), l_iwpr_112, l_iclose_96, iOpen(NULL, PERIOD_M1, 1), iClose(NULL, PERIOD_M1, 1))) {
                        for (int li_148 = 1; li_148 <= MathMax(1, gi_88); li_148++) {
                           RefreshRates();
                           if (OrderClose(OrderTicket(), OrderLots(), NormalizeDouble(Bid, Digits), Slippage, Violet)) {
                              l_count_136--;
                              break;
                           }
                           Sleep(MathMax(100, 1000 * gi_92));
                        }
                        Sleep(5000);
                     } else
                        if (Bid - OrderOpenPrice() > SecureProfitTriger * gd_324 && MathAbs(OrderOpenPrice() + SecureProfit * gd_324 - OrderStopLoss()) >= Point) OrderModify(OrderTicket(), OrderOpenPrice(), NormalizeDouble(OrderOpenPrice() + SecureProfit * gd_324, Digits), OrderTakeProfit(), 0, Blue);
                  }
               } else {
                  l_count_140++;
                  if (OrderStopLoss() == 0.0 && StealthMode == FALSE) {
                     l_price_40 = NormalizeDouble(OrderOpenPrice() + StopLoss * gd_324, Digits);
                     l_price_48 = NormalizeDouble(OrderOpenPrice() - TakeProfit * gd_324, Digits);
                     OrderModify(OrderTicket(), OrderOpenPrice(), l_price_40, l_price_48, 0, Green);
                  } else {
                     if (Ask <= OrderOpenPrice() - TakeProfit * gd_324 || Ask >= OrderOpenPrice() + StopLoss * gd_324 || CloseShort(OrderOpenPrice(), l_iwpr_112, l_iclose_96, iOpen(NULL, PERIOD_M1, 1), iClose(NULL, PERIOD_M1, 1))) {
                        for (li_148 = 1; li_148 <= MathMax(1, gi_88); li_148++) {
                           RefreshRates();
                           if (OrderClose(OrderTicket(), OrderLots(), NormalizeDouble(Ask, Digits), Slippage, Violet)) {
                              l_count_140--;
                              break;
                           }
                           Sleep(MathMax(100, 1000 * gi_92));
                        }
                        Sleep(5000);
                     } else
                        if (OrderOpenPrice() - Ask > SecureProfitTriger * gd_324 && MathAbs(OrderOpenPrice() - SecureProfit * gd_324 - OrderStopLoss()) >= Point) OrderModify(OrderTicket(), OrderOpenPrice(), NormalizeDouble(OrderOpenPrice() - SecureProfit * gd_324, Digits), OrderTakeProfit(), 0, Red);
                  }
               }
            }
         }
      }
   }
   ls_64 = ls_64 
   + "\n  Account Ballance = " + DoubleToStr(AccountBalance(), 2);
   if (l_count_136 == 0 && l_count_140 == 0) {
      ls_64 = ls_64 
         + "\n  No active trades" 
      + "\n";
   } else {
      ls_64 = ls_64 
         + "\n  Current trade " + DoubleToStr(ld_80, 1) 
      + "\n  Account Profit = " + DoubleToStr(ld_88, 2);
   }
   Comment(ls_64);
   if (Ask - Bid > MaxSpread * gd_324) return (0);
   if (!gi_100) gi_256 = 1000;
   else gi_256 = gi_256;
   if (l_iatr_120 <= gi_248 * gd_324) return (0);//--Filtr Flet----
   int l_cmd_152 = -1;
   if (l_count_136 < 1 && OpenLong(l_iclose_96, l_ima_104, l_iwpr_112, l_icci_128)) {
      ls_56 = "BUY";
      l_cmd_152 = 0;
      l_color_24 = Aqua;
      RefreshRates();
      l_price_0 = NormalizeDouble(Ask, Digits);
      ld_8 = l_price_0 - StopLoss * gd_324;
      ld_16 = l_price_0 + TakeProfit * gd_324;
   }
   if (l_count_140 < 1 && OpenShort(l_iclose_96, l_ima_104, l_iwpr_112, l_icci_128)) {
      ls_56 = "SELL";
      l_cmd_152 = 1;
      l_color_24 = Red;
      RefreshRates();
      l_price_0 = NormalizeDouble(Bid, Digits);
      ld_8 = l_price_0 + StopLoss * gd_324;
      ld_16 = l_price_0 - TakeProfit * gd_324;
   }
   if (l_cmd_152 >= OP_BUY && CheckLossPause()) {
      for (li_148 = 1; li_148 <= MathMax(1, gi_88); li_148++) {
         l_ticket_36 = OrderSend(Symbol(), l_cmd_152, l_lots_28, l_price_0, Slippage, 0, 0, "WallStreetRobot", Magic, 0, l_color_24);
         if (l_ticket_36 >= 0) break;
         Sleep(MathMax(100, 1000 * gi_92));
         RefreshRates();
         if (l_cmd_152 == OP_BUY) l_price_0 = NormalizeDouble(Ask, Digits);
         else
            if (l_cmd_152 == OP_SELL) l_price_0 = NormalizeDouble(Bid, Digits);
      }
      Sleep(5000);
      if (l_ticket_36 > 0) {
         if (OrderSelect(l_ticket_36, SELECT_BY_TICKET, MODE_TRADES)) Print("Order " + ls_56 + " opened!: ", OrderOpenPrice());
      } else Print("Error opening " + ls_56 + " order!: ", GetLastError());
   }
   return (0);
}

double CalcLots() {
   double ld_0;
   int l_count_8;
   double ld_12;
   int li_20;
   double ld_24;
   int li_32;
   double ld_36;
   int li_44;
   double ld_48 = 1;
   if (gd_192 > 0.0 && AutoMM > 0.0) {
      ld_0 = 0;
      l_count_8 = 0;
      ld_12 = 0;
      li_20 = 0;
      ld_24 = 0;
      li_32 = 0;
      for (int l_pos_56 = OrdersHistoryTotal() - 1; l_pos_56 >= 0; l_pos_56--) {
         if (OrderSelect(l_pos_56, SELECT_BY_POS, MODE_HISTORY)) {
            if (OrderSymbol() == Symbol() && OrderMagicNumber() == Magic) {
               l_count_8++;
               ld_0 += OrderProfit();
               if (ld_0 > ld_24) {
                  ld_24 = ld_0;
                  li_32 = l_count_8;
               }
               if (ld_0 < ld_12) {
                  ld_12 = ld_0;
                  li_20 = l_count_8;
               }
               if (l_count_8 >= gi_180) break;
            }
         }
      }
      if (li_32 <= li_20) ld_48 = MathPow(gd_192, li_20);
      else {
         ld_0 = ld_24;
         l_count_8 = li_32;
         ld_36 = ld_24;
         li_44 = li_32;
         for (l_pos_56 = OrdersHistoryTotal() - li_32 - 1; l_pos_56 >= 0; l_pos_56--) {
            if (OrderSelect(l_pos_56, SELECT_BY_POS, MODE_HISTORY)) {
               if (OrderSymbol() == Symbol() && OrderMagicNumber() == Magic) {
                  if (l_count_8 >= gi_180) break;
                  l_count_8++;
                  ld_0 += OrderProfit();
                  if (ld_0 < ld_36) {
                     ld_36 = ld_0;
                     li_44 = l_count_8;
                  }
               }
            }
         }
         if (li_44 == li_32 || ld_36 == ld_24) ld_48 = MathPow(gd_192, li_20);
         else {
            if (MathAbs(ld_12 - ld_24) / MathAbs(ld_36 - ld_24) >= (gd_184 + 100.0) / 100.0) ld_48 = MathPow(gd_192, li_20);
            else ld_48 = MathPow(gd_192, li_44);
         }
      }
   }
   for (double ld_ret_60 = MathMax(g_minlot_288, MathMin(g_maxlot_296, MathCeil(MathMin(AutoMM_Max, ld_48 * AutoMM) / 100.0 * AccountFreeMargin() / g_lotstep_304 / (g_lotsize_312 / 100)) * g_lotstep_304)); ld_ret_60 >= 2.0 * g_minlot_288 &&
      1.05 * (ld_ret_60 * g_marginrequired_316) >= AccountFreeMargin(); ld_ret_60 -= g_minlot_288) {
   }
   return (ld_ret_60);
}

int CheckLossPause() {
   int l_datetime_0;
   bool li_ret_4 = TRUE;
   if (gi_264 > 0 && gi_268 > 0) {
      l_datetime_0 = 0;
      for (int l_pos_8 = OrdersHistoryTotal() - 1; l_pos_8 >= 0; l_pos_8--) {
         if (OrderSelect(l_pos_8, SELECT_BY_POS, MODE_HISTORY)) {
            if (OrderSymbol() == Symbol() && OrderMagicNumber() == Magic) {
               if (!(((OrderType() == OP_BUY && (OrderClosePrice() - OrderOpenPrice()) / gd_324 <= (-gi_264)) || (OrderType() == OP_SELL && (OrderOpenPrice() - OrderClosePrice()) / gd_324 <= (-gi_264))))) break;
               l_datetime_0 = OrderCloseTime();
               break;
            }
         }
      }
      if (TimeCurrent() - l_datetime_0 < 3600 * gi_268) li_ret_4 = FALSE;
   }
   return (li_ret_4);
}

int MyFirstInit() {
   int li_ret_0;
   if (UseCustomPair) li_ret_0 = SessionInit(AccountNumber(), IsTesting(), IsDemo(), WindowHandle(Symbol(), Period()), StringSubstr(UseSettingsFrom, 0, 6));
   else li_ret_0 = SessionInit(AccountNumber(), IsTesting(), IsDemo(), WindowHandle(Symbol(), Period()), StringSubstr(Symbol(), 0, 6));
   if (li_ret_0 >= 0) {
      if (g_period_ma <=0) g_period_ma = ParamValue(li_ret_0, 1);
      //gi_204 = ParamValue(li_ret_0, 2);
      //gi_208 = ParamValue(li_ret_0, 3);
      //gi_212 = ParamValue(li_ret_0, 4);
      //gi_216 = ParamValue(li_ret_0, 5);
      //gi_220 = ParamValue(li_ret_0, 6);
      gi_224 = ParamValue(li_ret_0, 7);//CloseOnlyOnProfit
      if (g_period_wpr <=0) g_period_wpr = ParamValue(li_ret_0, 8);
      //gi_232 = ParamValue(li_ret_0, 9);
      if (SecureProfit <= 0) SecureProfit = ParamValue(li_ret_0, 10);
      if (SecureProfitTriger <= 0) SecureProfitTriger = ParamValue(li_ret_0, 11);
      //gi_236 = ParamValue(li_ret_0, 12);
      //gi_240 = ParamValue(li_ret_0, 13);
      //gi_244 = ParamValue(li_ret_0, 14);
      gi_248 = ParamValue(li_ret_0, 15);//Параметр флета
      if (g_period_atr <=0) g_period_atr = ParamValue(li_ret_0, 16);
      gi_256 = ParamValue(li_ret_0, 17);//
      if (g_period_cci <=0) g_period_cci = ParamValue(li_ret_0, 18);
      gi_264 = ParamValue(li_ret_0, 19);//
      gi_268 = ParamValue(li_ret_0, 20);//
      if (StopLoss <= 0) StopLoss = ParamValue(li_ret_0, 21);
      if (TakeProfit <= 0) TakeProfit = ParamValue(li_ret_0, 22);
   }
   return (li_ret_0);
}

int MyDeinit() {
   int li_ret_0;
   if (UseCustomPair) li_ret_0 = SessionDeinit(AccountNumber(), IsTesting(), IsDemo(), WindowHandle(Symbol(), Period()), StringSubstr(UseSettingsFrom, 0, 6));
   else li_ret_0 = SessionDeinit(AccountNumber(), IsTesting(), IsDemo(), WindowHandle(Symbol(), Period()), StringSubstr(Symbol(), 0, 6));
   return (li_ret_0);
}

int CloseLong(double ad_0, double ad_8, double ad_16, double ad_24, double ad_32) {
   int li_40 = 0;
   li_40 = CheckCloseLong(gi_272, ad_0, ad_8, ad_16, ad_24, ad_32, gi_224, Bid, Ask, gd_324);
   return (li_40);
}

int CloseShort(double ad_0, double ad_8, double ad_16, double ad_24, double ad_32) {
   int li_40 = 0;
   li_40 = CheckCloseShort(gi_272, ad_0, ad_8, ad_16, ad_24, ad_32, gi_224, Bid, Ask, gd_324);
   return (li_40);
}

int OpenLong(double ad_0, double ad_8, double ad_16, double ad_24) {
   int li_32 = 0;
   li_32 = CheckOpenLong(gi_272, ad_0, ad_8, ad_16, ad_24, gi_256, Bid, Ask, gd_324);
   return (li_32);
}

int OpenShort(double ad_0, double ad_8, double ad_16, double ad_24) {
   int li_32 = 0;
   li_32 = CheckOpenShort(gi_272, ad_0, ad_8, ad_16, ad_24, gi_256, Bid, Ask, gd_324);
   return (li_32);
}