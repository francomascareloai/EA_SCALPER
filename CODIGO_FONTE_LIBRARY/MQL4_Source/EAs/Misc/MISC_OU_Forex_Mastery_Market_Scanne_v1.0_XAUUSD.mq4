/*
   Generated by EX4-TO-MQ4 decompiler V4.0.224.1 []
   Website: http://purebeam.biz
   E-mail : purebeam@gmail.com
*/
#property copyright "OU Forex Mastery"
#property link      "http://www.OUForexTrader.com"

#include <OU_Forex.mqh>
/*
#import "OU_Loader.dll"
   bool OU_called();
   bool LoadConsole();
   bool RunAllowed();
   bool VersionAllowed(string a0, string a1);
   bool PairAllowed(string a0, string a1);
   bool FeatureAllowed(string a0, string a1);
   int GetUserLevel(string a0);
   int GetBKNumbers(string a0, int& a1[], double& a2[]);
#import
*/
string gs_76;
bool gi_unused_84 = FALSE;
string gs_88 = "2.00MT";
string gs_unused_96 = "2.00FT";
string gs_104 = "";
bool gi_unused_112 = FALSE;
string gsa_116[] = {"EURUSD", "GBPUSD", "USDCHF", "USDJPY", "USDCAD", "AUDUSD", "NZDUSD", "EURJPY", "EURGBP", "AUDJPY", "GBPJPY", "EURAUD", "EURCAD", "CHFJPY", "AUDCAD", "GBPCHF", "EURCHF", "NZDJPY", "CADJPY", "AUDNZD", "GBPAUD", "GBPCAD"};
int gi_120 = -1;
string gs_124 = "";
string gs_unused_132 = "DB1.1";
extern string spnote = "Comma seperated e.g. EURUSD,GBPUSD";
extern string showpairs = "EURUSD,GBPUSD,USDCHF,USDJPY,USDCAD,AUDUSD,NZDUSD,EURJPY,EURGBP,AUDJPY";
extern int FontSize = 10;
extern bool HalfPikeAlertsOn = TRUE;
extern bool ChannelHopAlertsOn = TRUE;
extern bool GravyTrainAlertsOn = TRUE;
extern bool M1SSAlertsOn = TRUE;
extern bool M5SSAlertsOn = TRUE;
extern bool M15SSAlertsOn = TRUE;
extern bool M30SSAlertsOn = TRUE;
extern bool H1SSAlertsOn = TRUE;
extern bool H4SSAlertsOn = TRUE;
extern bool D1SSAlertsOn = TRUE;
extern bool W1SSAlertsOn = TRUE;
extern bool MN1SSAlertsOn = TRUE;
extern string AlertDelaySetting = "Time between alerts in minutes, 0 to disable.";
extern int PCAlertDelay = 15;
extern int EmailAlertDelay = 15;
extern bool ShowSSM1M5 = TRUE;
extern bool ShowSSM15M30 = TRUE;
extern bool ShowSSH1H4 = TRUE;
extern bool ShowSSDWKMN = TRUE;
int gi_240 = 7;
int gi_244 = 7;
int gia_248[20][12];
int gia_252[20][12];
bool gba_256[20][12];
int gi_260 = 3;
int gia_268[] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
int gia_272[] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
int gia_276[] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
int gia_280[] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
int gia_284[] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
int gia_288[] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
int gia_292[] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
int gia_296[] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
int gia_300[] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
int gia_304[] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
int gia_308[] = {1, 5, 15, 30, 60, 240};
int gia_312[] = {1, 5, 15, 30, 60, 240, 1440, 10080, 43200};
string gs_oufm_316 = "OUFM";
string gs_324 = "Scalp Alert";
string gs_st_alert_332 = "ST Alert";
string gs_lt_alert_340 = "LT Alert";
int g_arr_size_352;
int g_index_356 = -1;
bool gi_360 = TRUE;
bool gi_364 = FALSE;
int gia_368[12][1000];
double gda_372[12][1000];
int gia_376[1000];
double gda_380[1000];
int gia_384[12] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
bool gba_388[12];
string gsa_392[12];
string gsa_396[12];
int gi_400;
int gi_404 = 80;
int gi_408 = 20;
int gi_412;
int gi_416;
int gi_420;
int gi_424;
int gi_428;

bool OU_loader_call() {
   string ls_unused_0;
   if (!OU_called()) LoadConsole();
   return (OU_called());
}

int DrawAllowed(string &as_0, string as_8) {
   as_8 = BaseSymbol(as_8);
   if (!OU_loader_call()) {
      as_0 = "failure loading console.";
      return (0);
   }
   if (!RunAllowed()) {
      as_0 = "waiting for console.";
      return (0);
   }
   if (!VersionAllowed(gs_76, gs_104)) {
      as_0 = "version " + gs_104 + " outdated." + VersionAllowed(gs_76, gs_104) + 0 + 1;
      return (0);
   }
   if (as_8 == "Scanner.") return (1);
   if (!PairAllowed(gs_76, as_8)) {
      if (validpair(gs_76, as_8)) as_0 = "unsubscribed pair.";
      else as_0 = "unsupported pair.";
      return (0);
   }
   return (1);
}

string bkshortname(int ai_0) {
   if (ai_0 == 1) return ("B");
   return ("K");
}

int superuser() {
   return (GetUserLevel(gs_76) == 3 || GetUserLevel(gs_76) == 5);
}

bool SlingShotsAllowed() {
   return (FeatureAllowed(gs_76, "SS") || LTCAllowed() || superuser());
}

int LTCAllowed() {
   return (FeatureAllowed(gs_76, "LTC") || superuser());
}

bool validpair(string as_0, string as_8) {
   string ls_16 = pairtype(as_8);
   if (ls_16 == "4" || ls_16 == "10") return (TRUE);
   if (as_0 == "OUFT" && ls_16 == "17" || ls_16 == "22") return (TRUE);
   return (FALSE);
}

string pairtype(string as_0) {
   string ls_8 = "USDIX,EURUSD,GBPUSD,USDCHF,USDJPY";
   string ls_16 = "EURUSD,GBPUSD,USDCHF,USDJPY,USDCAD,AUDUSD,NZDUSD,EURJPY,EURGBP,AUDJPY";
   string ls_24 = "EURUSD,GBPUSD,USDCHF,USDJPY,USDCAD,AUDUSD,NZDUSD,EURJPY,EURGBP,AUDJPY,GBPJPY,EURAUD,EURCAD,CHFJPY,AUDCAD,GBPCHF,EURCHF";
   string ls_32 = "EURUSD,GBPUSD,USDCHF,USDJPY,USDCAD,AUDUSD,NZDUSD,EURJPY,EURGBP,AUDJPY,GBPJPY,EURAUD,EURCAD,CHFJPY,AUDCAD,GBPCHF,EURCHF,NZDJPY,CADJPY,AUDNZD,GBPAUD,GBPCAD";
   as_0 = StringSubstr(as_0, 0, 6);
   if (StringFind(ls_8, as_0) > -1) as_0 = "4";
   else {
      if (StringFind(ls_16, as_0) > -1) as_0 = "10";
      else {
         if (StringFind(ls_24, as_0) > -1) as_0 = "17";
         else {
            if (StringFind(ls_32, as_0) > -1) as_0 = "22";
            else as_0 = "1000";
         }
      }
   }
   return (as_0);
}

int breakdownPairList(string as_0, string &asa_8[], string &asa_12[]) {
   int l_index_16 = 0;
   int li_20 = 0;
   int li_24 = StringFind(as_0, ",");
   if (StringSubstr(as_0, StringLen(as_0), 1) != ",") as_0 = as_0 + ",";
   while (li_24 > -1 && l_index_16 < 12) {
      asa_12[l_index_16] = BaseSymbol(StringSubstr(as_0, li_20, li_24 - li_20));
      asa_8[l_index_16] = FullSymbol(asa_12[l_index_16]);
      li_20 = li_24 + 1;
      li_24 = StringFind(as_0, ",", li_20);
      l_index_16++;
   }
   if (li_24 > -1) Alert("Scanner is currently limited to 12 pairs.  The first 10 will be displayed.");
   return (l_index_16);
}

string BaseSymbol(string as_0) {
   if (gi_120 == -1) SetSymbolSuffixLength();
   if (as_0 == "Scanner.") return (as_0);
   if (gi_120 == 0 || StringSubstr(as_0, StringLen(as_0) - gi_120) != gs_124) return (as_0);
   return (StringSubstr(as_0, 0, StringLen(as_0) - gi_120));
}

string FullSymbol(string as_0) {
   return (BaseSymbol(as_0) + gs_124);
}

void SetSymbolSuffixLength() {
   string lsa_0[1000];
   SymbolsList(lsa_0, 0);
   for (int l_index_4 = 0; StringSubstr(lsa_0[l_index_4], 0, 6) != "EURUSD" && l_index_4 < 1000; l_index_4++) {
   }
   gi_120 = StringLen(lsa_0[l_index_4]) - 6;
   gs_124 = StringSubstr(lsa_0[l_index_4], 6);
}

int SymbolsList(string &asa_0[1000], bool ai_4) {
   string l_name_8;
   int li_16;
   int li_ret_20;
   if (ai_4) l_name_8 = "symbols.sel";
   else l_name_8 = "symbols.raw";
   int l_file_24 = FileOpenHistory(l_name_8, FILE_BIN|FILE_READ);
   if (l_file_24 < 0) {
      Print("Symbol open failure.");
      return (-1);
   }
   if (ai_4) {
      li_ret_20 = (FileSize(l_file_24) - 4) / 128;
      li_16 = 116;
   } else {
      li_ret_20 = FileSize(l_file_24) / 1936;
      li_16 = 1924;
   }
   ArrayResize(asa_0, li_ret_20);
   if (ai_4) FileSeek(l_file_24, 4, SEEK_SET);
   for (int l_index_28 = 0; l_index_28 < li_ret_20; l_index_28++) {
      asa_0[l_index_28] = FileReadString(l_file_24, 12);
      FileSeek(l_file_24, li_16, SEEK_CUR);
   }
   FileClose(l_file_24);
   return (li_ret_20);
}

int init() {
   gs_76 = "OUFM";
   gs_104 = gs_88;
   OU_loader_call();
   if (!IsDllsAllowed()) Alert("Enable Dlls under Tools/OPtions for OU_Forex_pricelines.");
   if (!IsExpertEnabled()) Alert(WindowExpertName() + " will not run until it is enabled.");
   deinit();
   gi_412 = 0;
   gi_416 = 25;
   CreateDataObj("Head", WindowExpertName() + " Loading...", 10, 10, 10, Red);
   ObjectSet(gs_oufm_316 + " Head", OBJPROP_CORNER, 0);
   g_index_356 = -1;
   gi_360 = TRUE;
   gi_364 = FALSE;
   gi_404 = FontSize << 3;
   gi_408 = 1.8 * FontSize;
   for (int l_index_0 = 0; l_index_0 <= 20; l_index_0++) {
      for (int l_count_4 = 0; l_count_4 <= 3; l_count_4++) {
         gia_248[l_index_0][l_count_4] = -1;
         gia_252[l_index_0][l_count_4] = -1;
         gba_256[l_index_0][l_count_4] = 0;
      }
   }
   gi_400 = breakdownPairList(showpairs, gsa_392, gsa_396);
   g_arr_size_352 = ArraySize(gia_308);
   SetIndexStyle(0, DRAW_LINE, STYLE_SOLID, 1, Yellow);
   SetIndexStyle(1, DRAW_LINE, STYLE_SOLID, 1, Aqua);
   return (0);
}

int deinit() {
   ObDeleteObjectsByPrefix(gs_oufm_316);
   ObDeleteObjectsByPrefix("Frame_");
   return (0);
}

int start() {
   double ld_0;
   color l_color_8;
   bool li_28;
   string l_name_40;
   double l_iclose_60;
   string ls_68;
   string ls_76;
   int li_84;
   int li_88;
   int li_92;
   int li_96;
   double ld_100;
   double ld_108;
   double ld_116;
   double ld_124;
   int li_132;
   double lda_136[100];
   double lda_140[100];
   double lda_144[100];
   double lda_148[100];
   double lda_152[100];
   double lda_156[100];
   double lda_160[100];
   string ls_164;
   string ls_unused_32 = "";
   ls_unused_32 = "";
   string l_text_48 = "";
   if (!DrawAllowed(l_text_48, "Scanner.")) {
      ObjectSetText(gs_oufm_316 + " Notices", l_text_48, FontSize - 2, "Arial", Red);
      gi_364 = FALSE;
      return (-1);
   }
   if (!gi_364) {
      CreateLabelObjects();
      for (int li_12 = 0; li_12 < gi_400; li_12++) {
         if (!PairAllowed(gs_76, gsa_396[li_12]) && GetUserLevel(gs_76) < 3) gba_388[li_12] = 0;
         else {
            gba_388[li_12] = 1;
            gia_384[li_12] = GetBKNumbers(gsa_396[li_12], gia_376, gda_380);
            for (int l_index_56 = 0; l_index_56 < gia_384[li_12]; l_index_56++) {
               gia_368[li_12][l_index_56] = gia_376[l_index_56];
               if (gia_368[li_12][l_index_56] < 1 || gia_368[li_12][l_index_56] > 2) Print(gsa_392[li_12], ",", gia_376[l_index_56], ",", gda_380[l_index_56]);
               gda_372[li_12][l_index_56] = gda_380[l_index_56];
            }
         }
      }
      g_index_356 = -1;
      gi_364 = TRUE;
   }
   int li_20 = g_index_356;
   g_index_356++;
   if (g_index_356 >= gi_400) {
      g_index_356 = 0;
      gi_360 = FALSE;
   }
   if (gi_360) CreateDataColumn(g_index_356);
   if (!gba_388[g_index_356] && GetUserLevel(gs_76) < 3) {
      if (validpair(gs_76, gsa_396[g_index_356])) ObjectSetText(gs_oufm_316 + " Price" + gsa_396[g_index_356], "Unsubscribed.", FontSize - 2, "Arial", Yellow);
      else ObjectSetText(gs_oufm_316 + " Price" + gsa_396[g_index_356], "Unsupported.", FontSize - 2, "Arial", Yellow);
   } else {
      ObjectSetText(gs_oufm_316 + " Notices", alertdelaytext(), FontSize - 2, "Arial", DeepSkyBlue);
      l_iclose_60 = iClose(gsa_392[g_index_356], PERIOD_M1, 0);
      if (l_iclose_60 != 0.0) {
         ObjectSetText(gs_oufm_316 + " Price" + gsa_396[g_index_356], DoubleToStr(l_iclose_60, MarketInfo(gsa_392[g_index_356], MODE_DIGITS)), FontSize, "Arial", Yellow);
         li_28 = gia_384[g_index_356] <= 0;
         if (gia_384[g_index_356] > 0) {
            for (int l_count_24 = 0; gda_372[g_index_356][l_count_24] > l_iclose_60 && l_count_24 < gia_384[g_index_356] - 1; l_count_24++) {
            }
            if (l_count_24 > gia_384[g_index_356] - 1) {
               ObjectSetText(gs_oufm_316 + " Supp" + gsa_396[g_index_356], "Below", FontSize, "Arial", Yellow);
               ls_68 = "Below";
            } else {
               ld_0 = getPipValue(l_iclose_60 - gda_372[g_index_356][l_count_24], gsa_392[g_index_356]);
               ls_68 = bkshortname(gia_368[g_index_356][l_count_24]) + gda_372[g_index_356][l_count_24];
               if (ld_0 <= 10.0) {
                  l_color_8 = LimeGreen;
                  li_28 = TRUE;
               } else l_color_8 = Yellow;
               ObjectSetText(gs_oufm_316 + " Supp" + gsa_396[g_index_356], DoubleToStr(ld_0, 0) + " " + bkshortname(gia_368[g_index_356][l_count_24]), FontSize, "Arial", l_color_8);
            }
            if (l_count_24 == 0) {
               ObjectSetText(gs_oufm_316 + " Resistance" + gsa_396[g_index_356], "Above", FontSize, "Arial", Yellow);
               ls_76 = "Above";
            } else {
               ld_0 = getPipValue(gda_372[g_index_356][l_count_24 - 1] - l_iclose_60, gsa_392[g_index_356]);
               ls_76 = bkshortname(gia_368[g_index_356][l_count_24 - 1]) + ((gda_372[g_index_356][l_count_24 - 1]));
               if (ld_0 <= 10.0) {
                  l_color_8 = LimeGreen;
                  li_28 = TRUE;
               } else l_color_8 = Yellow;
               ObjectSetText(gs_oufm_316 + " Resistance" + gsa_396[g_index_356], DoubleToStr(ld_0, 0) + " " + bkshortname(gia_368[g_index_356][l_count_24 - 1]), FontSize, "Arial", l_color_8);
            }
         } else {
            ObjectSetText(gs_oufm_316 + " Supp" + gsa_396[g_index_356], "N/A", FontSize, "Arial", Yellow);
            ls_68 = "N/A";
            ObjectSetText(gs_oufm_316 + " Resistance" + gsa_396[g_index_356], "N/A", FontSize, "Arial", Yellow);
            ls_76 = "N/A";
         }
      }
      for (int l_index_16 = 0; l_index_16 < ArraySize(gia_312); l_index_16++) {
         li_84 = 14;
         li_88 = 5;
         li_92 = 3;
         li_96 = 3;
         li_132 = 100;
         if (li_132 >= iBars(gsa_392[g_index_356], gia_312[l_index_16]) - 1) li_132 = iBars(gsa_392[g_index_356], gia_312[l_index_16]) - 1 - 1;
         for (li_12 = li_132 - 1; li_12 >= 0; li_12--) {
            lda_136[li_12] = iClose(gsa_392[g_index_356], gia_312[l_index_16], li_12) - (iHigh(gsa_392[g_index_356], gia_312[l_index_16], iHighest(gsa_392[g_index_356], gia_312[l_index_16], MODE_HIGH, li_84, li_12)) +
               iLow(gsa_392[g_index_356], gia_312[l_index_16], iLowest(gsa_392[g_index_356], gia_312[l_index_16], MODE_LOW, li_84, li_12))) / 2.0;
            lda_140[li_12] = iHigh(gsa_392[g_index_356], gia_312[l_index_16], iHighest(gsa_392[g_index_356], gia_312[l_index_16], MODE_HIGH, li_84, li_12)) - iLow(gsa_392[g_index_356], gia_312[l_index_16], iLowest(gsa_392[g_index_356], gia_312[l_index_16], MODE_LOW, li_84, li_12));
         }
         ld_116 = 2.0 / (li_88 + 1);
         ld_124 = 1 - ld_116;
         lda_144[li_132 - li_88] = (lda_136[li_132 - li_88]) * ld_116;
         lda_148[li_132 - li_88] = (lda_140[li_132 - li_88]) * ld_116;
         for (li_12 = li_132 - li_88 - 1; li_12 >= 0; li_12--) {
            lda_144[li_12] = (lda_144[li_12 + 1]) * ld_124 + lda_136[li_12] * ld_116;
            lda_148[li_12] = (lda_148[li_12 + 1]) * ld_124 + lda_140[li_12] * ld_116;
         }
         ld_116 = 2.0 / (li_92 + 1);
         ld_124 = 1 - ld_116;
         lda_152[li_132 - li_88 - li_92] = (lda_144[li_132 - li_88 - li_92]) * ld_116;
         lda_156[li_132 - li_88 - li_92] = (lda_148[li_132 - li_88 - li_92]) * ld_116;
         for (li_12 = li_132 - li_88 - li_92 - 1; li_12 >= 0; li_12--) {
            lda_152[li_12] = (lda_152[li_12 + 1]) * ld_124 + lda_144[li_12] * ld_116;
            lda_156[li_12] = (lda_156[li_12 + 1]) * ld_124 + lda_148[li_12] * ld_116;
         }
         for (li_12 = li_132 - li_88 - li_92 - li_96; li_12 >= 0; li_12--) lda_160[li_12] = 100.0 * (lda_152[li_12] / (lda_156[li_12] / 2.0));
         ld_116 = 2.0 / (li_96 + 1);
         ld_124 = 1 - ld_116;
         ld_100 = (lda_160[li_88 - li_92]) * ld_116;
         for (li_12 = li_132 - li_88 - li_92 - 1; li_12 >= 0; li_12--) {
            ld_108 = ld_100;
            ld_100 = ld_100 * ld_124 + lda_160[li_12] * ld_116;
         }
         gia_268[l_index_16] = lda_160[0];
         gia_272[l_index_16] = ld_100;
         gia_276[l_index_16] = lda_160[1];
         gia_280[l_index_16] = ld_108;
         gia_284[l_index_16] = iStochastic(gsa_392[g_index_356], gia_312[l_index_16], 8, 3, 3, MODE_SMMA, 0, MODE_MAIN, 0);
         gia_288[l_index_16] = iStochastic(gsa_392[g_index_356], gia_312[l_index_16], 16, 3, 3, MODE_SMMA, 0, MODE_MAIN, 0);
         gia_292[l_index_16] = iStochastic(gsa_392[g_index_356], gia_312[l_index_16], 34, 3, 3, MODE_SMMA, 0, MODE_MAIN, 0);
         gia_296[l_index_16] = iStochastic(gsa_392[g_index_356], gia_312[l_index_16], 8, 3, 3, MODE_SMMA, 0, MODE_MAIN, 1);
         gia_300[l_index_16] = iStochastic(gsa_392[g_index_356], gia_312[l_index_16], 16, 3, 3, MODE_SMMA, 0, MODE_MAIN, 1);
         gia_304[l_index_16] = iStochastic(gsa_392[g_index_356], gia_312[l_index_16], 34, 3, 3, MODE_SMMA, 0, MODE_MAIN, 1);
      }
      for (l_index_16 = 0; l_index_16 < g_arr_size_352; l_index_16++) {
         l_name_40 = gs_oufm_316 + " " + gs_324 + " " + gsa_396[g_index_356];
         if (gia_284[0] < 20 && gia_288[0] < 20 && gia_292[0] < 20 && (gia_284[1] < 20 && gia_288[1] < 20 && gia_292[1] < 20) && (gia_284[2] < 20 && gia_288[2] < 20 && gia_292[2] < 20) &&
            (gia_268[0] < -50 && gia_272[0] < -50) && (gia_268[1] < -50 && gia_272[1] < -50) && (gia_268[2] < -50 && gia_272[2] < -50)) {
            if (li_28) {
               if (TMGreenExt(0) && TMGreen(1) && !TMRed(2)) {
                  ObjectSetText(l_name_40, "Check Long", FontSize - 1, "Arial Bold", Green);
                  callAlert(HalfPikeAlertsOn, l_name_40 + " - Potential BUY/LONG", g_index_356, 0);
               } else ObjectSetText(l_name_40, "Check Long", FontSize - 1, "Arial", LawnGreen);
            } else {
               ObjectSetText(l_name_40, "Hold", FontSize - 1, "Arial", Yellow);
               gba_256[g_index_356][0] = 0;
            }
         } else {
            if (gia_284[0] > 80 && gia_288[0] > 80 && gia_292[0] > 80 && (gia_284[1] > 80 && gia_288[1] > 80 && gia_292[1] > 80) && (gia_284[2] > 80 && gia_288[2] > 80 && gia_292[2] > 80) &&
               (gia_268[0] > 50 && gia_272[0] > 50) && (gia_268[1] > 50 && gia_272[1] > 50) && (gia_268[2] > 50 && gia_272[2] > 50)) {
               if (li_28) {
                  if (TMRedExt(0) && TMRed(1) && !TMGreen(2)) {
                     ObjectSetText(l_name_40, "Check Short", FontSize - 1, "Arial Bold", Red);
                     callAlert(HalfPikeAlertsOn, l_name_40 + " - Potential SELL/SHORT", g_index_356, 0);
                  } else ObjectSetText(l_name_40, "Check Short", FontSize - 1, "Arial", Tomato);
               } else {
                  ObjectSetText(l_name_40, "Hold", FontSize - 1, "Arial", Yellow);
                  gba_256[g_index_356][0] = 0;
               }
            } else {
               ObjectSetText(l_name_40, "Hold", FontSize - 1, "Arial", Yellow);
               gba_256[g_index_356][0] = 0;
            }
         }
         l_name_40 = gs_oufm_316 + " " + gs_st_alert_332 + " " + gsa_396[g_index_356];
         if (gia_284[2] < 20 && gia_288[2] < 20 && gia_292[2] < 20 && (gia_284[3] < 20 && gia_288[3] < 20 && gia_292[3] < 20) && (gia_284[4] < 20 && gia_288[4] < 20 && gia_292[4] < 20) &&
            (gia_268[2] < -40 && gia_272[2] < -40) && (gia_268[3] < -40 && gia_272[3] < -40) && (gia_268[4] < -40 && gia_272[4] < -40)) {
            if (li_28) {
               if (TMGreenExt(2) && TMGreen(3) && !TMRed(4)) {
                  ObjectSetText(l_name_40, "Check Long", FontSize - 1, "Arial Bold", Green);
                  callAlert(ChannelHopAlertsOn, l_name_40 + " - Potential BUY/LONG", g_index_356, 0);
               } else ObjectSetText(l_name_40, "Check Long", FontSize - 1, "Arial", LawnGreen);
            } else {
               ObjectSetText(l_name_40, "Hold", FontSize - 1, "Arial", Yellow);
               gba_256[g_index_356][1] = 0;
            }
         } else {
            if (gia_284[2] > 80 && gia_288[2] > 80 && gia_292[2] > 80 && (gia_284[3] > 80 && gia_288[3] > 80 && gia_292[3] > 80) && (gia_284[4] > 80 && gia_288[4] > 80 && gia_292[4] > 80) &&
               (gia_268[2] > 40 && gia_272[2] > 40) && (gia_268[3] > 40 && gia_272[3] > 40) && (gia_268[4] > 40 && gia_272[4] > 40)) {
               if (li_28) {
                  if (TMRedExt(2) && TMRed(3) && !TMGreen(4)) {
                     ObjectSetText(l_name_40, "Check Short", FontSize - 1, "Arial Bold", Red);
                     callAlert(ChannelHopAlertsOn, l_name_40 + " - Potential SELL/SHORT", g_index_356, 0);
                  } else ObjectSetText(l_name_40, "Check Short", FontSize - 1, "Arial", Tomato);
               } else {
                  ObjectSetText(l_name_40, "Hold", FontSize - 1, "Arial", Yellow);
                  gba_256[g_index_356][1] = 0;
               }
            } else {
               ObjectSetText(l_name_40, "Hold", FontSize - 1, "Arial", Yellow);
               gba_256[g_index_356][1] = 0;
            }
         }
         l_name_40 = gs_oufm_316 + " " + gs_lt_alert_340 + " " + gsa_396[g_index_356];
         if (gia_284[2] < 20 && gia_288[2] < 20 && gia_292[2] < 20 && (gia_284[3] < 20 && gia_288[3] < 20 && gia_292[3] < 20) && (gia_284[4] < 20 && gia_288[4] < 20 && gia_292[4] < 20) &&
            (gia_284[5] < 20 && gia_288[5] < 20 && gia_292[5] < 20) && (gia_268[2] < -40 && gia_272[2] < -40) && (gia_268[3] < -40 && gia_272[3] < -40) && (gia_268[4] < -40 &&
            gia_272[4] < -40) && (gia_268[5] < -40 && gia_272[5] < -40)) {
            if (li_28) {
               if (TMGreenExt(2) && TMGreenExt(3) && TMGreen(4) && !TMRed(5)) {
                  ObjectSetText(l_name_40, "Check Long", FontSize - 1, "Arial Bold", Green);
                  callAlert(GravyTrainAlertsOn, l_name_40 + " - Potential BUY/LONG", g_index_356, 0);
               } else ObjectSetText(l_name_40, "Check Long", FontSize - 1, "Arial", LawnGreen);
            } else {
               ObjectSetText(l_name_40, "Hold", 9, "Arial", Yellow);
               gba_256[g_index_356][2] = 0;
            }
         } else {
            if (gia_284[2] > 80 && gia_288[2] > 80 && gia_292[2] > 80 && (gia_284[3] > 80 && gia_288[3] > 80 && gia_292[3] > 80) && (gia_284[4] > 80 && gia_288[4] > 80 && gia_292[4] > 80) &&
               (gia_284[5] > 80 && gia_288[5] > 80 && gia_292[5] > 80) && (gia_268[2] > 40 && gia_272[2] > 40) && (gia_268[3] > 40 && gia_272[3] > 40) && (gia_268[4] > 40 && gia_272[4] > 40) && (gia_268[5] > 40 && gia_272[5] > 40)) {
               if (li_28) {
                  if (TMRedExt(2) && TMRedExt(3) && TMRed(4) && !TMGreen(5)) {
                     ObjectSetText(l_name_40, "Check Short", FontSize - 1, "Arial Bold", Red);
                     callAlert(GravyTrainAlertsOn, l_name_40 + " - Potential SELL/SHORT", g_index_356, 0);
                  } else ObjectSetText(l_name_40, "Check Short", FontSize - 1, "Arial", Tomato);
               } else {
                  ObjectSetText(l_name_40, "Hold", FontSize - 1, "Arial", Yellow);
                  gba_256[g_index_356][2] = 0;
               }
            } else {
               ObjectSetText(l_name_40, "Hold", FontSize - 1, "Arial", Yellow);
               gba_256[g_index_356][2] = 0;
            }
         }
         if (SlingShotsAllowed() && ShowSSM1M5 || ShowSSM15M30 || ShowSSH1H4 || ShowSSDWKMN) {
            for (l_index_16 = 0; l_index_16 < ArraySize(gia_312); l_index_16++) {
               if (SlingShotsAllowed()) {
                  l_name_40 = gs_oufm_316 + " " + gia_312[l_index_16] + gsa_396[g_index_356];
                  ls_164 = gs_oufm_316 + " " + PeriodStr(gia_312[l_index_16]) + gsa_396[g_index_356];
                  if (gia_284[l_index_16] - gia_292[l_index_16] > 25) {
                     if (gia_284[l_index_16] < gia_296[l_index_16] && !TMGreen(l_index_16 - 1) && TMRed(l_index_16 - 2) && skipcheck(l_index_16) || TMRed(l_index_16 - 3)) {
                        ObjectSetText(l_name_40, "SS", FontSize - 1, "Arial Bold", Red);
                        callAlert(AlertVal(l_index_16), ls_164 + " - SS Potential SELL/SHORT", g_index_356, l_index_16 + gi_260);
                     } else ObjectSetText(l_name_40, "SS", FontSize - 1, "Arial", Tomato);
                  } else {
                     if (gia_292[l_index_16] - gia_284[l_index_16] > 25) {
                        if (gia_284[l_index_16] > gia_296[l_index_16] && !TMRed(l_index_16 - 1) && TMGreen(l_index_16 - 2) && skipcheck(l_index_16) || TMGreen(l_index_16 - 3)) {
                           ObjectSetText(l_name_40, "SS", FontSize - 1, "Arial Bold", Green);
                           callAlert(AlertVal(l_index_16), ls_164 + " - SS Potential BUY/LONG", g_index_356, l_index_16 + gi_260);
                        } else ObjectSetText(l_name_40, "SS", FontSize - 1, "Arial", LawnGreen);
                     } else {
                        ObjectSetText(l_name_40, "---", FontSize - 1, "Arial", Yellow);
                        gba_256[g_index_356][l_index_16 + gi_260] = 0;
                     }
                  }
                  l_name_40 = gs_oufm_316 + " " + gia_312[l_index_16] + gsa_396[g_index_356] + " dir";
                  if (gia_268[l_index_16] - gia_272[l_index_16] >= gi_240) ObjectSetText(l_name_40, CharToStr(233), FontSize - 1, "Wingdings", Green);
                  else {
                     if (gia_268[l_index_16] > gia_272[l_index_16]) ObjectSetText(l_name_40, CharToStr(236), FontSize - 1, "Wingdings", LawnGreen);
                     else {
                        if (gia_268[l_index_16] - gia_272[l_index_16] <= -gi_240) ObjectSetText(l_name_40, CharToStr(234), FontSize - 1, "Wingdings", Red);
                        else {
                           if (gia_268[l_index_16] < gia_272[l_index_16]) ObjectSetText(l_name_40, CharToStr(238), FontSize - 1, "Wingdings", Tomato);
                           else ObjectSetText(l_name_40, "", FontSize - 1, "Arial", Green);
                        }
                     }
                  }
               }
            }
            for (l_index_16 = g_arr_size_352; l_index_16 < ArraySize(gia_312); l_index_16++) {
               gia_284[l_index_16] = 0;
               gia_292[l_index_16] = 0;
            }
         }
         for (l_index_16 = 0; l_index_16 < g_arr_size_352; l_index_16++) {
            gia_268[l_index_16] = 0;
            gia_272[l_index_16] = 0;
            gia_284[l_index_16] = 0;
            gia_288[l_index_16] = 0;
            gia_292[l_index_16] = 0;
         }
      }
   }
   ObjectSetText(gs_oufm_316 + " lblCurr" + li_20, (li_20 + 1) + "-" + gsa_396[li_20], FontSize, "Arial", White);
   ObjectSetText(gs_oufm_316 + " lblCurr" + g_index_356, (g_index_356 + 1) + "-" + gsa_396[g_index_356], FontSize, "Arial", Gold);
   if (!gi_360) Sleep(2000);
   else Sleep(250);
   return (0);
}

void ObDeleteObjectsByPrefix(string as_0) {
   string l_name_16;
   int l_str_len_8 = StringLen(as_0);
   int li_12 = 0;
   while (li_12 < ObjectsTotal()) {
      l_name_16 = ObjectName(li_12);
      if (StringSubstr(l_name_16, 0, l_str_len_8) != as_0) {
         li_12++;
         continue;
      }
      ObjectDelete(l_name_16);
   }
}

double getPipValue(double ad_0, string as_8) {
   double ld_unused_16 = SymbolDigits(as_8);
   double ld_24 = PipSize(as_8);
   ad_0 /= ld_24;
   return (ad_0);
}

int SymbolDigits(string a_symbol_0) {
   return (MarketInfo(a_symbol_0, MODE_DIGITS));
}

double PipSize(string a_symbol_0) {
   double ld_8 = MarketInfo(a_symbol_0, MODE_DIGITS);
   if (ld_8 == 3.0 || ld_8 == 5.0) ld_8 -= 1.0;
   return (MathPow(10, -ld_8));
}

void callAlert(int ai_0, string as_4, int ai_12, int ai_16) {
   string ls_20;
   gba_256[ai_12][ai_16] = 1;
   if (PCAlertDelay > 0 && ai_0) {
      if (gia_248[ai_12][ai_16] < TimeLocal()) {
         Alert(as_4);
         gia_248[ai_12][ai_16] = TimeLocal() + 60 * PCAlertDelay;
         ls_20 = ".";
      }
   } else ls_20 = ", Alerts disbaled.";
   string ls_28 = TimeToStr(TimeCurrent(), TIME_DATE|TIME_SECONDS) + " " + as_4 + ls_20;
   if (gia_252[ai_12][ai_16] < TimeLocal() && EmailAlertDelay > 0 && ai_0) {
      gia_252[ai_12][ai_16] = TimeLocal() + 60 * EmailAlertDelay;
      SendMail(gs_oufm_316 + " Market Scanner", as_4);
      Print("Email sent: " + gs_oufm_316 + " Market Scanner", as_4);
   }
}

string alertdelaytext() {
   string lsa_0[2];
   if (PCAlertDelay == 0) lsa_0[0] = "PC Alerts disabled. - ";
   else lsa_0[0] = "PC Alert Delay " + DoubleToStr(PCAlertDelay, 0) + " minutes. - ";
   if (EmailAlertDelay == 0) lsa_0[1] = "Email Alerts disabled. ";
   else lsa_0[1] = "Email Alert Delay " + DoubleToStr(EmailAlertDelay, 0) + " minutes.";
   return (lsa_0[0] + lsa_0[1]);
}

void CreateLabelObj(string a_text_0, int a_x_8, int a_y_12, int a_fontsize_16, color a_color_20) {
   string l_name_24 = gs_oufm_316 + " " + a_text_0;
   ObjectCreate(l_name_24, OBJ_LABEL, 0, 0, 0, 0, 0);
   ObjectSet(l_name_24, OBJPROP_CORNER, 1);
   ObjectSet(l_name_24, OBJPROP_XDISTANCE, a_x_8);
   ObjectSet(l_name_24, OBJPROP_YDISTANCE, a_y_12);
   ObjectSetText(l_name_24, a_text_0, a_fontsize_16, "Arial", a_color_20);
}

void CreateDataObj(string as_0, string a_text_8, int a_x_16, int a_y_20, int a_fontsize_24, color a_color_28) {
   string l_name_32 = gs_oufm_316 + " " + as_0;
   ObjectCreate(l_name_32, OBJ_LABEL, 0, 0, 0, 0, 0);
   ObjectSet(l_name_32, OBJPROP_CORNER, 1);
   ObjectSet(l_name_32, OBJPROP_XDISTANCE, a_x_16);
   ObjectSet(l_name_32, OBJPROP_YDISTANCE, a_y_20);
   ObjectSetText(l_name_32, a_text_8, a_fontsize_24, "Arial", a_color_28);
}

int AlertVal(int ai_0) {
   if (ai_0 == 0) return (M1SSAlertsOn);
   if (ai_0 == 1) return (M5SSAlertsOn);
   if (ai_0 == 2) return (M15SSAlertsOn);
   if (ai_0 == 3) return (M30SSAlertsOn);
   if (ai_0 == 4) return (H1SSAlertsOn);
   if (ai_0 == 5) return (H4SSAlertsOn);
   if (ai_0 == 6) return (D1SSAlertsOn);
   if (ai_0 == 7) return (W1SSAlertsOn);
   if (ai_0 == 8) return (MN1SSAlertsOn);
   return (0);
}

string PeriodStr(int ai_0) {
   switch (ai_0) {
   case 1:
      return ("M1");
   case 5:
      return ("M5");
   case 15:
      return ("M15");
   case 30:
      return ("M30");
   case 60:
      return ("H1");
   case 240:
      return ("H4");
   case 1440:
      return ("D1");
   case 10080:
      return ("W1");
   case 43200:
      return ("MN");
   }
   return (Period());
}

void CreateLabelObjects() {
   gi_412 = 0;
   gi_416 = 25;
   gi_424 = 20;
   gi_420 = gi_412 + gi_404 * gi_400 + 5;
   ObjectDelete(gs_oufm_316 + " Head");
   CreateDataObj("Head", WindowExpertName(), gi_412 + gi_404 * (gi_400 - 1) - 40, gi_416 - gi_408, FontSize - 2, Lime);
   gi_428 = gi_416;
   CreateLabelObj("Alerts", gi_420, gi_428, FontSize, DeepSkyBlue);
   gi_428 = gi_416 + gi_408 << 2 + gi_424;
   string l_name_0 = gs_oufm_316 + " " + gs_324 + " Status";
   CreateLabelObj(gs_324 + " Status", gi_420, gi_428, FontSize, DeepSkyBlue);
   if (HalfPikeAlertsOn) ObjectSetText(l_name_0, "On", FontSize, "Arial", Lime);
   else ObjectSetText(l_name_0, "Off", FontSize, "Arial", Red);
   gi_428 += gi_408;
   l_name_0 = gs_oufm_316 + " " + gs_st_alert_332 + " Status";
   CreateLabelObj(gs_st_alert_332 + " Status", gi_420, gi_428, FontSize, DeepSkyBlue);
   if (ChannelHopAlertsOn) ObjectSetText(l_name_0, "On", FontSize, "Arial", Lime);
   else ObjectSetText(l_name_0, "Off", FontSize, "Arial", Red);
   gi_428 += gi_408;
   l_name_0 = gs_oufm_316 + " " + gs_lt_alert_340 + " Status";
   CreateLabelObj(gs_lt_alert_340 + " Status", gi_420, gi_428, FontSize, DeepSkyBlue);
   if (GravyTrainAlertsOn) ObjectSetText(l_name_0, "On", FontSize, "Arial", Lime);
   else ObjectSetText(l_name_0, "Off", FontSize, "Arial", Red);
   if (SlingShotsAllowed() && ShowSSM1M5 || ShowSSM15M30 || ShowSSH1H4 || ShowSSDWKMN) {
      if (ShowSSM1M5) {
         gi_428 = gi_428 + gi_408 + gi_424;
         l_name_0 = gs_oufm_316 + " " + "M1 Status";
         CreateLabelObj("M1 Status", gi_420, gi_428, FontSize, DeepSkyBlue);
         if (M1SSAlertsOn) ObjectSetText(l_name_0, "On", FontSize, "Arial", Lime);
         else ObjectSetText(l_name_0, "Off", FontSize, "Arial", Red);
         gi_428 += gi_408;
         l_name_0 = gs_oufm_316 + " " + "M5 Status";
         CreateLabelObj("M5 Status", gi_420, gi_428, FontSize, DeepSkyBlue);
         if (M5SSAlertsOn) ObjectSetText(l_name_0, "On", FontSize, "Arial", Lime);
         else ObjectSetText(l_name_0, "Off", FontSize, "Arial", Red);
      }
      if (ShowSSM15M30) {
         gi_428 = gi_428 + gi_408 + gi_424;
         l_name_0 = gs_oufm_316 + " " + "M15 Status";
         CreateLabelObj("M15 Status", gi_420, gi_428, FontSize, DeepSkyBlue);
         if (M15SSAlertsOn) ObjectSetText(l_name_0, "On", FontSize, "Arial", Lime);
         else ObjectSetText(l_name_0, "Off", FontSize, "Arial", Red);
         gi_428 += gi_408;
         l_name_0 = gs_oufm_316 + " " + "M30 Status";
         CreateLabelObj("M30 Status", gi_420, gi_428, FontSize, DeepSkyBlue);
         if (M30SSAlertsOn) ObjectSetText(l_name_0, "On", FontSize, "Arial", Lime);
         else ObjectSetText(l_name_0, "Off", FontSize, "Arial", Red);
      }
      if (ShowSSH1H4) {
         if (!ShowSSM15M30) gi_428 += gi_424;
         gi_428 += gi_408;
         l_name_0 = gs_oufm_316 + " " + "H1 Status";
         CreateLabelObj("H1 Status", gi_420, gi_428, FontSize, DeepSkyBlue);
         if (H1SSAlertsOn) ObjectSetText(l_name_0, "On", FontSize, "Arial", Lime);
         else ObjectSetText(l_name_0, "Off", FontSize, "Arial", Red);
         gi_428 += gi_408;
         l_name_0 = gs_oufm_316 + " " + "H4 Status";
         CreateLabelObj("H4 Status", gi_420, gi_428, FontSize, DeepSkyBlue);
         if (H4SSAlertsOn) ObjectSetText(l_name_0, "On", FontSize, "Arial", Lime);
         else ObjectSetText(l_name_0, "Off", FontSize, "Arial", Red);
      }
      if (ShowSSDWKMN) {
         gi_428 = gi_428 + gi_408 + gi_424;
         l_name_0 = gs_oufm_316 + " " + "D1 Status";
         CreateLabelObj("D1 Status", gi_420, gi_428, FontSize, DeepSkyBlue);
         if (D1SSAlertsOn) ObjectSetText(l_name_0, "On", FontSize, "Arial", Lime);
         else ObjectSetText(l_name_0, "Off", FontSize, "Arial", Red);
         gi_428 += gi_408;
         l_name_0 = gs_oufm_316 + " " + "W1 Status";
         CreateLabelObj("W1 Status", gi_420, gi_428, FontSize, DeepSkyBlue);
         if (W1SSAlertsOn) ObjectSetText(l_name_0, "On", FontSize, "Arial", Lime);
         else ObjectSetText(l_name_0, "Off", FontSize, "Arial", Red);
         gi_428 += gi_408;
         l_name_0 = gs_oufm_316 + " " + "MN Status";
         CreateLabelObj("MN Status", gi_420, gi_428, FontSize, DeepSkyBlue);
         if (MN1SSAlertsOn) ObjectSetText(l_name_0, "On", FontSize, "Arial", Lime);
         else ObjectSetText(l_name_0, "Off", FontSize, "Arial", Red);
      }
   }
   gi_420 += 3 * FontSize;
   gi_428 = gi_416 + gi_408;
   CreateLabelObj("Resistance", gi_420, gi_428, FontSize, DeepSkyBlue);
   gi_428 += gi_408;
   CreateLabelObj("Price", gi_420, gi_428, FontSize, DeepSkyBlue);
   gi_428 += gi_408;
   CreateLabelObj("Support", gi_420, gi_428, FontSize, DeepSkyBlue);
   gi_428 = gi_428 + gi_408 + gi_424;
   CreateDataObj(gs_324, "Half Pike", gi_420, gi_428, FontSize, DeepSkyBlue);
   gi_428 += gi_408;
   CreateDataObj(gs_st_alert_332, "Channel Hop", gi_420, gi_428, FontSize, DeepSkyBlue);
   gi_428 += gi_408;
   CreateDataObj(gs_lt_alert_340, "Gravy Train", gi_420, gi_428, FontSize, DeepSkyBlue);
   if (SlingShotsAllowed() && ShowSSM1M5 || ShowSSM15M30 || ShowSSH1H4 || ShowSSDWKMN) {
      if (ShowSSM1M5) {
         gi_428 = gi_428 + gi_408 + gi_424;
         CreateLabelObj("M1", gi_420, gi_428, FontSize, DeepSkyBlue);
         gi_428 += gi_408;
         CreateLabelObj("M5", gi_420, gi_428, FontSize, DeepSkyBlue);
      }
      if (ShowSSM15M30) {
         gi_428 = gi_428 + gi_408 + gi_424;
         CreateLabelObj("M15", gi_420, gi_428, FontSize, DeepSkyBlue);
         gi_428 += gi_408;
         CreateLabelObj("M30", gi_420, gi_428, FontSize, DeepSkyBlue);
      }
      if (ShowSSH1H4) {
         if (!ShowSSM15M30) gi_428 += gi_424;
         gi_428 += gi_408;
         CreateLabelObj("H1", gi_420, gi_428, FontSize, DeepSkyBlue);
         gi_428 += gi_408;
         CreateLabelObj("H4", gi_420, gi_428, FontSize, DeepSkyBlue);
      }
      if (ShowSSDWKMN) {
         gi_428 = gi_428 + gi_408 + gi_424;
         CreateLabelObj("D1", gi_420, gi_428, FontSize, DeepSkyBlue);
         gi_428 += gi_408;
         CreateLabelObj("W1", gi_420, gi_428, FontSize, DeepSkyBlue);
         gi_428 += gi_408;
         CreateLabelObj("MN", gi_420, gi_428, FontSize, DeepSkyBlue);
      }
   }
   gi_428 += gi_408;
   CreateDataObj("Notices", "", 5, gi_428, FontSize - 2, DeepSkyBlue);
}

void CreateDataColumn(int ai_0) {
   gi_420 = gi_412 + gi_404 * (gi_400 - (ai_0 + 1)) + 5;
   gi_428 = gi_416;
   CreateDataObj("lblCurr" + ai_0, (ai_0 + 1) + "-" + StringSubstr(gsa_396[ai_0], 0, 6), gi_420, gi_428, FontSize, White);
   gi_428 += gi_408;
   CreateDataObj("Resistance" + gsa_396[ai_0], "", gi_420, gi_428, FontSize, Yellow);
   gi_428 += gi_408;
   CreateDataObj("Price" + gsa_396[ai_0], "", gi_420, gi_428, FontSize, DeepSkyBlue);
   gi_428 += gi_408;
   CreateDataObj("Supp" + gsa_396[ai_0], "", gi_420, gi_428, FontSize, Yellow);
   gi_428 = gi_428 + gi_408 + gi_424;
   CreateDataObj(gs_324 + " " + gsa_396[ai_0], "", gi_420, gi_428, FontSize - 1, Yellow);
   gi_428 += gi_408;
   CreateDataObj(gs_st_alert_332 + " " + gsa_396[ai_0], "", gi_420, gi_428, FontSize - 1, Yellow);
   gi_428 += gi_408;
   CreateDataObj(gs_lt_alert_340 + " " + gsa_396[ai_0], "", gi_420, gi_428, FontSize - 1, Yellow);
   int li_4 = gi_420 + 1.2 * FontSize;
   if (SlingShotsAllowed() && ShowSSM1M5 || ShowSSM15M30 || ShowSSH1H4 || ShowSSDWKMN) {
      if (ShowSSM1M5) {
         gi_428 = gi_428 + gi_408 + gi_424;
         CreateDataObj(gia_312[0] + gsa_396[ai_0], "", li_4, gi_428, FontSize, White);
         CreateDataObj(gia_312[0] + gsa_396[ai_0] + " dir", "", gi_420, gi_428, FontSize, White);
         gi_428 += gi_408;
         CreateDataObj(gia_312[1] + gsa_396[ai_0], "", li_4, gi_428, FontSize, White);
         CreateDataObj(gia_312[1] + gsa_396[ai_0] + " dir", "", gi_420, gi_428, FontSize, White);
      }
      if (ShowSSM15M30) {
         gi_428 = gi_428 + gi_408 + gi_424;
         CreateDataObj(gia_312[2] + gsa_396[ai_0], "", li_4, gi_428, FontSize, White);
         CreateDataObj(gia_312[2] + gsa_396[ai_0] + " dir", "", gi_420, gi_428, FontSize, White);
         gi_428 += gi_408;
         CreateDataObj(gia_312[3] + gsa_396[ai_0], "", li_4, gi_428, FontSize, White);
         CreateDataObj(gia_312[3] + gsa_396[ai_0] + " dir", "", gi_420, gi_428, FontSize, White);
      }
      if (ShowSSH1H4) {
         if (!ShowSSM15M30) gi_428 += gi_424;
         gi_428 += gi_408;
         CreateDataObj(gia_312[4] + gsa_396[ai_0], "", li_4, gi_428, FontSize, White);
         CreateDataObj(gia_312[4] + gsa_396[ai_0] + " dir", "", gi_420, gi_428, FontSize, White);
         gi_428 += gi_408;
         CreateDataObj(gia_312[5] + gsa_396[ai_0], "", li_4, gi_428, FontSize, White);
         CreateDataObj(gia_312[5] + gsa_396[ai_0] + " dir", "", gi_420, gi_428, FontSize, White);
      }
      if (ShowSSDWKMN) {
         gi_428 = gi_428 + gi_408 + gi_424;
         CreateDataObj(gia_312[6] + gsa_396[ai_0], "", li_4, gi_428, FontSize, White);
         CreateDataObj(gia_312[6] + gsa_396[ai_0] + " dir", "", gi_420, gi_428, FontSize, White);
         gi_428 += gi_408;
         CreateDataObj(gia_312[7] + gsa_396[ai_0], "", li_4, gi_428, FontSize, White);
         CreateDataObj(gia_312[7] + gsa_396[ai_0] + " dir", "", gi_420, gi_428, FontSize, White);
         gi_428 += gi_408;
         CreateDataObj(gia_312[8] + gsa_396[ai_0], "", li_4, gi_428, FontSize, White);
         CreateDataObj(gia_312[8] + gsa_396[ai_0] + " dir", "", gi_420, gi_428, FontSize, White);
      }
   }
}

int skipcheck(int ai_0) {
   return (ai_0 != 5);
}

int TMGreenExt(int ai_0) {
   return (gia_268[ai_0] > gia_272[ai_0] && MathAbs(gia_268[ai_0] - gia_272[ai_0]) >= gi_244);
}

int TMRedExt(int ai_0) {
   return (gia_268[ai_0] < gia_272[ai_0] && MathAbs(gia_268[ai_0] - gia_272[ai_0]) >= gi_244);
}

int TMGreen(int ai_0) {
   return (gia_268[ai_0] > gia_272[ai_0]);
}

bool TMRed(int ai_0) {
   return (gia_268[ai_0] < gia_272[ai_0]);
}
