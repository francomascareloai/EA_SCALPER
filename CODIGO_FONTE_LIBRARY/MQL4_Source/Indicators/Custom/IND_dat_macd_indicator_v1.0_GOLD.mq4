/*
   Generated by EX4-TO-MQ4 decompiler V4.0.224.1 []
   Website: http://purebeam.biz
   E-mail : purebeam@gmail.com
*/
#property copyright ""
#property link      ""

#property indicator_separate_window
#property indicator_buffers 8
#property indicator_color1 LimeGreen
#property indicator_color2 Red
#property indicator_color3 Orange
#property indicator_color4 LimeGreen
#property indicator_color5 Red
#property indicator_color6 Silver
#property indicator_color7 LimeGreen
#property indicator_color8 Red
#property indicator_width1 2


string gs_76;
string gs_84;
extern bool Show_Signal = TRUE;
bool gi_96 = FALSE;
extern string _1_ = "--- MACD Settings ---";
extern int FastPeriod = 12;
extern int SlowPeriod = 26;
extern int SignalPeriod = 9;
extern string method_selection = "0:SMA,1:EMA,2:SMMA,3:LWMA";
extern int method_type = 3;
extern string price_selection = "0:CLOSE,1:OPEN,2:HIGH,3:LOW,4:Median(high+low)/2,5:Typical(high+low+close)/3,6:Weighted(high+low+close+close)/4";
extern int price_type = 0;
extern string _1__ = "--- Trix Settings ---";
extern bool Show_TRIX = FALSE;
extern int TrixFastPeriod = 18;
extern int TrixSlowPeriod = 35;
extern double Trix_b = 0.1;
extern double Trix_hot = 0.7;
extern double Trix_Cool = 35.0;
extern string _2_ = "--- Divergence Settings ---";
extern int IndicatorLineWindow = 1;
extern color DivergenceUpColor = DarkGoldenrod;
extern color DivergenceDnColor = DarkGoldenrod;
extern bool ShowChartTrendLines = FALSE;
extern bool ShowSubWindowTrendLines = FALSE;
extern bool ShowTrendLines1MChart = FALSE;
extern bool AlertShowOnDivergence = FALSE;
extern bool AlertSoundOnDivergence = FALSE;
extern bool AlertMailOnDivergence = FALSE;
extern string ClassicUpDivSound = "alert.wav";
extern string ClassicDnDivSound = "alert.wav";
extern string ReverseUpDivSound = "news.wav";
extern string ReverseDnDivSound = "news.wav";
extern int NumberOfDivergenceBars = 500;
extern string _3_ = "--- Level Settings ---";
extern string note1 = "Trix level colors";
extern color Level_High = FireBrick;
extern color Level_Zero = DimGray;
extern color Level_Low = DarkGreen;
extern int Level_Style = 2;
extern string _4_ = "--- Alert Settings ---";
extern bool AlertShow = FALSE;
extern bool AlertSound = FALSE;
extern string AlertSoundName = "alert.wav";
extern bool AlertMail = FALSE;
bool gi_328 = FALSE;
extern string _5_ = "--- others Settings ---";
extern bool Show_Title = TRUE;
extern bool Show_Value = FALSE;
extern int CalculateBars = 500;
double g_ibuf_352[];
double g_ibuf_356[];
double g_ibuf_360[];
double g_ibuf_364[];
double g_ibuf_368[];
double g_ibuf_372[];
double g_ibuf_376[];
double g_ibuf_380[];
double gda_384[];
double gda_388[];
int gi_392 = 0;
int gi_396 = 0;
datetime g_time_404;
datetime g_time_408;
int g_time_412 = 315532800;
int g_time_416 = 315532800;
int g_time_420 = 315532800;
int g_datetime_424 = 315532800;
int gi_432;
string gs_436;
int gi_444 = 0;
int gi_unused_448 = 1;
int gi_452 = 2;
int gi_unused_456 = 3;
int gi_460;

int init() {
   string ls_4;
   string ls_16;
   switch (Period()) {
   case PERIOD_M1:
      gs_84 = "M1";
      break;
   case PERIOD_M5:
      gs_84 = "M5";
      break;
   case PERIOD_M15:
      gs_84 = "M15";
      break;
   case PERIOD_M30:
      gs_84 = "M30";
      break;
   case PERIOD_H1:
      gs_84 = "H1";
      break;
   case PERIOD_H4:
      gs_84 = "H4";
      break;
   case PERIOD_D1:
      gs_84 = "D1";
      break;
   case PERIOD_W1:
      gs_84 = "W1";
      break;
   case PERIOD_MN1:
      gs_84 = "MN1";
      break;
   default:
      gs_84 = "";
   }
   switch (method_type) {
   case 0:
      ls_4 = "SMA";
      break;
   case 1:
      ls_4 = "EMA";
      break;
   case 2:
      ls_4 = "SMMA";
      break;
   case 3:
      ls_4 = "LWMA";
      break;
   default:
      ls_4 = "";
   }
   if (ls_4 == "") {
      method_type = 1;
      ls_4 = "EMA";
   }
   switch (price_type) {
   case 0:
      ls_16 = "CLOSE";
      break;
   case 1:
      ls_16 = "OPEN";
      break;
   case 2:
      ls_16 = "HIGH";
      break;
   case 3:
      ls_16 = "LOW";
      break;
   case 4:
      ls_16 = "Median";
      break;
   case 5:
      ls_16 = "Typical";
      break;
   case 6:
      ls_16 = "Weighted";
      break;
   default:
      ls_16 = "";
   }
   if (ls_16 == "") {
      price_type = 0;
      ls_16 = "CLOSE";
   }
   gs_76 = "DAT_MACD";
   if (Show_Value) gs_76 = gs_76 + "(" + FastPeriod + "," + SlowPeriod + "," + SignalPeriod + ")" + ls_4 + "/" + ls_16;
   if (Show_Title == FALSE) gs_76 = "";
   IndicatorShortName(gs_76);
   SetIndexBuffer(0, g_ibuf_352);
   SetIndexBuffer(1, g_ibuf_356);
   SetIndexBuffer(2, g_ibuf_360);
   SetIndexBuffer(3, g_ibuf_364);
   SetIndexBuffer(4, g_ibuf_368);
   SetIndexBuffer(5, g_ibuf_372);
   SetIndexBuffer(6, g_ibuf_376);
   SetIndexBuffer(7, g_ibuf_380);
   SetIndexLabel(0, "Signal up");
   SetIndexLabel(1, "Signal down");
   SetIndexLabel(2, "Main");
   SetIndexLabel(3, "Main up");
   SetIndexLabel(4, "Main down");
   SetIndexLabel(5, "Trix Trend");
   SetIndexLabel(6, "MACD UpSign");
   SetIndexLabel(7, "MACD DnSign");
   if (!Show_Value) {
      SetIndexLabel(0, NULL);
      SetIndexLabel(1, NULL);
      SetIndexLabel(2, NULL);
      SetIndexLabel(3, NULL);
      SetIndexLabel(4, NULL);
      SetIndexLabel(5, NULL);
      SetIndexLabel(6, NULL);
      SetIndexLabel(7, NULL);
   }
   SetIndexStyle(0, DRAW_LINE);
   SetIndexStyle(1, DRAW_LINE);
   SetIndexStyle(2, DRAW_LINE);
   SetIndexStyle(3, DRAW_LINE);
   SetIndexStyle(4, DRAW_LINE);
   SetIndexStyle(5, DRAW_LINE);
   SetIndexStyle(6, DRAW_ARROW);
   SetIndexStyle(7, DRAW_ARROW);
   SetIndexArrow(6, 233);
   SetIndexArrow(7, 234);
   if (CalculateBars > 0) {
      SetIndexDrawBegin(0, Bars - CalculateBars);
      SetIndexDrawBegin(1, Bars - CalculateBars);
      SetIndexDrawBegin(2, Bars - CalculateBars);
      SetIndexDrawBegin(3, Bars - CalculateBars);
      SetIndexDrawBegin(4, Bars - CalculateBars);
      SetIndexDrawBegin(5, Bars - CalculateBars);
      SetIndexDrawBegin(6, Bars - CalculateBars);
      SetIndexDrawBegin(7, Bars - CalculateBars);
   }
   ArrayResize(gda_384, CalculateBars);
   ArrayResize(gda_388, CalculateBars);
   ArrayInitialize(gda_384, 0);
   ArrayInitialize(gda_388, 0);
   gi_432 = WindowFind(gs_76);
   if (IndicatorLineWindow > gi_432) gi_432 = IndicatorLineWindow;
   if (gi_432 < 0) gi_432 = 0;
   gs_436 = gs_76 + "_";
   g_time_412 = Time[0];
   g_time_416 = Time[0];
   g_time_420 = Time[0];
   g_datetime_424 = TimeLocal();
   return (0);
}

int deinit() {
   DeleteObjects(gs_436);
   Comment("");
   return (0);
}

void DeleteObjects(string as_0) {
   string l_name_8;
   for (int li_16 = ObjectsTotal() - 1; li_16 >= 0; li_16--) {
      l_name_8 = ObjectName(li_16);
      if (StringFind(l_name_8, as_0) > -1) ObjectDelete(l_name_8);
   }
}

void start() {
   double ld_0;
   int li_16;
   double ld_48;
   double ld_56;
   int l_period_72;
   int l_period_76;
   double ld_80;
   double ld_88;
   double l_imomentum_96;
   if (Period() == PERIOD_M1) ld_0 = 0.0002;
   if (Period() == PERIOD_M5) ld_0 = 0.0003;
   if (Period() == PERIOD_M15) ld_0 = 0.0005;
   if (Period() == PERIOD_M30) ld_0 = 0.008;
   if (Period() == PERIOD_H1) ld_0 = 0.0012;
   if (Period() == PERIOD_H4) ld_0 = 0.003;
   if (Period() == PERIOD_D1) ld_0 = 0.005;
   if (Period() == PERIOD_W1) ld_0 = 0.08;
   if (Period() == PERIOD_MN1) ld_0 = 0.015;
   if (Trix_b > 0.0) ld_0 = Trix_b;
   double ld_8 = -1.0 * ld_0;
   DrawHLine("Level_HL", ld_0, gi_432, Level_High, Level_Style);
   DrawHLine("Level_ZL", 0, gi_432, Level_Zero, Level_Style);
   DrawHLine("Level_LL", ld_8, gi_432, Level_Low, Level_Style);
   int li_20 = IndicatorCounted();
   if (li_20 > 0) li_20--;
   if (li_20 > CalculateBars) li_16 = CalculateBars;
   else li_16 = Bars - li_20;
   bool li_24 = TRUE;
   if (!ShowTrendLines1MChart && Period() == PERIOD_M1) li_24 = FALSE;
   for (int li_28 = 0; li_28 < li_16; li_28++) g_ibuf_360[li_28] = iMA(NULL, 0, FastPeriod, 0, method_type, price_type, li_28) - iMA(NULL, 0, SlowPeriod, 0, method_type, price_type, li_28);
   for (li_28 = 0; li_28 < li_16; li_28++) {
      gda_384[li_28] = g_ibuf_360[li_28];
      gda_388[li_28] = iMAOnArray(g_ibuf_360, Bars, SignalPeriod, 0, MODE_SMA, li_28);
   }
   int li_unused_64 = 1;
   bool li_68 = TRUE;
   for (li_28 = li_16 - 1; li_28 >= 0; li_28--) {
      g_ibuf_352[li_28] = EMPTY_VALUE;
      g_ibuf_356[li_28] = EMPTY_VALUE;
      g_ibuf_364[li_28] = EMPTY_VALUE;
      g_ibuf_368[li_28] = EMPTY_VALUE;
      if (gda_388[li_28 + 1] < gda_388[li_28]) {
         if (g_ibuf_352[li_28 + 1] == EMPTY_VALUE) g_ibuf_352[li_28 + 1] = gda_388[li_28 + 1];
         g_ibuf_352[li_28] = gda_388[li_28];
      } else {
         if (gda_388[li_28 + 1] > gda_388[li_28]) {
            if (g_ibuf_356[li_28 + 1] == EMPTY_VALUE) g_ibuf_356[li_28 + 1] = gda_388[li_28 + 1];
            g_ibuf_356[li_28] = gda_388[li_28];
         }
      }
      ld_56 = gda_384[li_28];
      ld_48 = gda_384[li_28 + 1];
      if (ld_56 > ld_48) li_68 = TRUE;
      if (ld_56 < ld_48) li_68 = FALSE;
      if (li_68) {
         g_ibuf_364[li_28] = ld_56;
         g_ibuf_368[li_28] = EMPTY_VALUE;
      } else {
         g_ibuf_368[li_28] = ld_56;
         g_ibuf_364[li_28] = EMPTY_VALUE;
      }
      if (li_28 <= NumberOfDivergenceBars && li_24) {
         CatchDivergenceUp(li_28 + 2);
         CatchDivergenceDn(li_28 + 2);
      }
   }
   if (Show_TRIX) TrixSec();
   if (Show_Signal) {
      for (li_28 = li_16 - 1; li_28 >= 0; li_28--) {
         if (gi_96) {
            l_period_72 = 100;
            l_period_76 = 200;
            ld_80 = iMA(NULL, 0, l_period_72, 0, MODE_SMA, PRICE_CLOSE, li_28 + 0) - iMA(NULL, 0, l_period_76, 0, MODE_SMA, PRICE_CLOSE, li_28 + 0);
            ld_88 = iMA(NULL, 0, l_period_72, 0, MODE_SMA, PRICE_CLOSE, li_28 + 1) - iMA(NULL, 0, l_period_76, 0, MODE_SMA, PRICE_CLOSE, li_28 + 1);
            gi_460 = EMPTY_VALUE;
            if (ld_80 > ld_88) gi_460 = 0;
            if (ld_80 < ld_88) gi_460 = 1;
            l_imomentum_96 = iMomentum(NULL, 0, 13, PRICE_CLOSE, li_28);
            if (l_imomentum_96 > 100.0) gi_460 = 0;
            if (l_imomentum_96 <= 100.0) gi_460 = 1;
         }
         g_ibuf_376[li_28] = EMPTY_VALUE;
         g_ibuf_380[li_28] = EMPTY_VALUE;
         if (gda_384[li_28] >= gda_388[li_28] && gda_384[li_28 + 1] < gda_388[li_28 + 1]) {
            if (!gi_96 || (gi_96 && gi_460 == 0)) {
               g_ibuf_376[li_28] = gda_388[li_28];
               subShowAlert(gs_76, "BUY");
            }
         }
         if (gda_384[li_28] <= gda_388[li_28] && gda_384[li_28 + 1] > gda_388[li_28 + 1]) {
            if (!gi_96 || (gi_96 && gi_460 == 1)) {
               g_ibuf_380[li_28] = gda_388[li_28];
               subShowAlert(gs_76, "SELL");
            }
         }
      }
   }
}

void TrixSec() {
   int li_0 = 0;
   double ld_4 = 0;
   double ld_12 = 0;
   double ld_20 = 0;
   double ld_28 = 0;
   double ld_36 = 0;
   double ld_44 = 0;
   double ld_52 = 0;
   double ld_60 = 0;
   double ld_68 = 0;
   double ld_76 = 0;
   double ld_84 = 0;
   double ld_92 = 0;
   double ld_100 = 0;
   double ld_108 = 0;
   double ld_116 = 0;
   double ld_124 = 0;
   double ld_132 = 0;
   double ld_140 = 0;
   double ld_148 = 0;
   double ld_156 = 0;
   double ld_164 = 0;
   double ld_172 = 0;
   double ld_180 = 0;
   double ld_188 = 0;
   double ld_196 = 0;
   double ld_204 = 0;
   double ld_212 = 0;
   double ld_220 = 0;
   double ld_228 = 0;
   double ld_236 = 0;
   double ld_244 = 0;
   double ld_252 = 0;
   double ld_260 = 0;
   double ld_268 = 0;
   double ld_276 = 0;
   double ld_284 = 0;
   double ld_292 = 0;
   double ld_300 = 0;
   double ld_308 = 0;
   double ld_316 = 1;
   double ld_324 = 0;
   double ld_332 = 0;
   double ld_340 = 0;
   double ld_348 = 0;
   double ld_356 = 0;
   double ld_364 = 0;
   string ls_372 = "nonono";
   int li_unused_380 = CalculateBars;
   bool li_384 = TRUE;
   ld_348 = CalculateBars + TrixFastPeriod + gi_392 + TrixSlowPeriod + gi_396 + Trix_hot;
   if (ld_348 == ld_356 && ls_372 == Symbol()) {
      if (ld_364 == Time[4] - Time[5] && CalculateBars - ld_332 < 2.0) ld_340 = CalculateBars - ld_332;
   } else ld_340 = -1;
   ls_372 = Symbol();
   ld_364 = Time[4] - Time[5];
   ld_332 = CalculateBars;
   ld_356 = ld_348;
   if (ld_340 == 1.0 || ld_340 == 0.0) ld_324 = ld_340;
   else ld_316 = 1;
   if (!ShowTrendLines1MChart && Period() == PERIOD_M1) li_384 = FALSE;
   if (ld_316 == 1.0) {
      ld_300 = Trix_hot * Trix_hot;
      ld_308 = ld_300 * Trix_hot;
      ld_84 = -ld_308;
      ld_92 = 3.0 * (ld_300 + ld_308);
      ld_100 = -3.0 * (2.0 * ld_300 + Trix_hot + ld_308);
      ld_108 = 3.0 * Trix_hot + 1.0 + ld_308 + 3.0 * ld_300;
      ld_260 = TrixFastPeriod;
      if (ld_260 < 1.0) ld_260 = 1;
      ld_260 = (ld_260 - 1.0) / 2.0 + 1.0;
      ld_268 = 2 / (ld_260 + 1.0);
      ld_276 = 1 - ld_268;
      ld_260 = TrixSlowPeriod;
      if (ld_260 < 1.0) ld_260 = 1;
      ld_260 = (ld_260 - 1.0) / 2.0 + 1.0;
      ld_284 = 2 / (ld_260 + 1.0);
      ld_292 = 1 - ld_284;
      ld_212 = 0;
      ld_220 = 0;
      ld_228 = 0;
      ld_236 = 0;
      ld_244 = 0;
      ld_252 = 0;
      g_ibuf_372[CalculateBars - 1] = 0;
      ld_116 = 0;
      ld_124 = 0;
      ld_132 = 0;
      ld_140 = 0;
      ld_148 = 0;
      ld_156 = 0;
      ld_324 = CalculateBars - 2;
      ld_316 = 0;
   }
   for (li_0 = ld_324; li_0 >= 0; li_0--) {
      if (gi_392 == 1) ld_164 = ld_268 * Open[li_0] + ld_276 * ld_212;
      else ld_164 = ld_268 * Close[li_0] + ld_276 * ld_212;
      ld_172 = ld_268 * ld_164 + ld_276 * ld_220;
      ld_180 = ld_268 * ld_172 + ld_276 * ld_228;
      ld_188 = ld_268 * ld_180 + ld_276 * ld_236;
      ld_196 = ld_268 * ld_188 + ld_276 * ld_244;
      ld_204 = ld_268 * ld_196 + ld_276 * ld_252;
      ld_4 = ld_84 * ld_204 + ld_92 * ld_196 + ld_100 * ld_188 + ld_108 * ld_180;
      if ((ld_340 == 1.0 && li_0 == 1) || ld_340 == -1.0) {
         ld_212 = ld_164;
         ld_220 = ld_172;
         ld_228 = ld_180;
         ld_236 = ld_188;
         ld_244 = ld_196;
         ld_252 = ld_204;
      }
      ld_36 = ld_284 * Close[li_0] + ld_292 * ld_116;
      ld_44 = ld_284 * ld_36 + ld_292 * ld_124;
      ld_52 = ld_284 * ld_44 + ld_292 * ld_132;
      ld_60 = ld_284 * ld_52 + ld_292 * ld_140;
      ld_68 = ld_284 * ld_60 + ld_292 * ld_148;
      ld_76 = ld_284 * ld_68 + ld_292 * ld_156;
      ld_20 = ld_84 * ld_76 + ld_92 * ld_68 + ld_100 * ld_60 + ld_108 * ld_52;
      if (gi_396 == 1) g_ibuf_372[li_0] = 10000.0 * ((ld_4 - ld_12) / ld_12) / Trix_Cool;
      else
         if (ld_28 > 0.0 && ld_12 > 0.0) g_ibuf_372[li_0] = 10000.0 * ((ld_4 - ld_12) / ld_12) / Trix_Cool;
      if ((ld_340 == 1.0 && li_0 == 1) || ld_340 == -1.0) {
         ld_12 = ld_4;
         ld_28 = ld_20;
         ld_116 = ld_36;
         ld_124 = ld_44;
         ld_132 = ld_52;
         ld_140 = ld_60;
         ld_148 = ld_68;
         ld_156 = ld_76;
      }
      if (li_0 <= NumberOfDivergenceBars && li_384) {
         CatchDivergenceUp(li_0 + 2);
         CatchDivergenceDn(li_0 + 2);
      }
   }
}

void subShowAlert(string as_0, string as_8) {
   string ls_unused_24;
   string ls_32;
   int li_40;
   string ls_44;
   int li_52;
   int li_56;
   double ld_60;
   double ld_68;
   double ld_76;
   double ld_84;
   string l_str_concat_16 = StringConcatenate(as_0, " ", as_8, " ", Close[0], " on ", gs_76, "-", gs_84, " ", TimeToStr(TimeLocal(), TIME_SECONDS), " ", Symbol());
   if (AlertShow == TRUE && g_time_412 != Time[0]) {
      Alert(l_str_concat_16);
      g_time_412 = Time[0];
   }
   if (AlertSound == TRUE && g_time_416 != Time[0]) {
      PlaySound(AlertSoundName);
      g_time_416 = Time[0];
   }
   if (AlertMail == TRUE && g_time_420 != Time[0]) {
      ls_32 = "HighPerformance Exchange Indicators from DayAfterTrade";
      SendMail(l_str_concat_16, ls_32);
      g_time_420 = Time[0];
   }
   if (gi_328 == TRUE && g_datetime_424 != TimeLocal()) {
      li_40 = 8;
      ls_44 = "Arial";
      li_52 = 55295;
      li_56 = 55295;
      if (StringFind(as_8, "BUY") > -1) {
         li_52 = 65280;
         li_56 = 65280;
      }
      if (StringFind(as_8, "SELL") > -1) {
         li_52 = 3937500;
         li_56 = 3937500;
      }
      if (StringFind(as_8, "EXIT") > -1) {
         li_52 = 55295;
         li_56 = 55295;
      }
      ld_60 = 6;
      ld_68 = 32;
      ld_76 = 6;
      ld_84 = 32;
      DrawText("AlertChart", as_8, 0, gi_444, ld_76, ld_84, li_52, li_56, li_40, ls_44);
      DrawText("AlertChart", as_8, 0, gi_452, ld_60, ld_68, li_52, li_56, li_40, ls_44);
      g_datetime_424 = TimeLocal();
   }
}

void CatchDivergenceUp(int ai_0) {
   int li_4;
   int li_8;
   if (IsIndicatorTrough(ai_0) != 0) {
      li_4 = ai_0;
      li_8 = GetIndicatorLastTrough(ai_0);
      if (gda_384[li_4] > gda_384[li_8] && Low[li_4] < Low[li_8]) {
         g_ibuf_376[li_4] = gda_384[li_4] - 0.00002;
         if (ShowChartTrendLines == TRUE) DrawTrendLine("TrendLine", 0, Time[li_4], Time[li_8], Low[li_4], Low[li_8], DivergenceUpColor, STYLE_SOLID);
         if (ShowSubWindowTrendLines == TRUE) DrawTrendLine("TrendLine", gi_432, Time[li_4], Time[li_8], gda_384[li_4], gda_384[li_8], DivergenceUpColor, STYLE_SOLID);
         if (AlertShowOnDivergence == TRUE) {
            if (AlertSoundOnDivergence == TRUE) SoundAlert(ClassicUpDivSound, li_4);
            else DisplayAlert("Classical bullish divergence on: ", li_4);
         }
      }
      if (gda_384[li_4] < gda_384[li_8] && Low[li_4] > Low[li_8]) {
         g_ibuf_376[li_4] = gda_384[li_4] - 0.00002;
         if (ShowChartTrendLines == TRUE) DrawTrendLine("TrendLine", 0, Time[li_4], Time[li_8], Low[li_4], Low[li_8], DivergenceUpColor, STYLE_DOT);
         if (ShowSubWindowTrendLines == TRUE) DrawTrendLine("TrendLine", gi_432, Time[li_4], Time[li_8], gda_384[li_4], gda_384[li_8], DivergenceUpColor, STYLE_DOT);
         if (AlertShowOnDivergence == TRUE) {
            if (AlertSoundOnDivergence == TRUE) {
               SoundAlert(ReverseUpDivSound, li_4);
               return;
            }
            DisplayAlert("Reverse bullish divergence on: ", li_4);
         }
      }
   }
}

void CatchDivergenceDn(int ai_0) {
   int li_4;
   int li_8;
   if (IsIndicatorPeak(ai_0) != 0) {
      li_4 = ai_0;
      li_8 = GetIndicatorLastPeak(ai_0);
      if (gda_384[li_4] < gda_384[li_8] && High[li_4] > High[li_8]) {
         g_ibuf_380[li_4] = gda_384[li_4] + 0.00002;
         if (ShowChartTrendLines == TRUE) DrawTrendLine("TrendLine", 0, Time[li_4], Time[li_8], High[li_4], High[li_8], DivergenceDnColor, STYLE_SOLID);
         if (ShowSubWindowTrendLines == TRUE) DrawTrendLine("TrendLine", gi_432, Time[li_4], Time[li_8], gda_384[li_4], gda_384[li_8], DivergenceDnColor, STYLE_SOLID);
         if (AlertShowOnDivergence == TRUE) {
            if (AlertSoundOnDivergence == TRUE) SoundAlert(ClassicDnDivSound, li_4);
            else DisplayAlert("Classical bearish divergence on: ", li_4);
         }
      }
      if (gda_384[li_4] > gda_384[li_8] && High[li_4] < High[li_8]) {
         g_ibuf_380[li_4] = gda_384[li_4] + 0.00002;
         if (ShowChartTrendLines == TRUE) DrawTrendLine("TrendLine", 0, Time[li_4], Time[li_8], High[li_4], High[li_8], DivergenceDnColor, STYLE_DOT);
         if (ShowSubWindowTrendLines == TRUE) DrawTrendLine("TrendLine", gi_432, Time[li_4], Time[li_8], gda_384[li_4], gda_384[li_8], DivergenceDnColor, STYLE_DOT);
         if (AlertShowOnDivergence == TRUE) {
            if (AlertSoundOnDivergence == TRUE) {
               SoundAlert(ReverseDnDivSound, li_4);
               return;
            }
            DisplayAlert("Reverse bearish divergence on: ", li_4);
         }
      }
   }
}

int IsIndicatorTrough(int ai_0) {
   if (gda_384[ai_0] <= gda_384[ai_0 + 1] && gda_384[ai_0] < gda_384[ai_0 + 2] && gda_384[ai_0] < gda_384[ai_0 - 1]) return (1);
   return (0);
}

int GetIndicatorLastTrough(int ai_0) {
   for (int li_4 = ai_0 + 5; li_4 < CalculateBars; li_4++) {
      if (gda_388[li_4] <= gda_388[li_4 + 1] && gda_388[li_4] <= gda_388[li_4 + 2] && gda_388[li_4] <= gda_388[li_4 - 1] && gda_388[li_4] <= gda_388[li_4 - 2]) {
         for (int li_ret_8 = li_4; li_ret_8 < CalculateBars; li_ret_8++)
            if (gda_384[li_ret_8] <= gda_384[li_ret_8 + 1] && gda_384[li_ret_8] < gda_384[li_ret_8 + 2] && gda_384[li_ret_8] <= gda_384[li_ret_8 - 1] && gda_384[li_ret_8] < gda_384[li_ret_8 - 2]) return (li_ret_8);
      }
   }
   return (-1);
}

int IsIndicatorPeak(int ai_0) {
   if (gda_384[ai_0] >= gda_384[ai_0 + 1] && gda_384[ai_0] > gda_384[ai_0 + 2] && gda_384[ai_0] > gda_384[ai_0 - 1]) return (1);
   return (0);
}

int GetIndicatorLastPeak(int ai_0) {
   for (int li_4 = ai_0 + 5; li_4 < CalculateBars; li_4++) {
      if (gda_388[li_4] >= gda_388[li_4 + 1] && gda_388[li_4] >= gda_388[li_4 + 2] && gda_388[li_4] >= gda_388[li_4 - 1] && gda_388[li_4] >= gda_388[li_4 - 2]) {
         for (int li_ret_8 = li_4; li_ret_8 < CalculateBars; li_ret_8++)
            if (gda_384[li_ret_8] >= gda_384[li_ret_8 + 1] && gda_384[li_ret_8] > gda_384[li_ret_8 + 2] && gda_384[li_ret_8] >= gda_384[li_ret_8 - 1] && gda_384[li_ret_8] > gda_384[li_ret_8 - 2]) return (li_ret_8);
      }
   }
   return (-1);
}

void DrawText(string as_0, string a_text_8, int a_window_16, int a_corner_20, int a_x_24, int a_y_28, color a_color_32, color a_color_36, int a_fontsize_40 = 14, string a_fontname_44 = "Arial Black") {
   string l_name_52 = gs_436 + as_0;
   ObjectDelete(l_name_52);
   ObjectCreate(l_name_52, OBJ_LABEL, a_window_16, 0, 0);
   ObjectSet(l_name_52, OBJPROP_CORNER, a_corner_20);
   ObjectSet(l_name_52, OBJPROP_XDISTANCE, a_x_24);
   ObjectSet(l_name_52, OBJPROP_YDISTANCE, a_y_28);
   ObjectSet(l_name_52, OBJPROP_COLOR, a_color_32);
   ObjectSetText(l_name_52, a_text_8, a_fontsize_40, a_fontname_44, a_color_36);
}

void DrawHLine(string as_0, double a_price_8, int a_window_16, color a_color_20, int a_style_24) {
   string l_name_28 = gs_436 + as_0;
   if (a_window_16 >= 0) {
      ObjectDelete(l_name_28);
      ObjectCreate(l_name_28, OBJ_HLINE, a_window_16, Time[0], a_price_8);
      ObjectSet(l_name_28, OBJPROP_STYLE, a_style_24);
      ObjectSet(l_name_28, OBJPROP_COLOR, a_color_20);
      ObjectSet(l_name_28, OBJPROP_WIDTH, 1);
   }
}

void DrawTrendLine(string as_0, int a_window_8, int a_datetime_12, int a_datetime_16, double a_price_20, double a_price_28, color a_color_36, double a_style_40) {
   string l_name_48 = gs_436 + a_window_8 + "_" + as_0 + "_" + DoubleToStr(a_datetime_12, 0);
   ObjectDelete(l_name_48);
   ObjectCreate(l_name_48, OBJ_TREND, a_window_8, a_datetime_12, a_price_20, a_datetime_16, a_price_28, 0, 0);
   ObjectSet(l_name_48, OBJPROP_RAY, FALSE);
   ObjectSet(l_name_48, OBJPROP_COLOR, a_color_36);
   ObjectSet(l_name_48, OBJPROP_STYLE, a_style_40);
}

void DisplayAlert(string as_0, int ai_8) {
   string ls_unused_12;
   string ls_20;
   if (ai_8 <= 2 && Time[ai_8] != g_time_404) {
      g_time_404 = Time[ai_8];
      Alert(as_0, Symbol(), " , ", gs_84, " minutes chart");
      ls_20 = "Divergence on " + gs_84;
      if (AlertMailOnDivergence) SendMail(ls_20, as_0);
   }
}

void SoundAlert(string as_0, int ai_8) {
   if (ai_8 <= 2 && Time[ai_8] != g_time_408) {
      g_time_408 = Time[ai_8];
      PlaySound(as_0);
   }
}