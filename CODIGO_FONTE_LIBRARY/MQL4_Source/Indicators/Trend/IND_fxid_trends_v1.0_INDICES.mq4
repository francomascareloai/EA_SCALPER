/*
   Generated by EX4-TO-MQ4 decompiler V4.0.438.4 [-]
   Website: https://purebeam.biz
   E-mail : purebeam@gmail.com
*/
#property copyright "RoboFxId.Com"
#property link      "http://robofxid.com "

#property indicator_separate_window
#property indicator_buffers 3
#property indicator_color1 Black
#property indicator_color2 Green
#property indicator_color3 Red

int gi_76 = 0;
int gi_80 = 20;
int gi_84 = 0;
int gi_88 = 0;
int gi_92 = 1;
int gi_96 = 1;
double gd_100 = 0.0;
double gda_108[];
double gda_112[];
double gda_116[];
double gda_120[];
double gda_124[];
int gi_128;
int gi_132;
int gi_136;
int gi_140 = 4;
double gd_144;
double gd_152;
double gd_160;
double gd_168;
double gd_176;
double gd_184;
double gd_192 = 3.1415926535;

int init() {
   IndicatorBuffers(4);
   SetIndexStyle(0, DRAW_NONE);
   SetIndexBuffer(0, gda_108);
   SetIndexStyle(1, DRAW_HISTOGRAM, STYLE_SOLID, 3);
   SetIndexBuffer(1, gda_112);
   SetIndexStyle(2, DRAW_HISTOGRAM, STYLE_SOLID, 3);
   SetIndexBuffer(2, gda_116);
   SetIndexBuffer(3, gda_120);
   IndicatorDigits(MarketInfo(Symbol(), MODE_DIGITS));
   string ls_0 = "robofxid_trends";
   IndicatorShortName(ls_0);
   SetIndexLabel(0, "robofxid_trends");
   SetIndexLabel(1, "Bull");
   SetIndexLabel(2, "Bear");
   SetIndexShift(0, gi_84);
   SetIndexShift(1, gi_84);
   SetIndexShift(2, gi_84);
   SetIndexEmptyValue(0, EMPTY_VALUE);
   SetIndexEmptyValue(1, EMPTY_VALUE);
   SetIndexEmptyValue(2, EMPTY_VALUE);
   SetIndexDrawBegin(0, gi_80 * gi_140 + gi_80);
   SetIndexDrawBegin(1, gi_80 * gi_140 + gi_80);
   SetIndexDrawBegin(2, gi_80 * gi_140 + gi_80);
   gd_144 = 3.0 * gd_192;
   gi_132 = gi_80 - 1;
   gi_136 = gi_80 * gi_140 + gi_132;
   ArrayResize(gda_124, gi_136);
   gd_176 = 0;
   for (gi_128 = 0; gi_128 < gi_136 - 1; gi_128++) {
      if (gi_128 <= gi_132 - 1) gd_160 = 1.0 * gi_128 / (gi_132 - 1);
      else gd_160 = (gi_128 - gi_132 + 1) * (2.0 * gi_140 - 1.0) / (gi_140 * gi_80 - 1.0) + 1.0;
      gd_152 = MathCos(gd_192 * gd_160);
      gd_184 = 1.0 / (gd_144 * gd_160 + 1.0);
      if (gd_160 <= 0.5) gd_184 = 1;
      gda_124[gi_128] = gd_184 * gd_152;
      gd_176 += gda_124[gi_128];
   }
   return (0);
}

int start() {
   int li_0;
   double ld_4;
   int li_12 = IndicatorCounted();
   if (li_12 > 0) li_0 = Bars - li_12;
   if (li_12 < 0) return (0);
   if (li_12 == 0) li_0 = Bars - gi_136 - 1;
   if (li_12 < 1) {
      for (int li_16 = 1; li_16 < gi_80 * gi_140 + gi_80; li_16++) {
         gda_108[Bars - li_16] = 0;
         gda_112[Bars - li_16] = 0;
         gda_116[Bars - li_16] = 0;
      }
   }
   for (int li_20 = li_0; li_20 >= 0; li_20--) {
      gd_168 = 0;
      for (li_16 = 0; li_16 <= gi_136 - 1; li_16++) {
         if (gi_76 == 0) ld_4 = Close[li_20 + li_16];
         else {
            if (gi_76 == 1) ld_4 = Open[li_20 + li_16];
            else {
               if (gi_76 == 2) ld_4 = High[li_20 + li_16];
               else {
                  if (gi_76 == 3) ld_4 = Low[li_20 + li_16];
                  else {
                     if (gi_76 == 4) ld_4 = (High[li_20 + li_16] + (Low[li_20 + li_16])) / 2.0;
                     else {
                        if (gi_76 == 5) ld_4 = (High[li_20 + li_16] + (Low[li_20 + li_16]) + (Close[li_20 + li_16])) / 3.0;
                        else
                           if (gi_76 == 6) ld_4 = (High[li_20 + li_16] + (Low[li_20 + li_16]) + 2.0 * (Close[li_20 + li_16])) / 4.0;
                     }
                  }
               }
            }
         }
         gd_168 += gda_124[li_16] * ld_4;
      }
      if (gd_176 > 0.0) gda_108[li_20] = (gd_100 / 100.0 + 1.0) * gd_168 / gd_176;
      if (gi_88 > 0)
         if (MathAbs(gda_108[li_20] - (gda_108[li_20 + 1])) < gi_88 * Point) gda_108[li_20] = gda_108[li_20 + 1];
      if (gi_92 > 0) {
         gda_120[li_20] = gda_120[li_20 + 1];
         if (gda_108[li_20] - (gda_108[li_20 + 1]) > gi_88 * Point) gda_120[li_20] = 1;
         if (gda_108[li_20 + 1] - gda_108[li_20] > gi_88 * Point) gda_120[li_20] = -1;
         if (gda_120[li_20] > 0.0) {
            gda_112[li_20] = gda_108[li_20];
            if (gda_120[li_20 + gi_96] < 0.0) gda_112[li_20 + gi_96] = gda_108[li_20 + gi_96];
            gda_116[li_20] = EMPTY_VALUE;
         }
         if (gda_120[li_20] < 0.0) {
            gda_116[li_20] = gda_108[li_20];
            if (gda_120[li_20 + gi_96] > 0.0) gda_116[li_20 + gi_96] = gda_108[li_20 + gi_96];
            gda_112[li_20] = EMPTY_VALUE;
         }
      }
   }
   return (0);
}
