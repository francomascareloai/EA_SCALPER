//@version=4
study("S F I CHARLIE ", shorttitle="SFI CHARLIE ", overlay=true)

// User Inputs
Periods = input(10, title="ATR Period", minval=1)  // ATR Period
src = input(ohlc4, title="Source", type=input.source)  // Source (OHLC4, Close, Open, High, Low, etc.)
Multiplier = input(1.7, title="ATR Multiplier")  // ATR Multiplier
changeATR = input(true, title="Use True ATR?", type=input.bool)  // Toggle between ATR and SMA
showsignals = input(true, title="Show Buy/Sell Signals", type=input.bool)  // Show Signals
highlighting = input(true, title="Enable Trend Highlighting", type=input.bool)  // Highlighting Candles

// ATR Calculation
atr2 = sma(tr, Periods)
atr = changeATR ? atr(Periods) : atr2

// Trend Calculation
up = src - (Multiplier * atr)
up1 = nz(up[1], up)
up := close[1] > up1 ? max(up, up1) : up
dn = src + (Multiplier * atr)
dn1 = nz(dn[1], dn)
dn := close[1] < dn1 ? min(dn, dn1) : dn
trend = 1
trend := nz(trend[1], trend)
trend := trend == -1 and close > dn1 ? 1 : trend == 1 and close < up1 ? -1 : trend

// Plotting Up/Down Trend Lines
upPlot = plot(trend == 1 ? up : na, title="Up Trend", style=plot.style_linebr, linewidth=1, color=color.rgb(4, 255, 12))
dnPlot = plot(trend == 1 ? na : dn, title="Down Trend", style=plot.style_linebr, linewidth=1, color=#ffff00)

// Buy/Sell Signals
buySignal = trend == 1 and trend[1] == -1
sellSignal = trend == -1 and trend[1] == 1

plotshape(buySignal and showsignals ? up : na, title="Buy", text="Buy", style=shape.labelup, location=location.belowbar, size=size.auto, color=#2d03adf8, textcolor=color.rgb(255, 255, 255), transp=0)
plotshape(sellSignal and showsignals ? dn : na, title="Sell", text="Sell", location=location.abovebar, style=shape.labeldown, size=size.auto, color=#ffbf00, textcolor=color.black, transp=0)

// Candle Coloring
var color barColor = na
if buySignal
    barColor := #1e10e4
else if sellSignal
    barColor := #eaf732
else
    barColor := trend == 1 ? #4810e4 : trend == -1 ? #e6ed21 : na
barcolor(barColor)

// Alerts
alertcondition(buySignal, title="SFI Magic Indicator Buy", message="SFI Magic Indicator Buy!")
alertcondition(sellSignal, title="SFI Magic Indicator Sell", message="SFI Magic Indicator Sell!")
changeCond = trend != trend[1]
alertcondition(changeCond, title="SFI Magic Indicator Direction Change", message="SFI Magic Indicator has changed direction!")

// ATR Calculation for Profit Targets
atr_length = 14
atr_value = atr(atr_length)
atr_multiplier_1 = 1
atr_multiplier_2 = 4.5
atr_multiplier_3 = 7
atr_multiplier_4 = 9
atr_multiplier_5 = 11

// Variables to track profit labels
var float buy_entry_price = na
var float sell_entry_price = na
var bool buy_label_plotted_1 = false
var bool buy_label_plotted_2 = false
var bool buy_label_plotted_3 = false
var bool buy_label_plotted_4 = false
var bool buy_label_plotted_5 = false
var bool sell_label_plotted_1 = false
var bool sell_label_plotted_2 = false
var bool sell_label_plotted_3 = false
var bool sell_label_plotted_4 = false
var bool sell_label_plotted_5 = false

// Update entry prices
if buySignal
    buy_entry_price := close
    buy_label_plotted_1 := false
    buy_label_plotted_2 := false
    buy_label_plotted_3 := false
    buy_label_plotted_4 := false
    buy_label_plotted_5 := false

if sellSignal
    sell_entry_price := close
    sell_label_plotted_1 := false
    sell_label_plotted_2 := false
    sell_label_plotted_3 := false
    sell_label_plotted_4 := false
    sell_label_plotted_5 := false

// Book profit labels based on ATR
if not na(buy_entry_price)
    // Book 1
    if not buy_label_plotted_1
        buy_profit_target_1 = buy_entry_price + (atr_multiplier_1 * atr_value)
        if close >= buy_profit_target_1
            label.new(bar_index, high, "Book1", color=color.rgb(16, 228, 24), size = size.tiny, style=label.style_label_down, yloc=yloc.abovebar, textcolor=color.white) 
            buy_label_plotted_1 := true



if not na(sell_entry_price)
    // Book 1
    if not sell_label_plotted_1
        sell_profit_target_1 = sell_entry_price - (atr_multiplier_1 * atr_value)
        if close <= sell_profit_target_1
            label.new(bar_index, low, "Book1", color=color.rgb(255, 0, 0), size = size.tiny, style=label.style_label_up, yloc=yloc.belowbar, textcolor=color.white) 
            sell_label_plotted_1 := true

 

/// == TREND CALCULATIONS ==

// Define the high and low levels for different timeframes
hL_01 = security(syminfo.tickerid, "1", high)  // 1-minute timeframe
lL_01 = security(syminfo.tickerid, "1", low)

hL_02 = security(syminfo.tickerid, "5", high)  // 5-minute timeframe
lL_02 = security(syminfo.tickerid, "5", low)

hL_03 = security(syminfo.tickerid, "15", high)  // 15-minute timeframe
lL_03 = security(syminfo.tickerid, "15", low)

hL_04 = security(syminfo.tickerid, "60", high)  // 1-hour timeframe
lL_04 = security(syminfo.tickerid, "60", low)

hL_05 = security(syminfo.tickerid, "240", high)  // 4-hour timeframe
lL_05 = security(syminfo.tickerid, "240", low)

hL_06 = security(syminfo.tickerid, "D", high)  // Daily timeframe
lL_06 = security(syminfo.tickerid, "D", low)

// Trend calculation function
f_signal(highLevel, lowLevel) =>
    uptrendSignal = high > highLevel
    downtrendSignal = low < lowLevel
    inUptrend = bool(na)
    inDowntrend = bool(na)
    inUptrend := uptrendSignal[1] ? true : downtrendSignal[1] ? false : inUptrend[1]
    inDowntrend := not inUptrend
    [uptrendSignal, downtrendSignal, inUptrend, inDowntrend]

[uptrendSignal1, downtrendSignal1, inUptrend1, inDowntrend1] = f_signal(hL_01, lL_01)  // 1st Timeframe (1-minute)
[uptrendSignal2, downtrendSignal2, inUptrend2, inDowntrend2] = f_signal(hL_02, lL_02)  // 2nd Timeframe (5-minute)
[uptrendSignal3, downtrendSignal3, inUptrend3, inDowntrend3] = f_signal(hL_03, lL_03)  // 3rd Timeframe (15-minute)
[uptrendSignal4, downtrendSignal4, inUptrend4, inDowntrend4] = f_signal(hL_04, lL_04)  // 4th Timeframe (1-hour)
[uptrendSignal5, downtrendSignal5, inUptrend5, inDowntrend5] = f_signal(hL_05, lL_05)  // 5th Timeframe (4-hour)
[uptrendSignal6, downtrendSignal6, inUptrend6, inDowntrend6] = f_signal(hL_06, lL_06)  // 6th Timeframe (Daily)

// == TREND TABLE PLOTTING ==

// Define position of the table (Top or Bottom)
tableLocation = 'Bottom'  // Set this to 'Top' or 'Bottom' as per your preference

tablePos = tableLocation == 'Bottom' ? position.bottom_right : position.top_right
var table trendTable = table.new(tablePos, 6, 1, border_width=3)
upColor = color.rgb(38, 166, 154)
downColor = color.rgb(240, 83, 80)
tfColor = color.new(#999999, 0)

f_fillCell(_column, _row, _cellText, _c_color) =>
    table.cell(trendTable, _column, _row, _cellText, bgcolor=color.new(_c_color, 70), text_color=_c_color, width=6)
    
// Define glyphs
glyph1 = inUptrend1 ? '▲ ' : '▼ ' 
glyph2 = inUptrend2 ? '▲ ' : '▼ ' 
glyph3 = inUptrend3 ? '▲ ' : '▼ ' 
glyph4 = inUptrend4 ? '▲ ' : '▼ ' 
glyph5 = inUptrend5 ? '▲ ' : '▼ ' 
glyph6 = inUptrend6 ? '▲ ' : '▼ ' 

if barstate.islast
    f_fillCell(0, 0, glyph1 + "1m", inUptrend1 ? upColor : downColor)
    f_fillCell(1, 0, glyph2 + "5m", inUptrend2 ? upColor : downColor)
    f_fillCell(2, 0, glyph3 + "15m", inUptrend3 ? upColor : downColor)
    f_fillCell(3, 0, glyph4 + "1H", inUptrend4 ? upColor : downColor)
    f_fillCell(4, 0, glyph5 + "4H", inUptrend5 ? upColor : downColor)
    f_fillCell(5, 0, glyph6 + "1D", inUptrend6 ? upColor : downColor)
// ==========================================================================================

// === Dashboard with Telegram Link ===
var table myTable = table.new(position.top_center, 1, 1, border_width=1, frame_color=color.black, bgcolor=color.white)

// Add Telegram Message to Dashboard
table.cell(myTable, 0, 0, "Join Telegram @free_fx_pro", bgcolor=color.blue, text_color=color.white, text_size=size.normal)
