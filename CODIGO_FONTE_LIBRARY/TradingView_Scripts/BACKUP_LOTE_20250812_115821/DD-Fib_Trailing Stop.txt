//@version=5

// Благодарность приветствуется !
// Donations  ~ BTC ~ 1EpDN7pg1WqURcK7te5kQtgx3H17wuHiV7
// Do it if you find the stuff useful !

indicator('!<*[Динамичный Двойной Фибо-Трейлинг Стоп]*>!', '*DD-Fib_Trailing Stop*', overlay=true)
// inputs for first configuration //
timeframe1 = input.timeframe('', 'Timeframe1')
trailType = input.string('modified', 'Trailtype', options=['modified', 'unmodified'])
ATRPeriod = input(4, 'ATR Period')
ATRFactor = input(10, 'ATR Factor')
show_fib_entries = input(true, 'Show Fib Entries?')

norm_o = request.security(ticker.new(syminfo.prefix, syminfo.ticker), timeframe1, open)
norm_h = request.security(ticker.new(syminfo.prefix, syminfo.ticker), timeframe1, high)
norm_l = request.security(ticker.new(syminfo.prefix, syminfo.ticker), timeframe1, low)
norm_c = request.security(ticker.new(syminfo.prefix, syminfo.ticker), timeframe1, close)

//////// FUNCTIONS //////////////
// Wilders ma //
Wild_ma(_src, _malength) =>
    _wild = 0.0
    _wild := nz(_wild[1]) + (_src - nz(_wild[1])) / _malength
    _wild

/////////// TRUE RANGE CALCULATIONS /////////////////
HiLo = math.min(norm_h - norm_l, 1.5 * nz(ta.sma(norm_h - norm_l, ATRPeriod)))

HRef = norm_l <= norm_h[1] ? norm_h - norm_c[1] : norm_h - norm_c[1] - 0.5 * (norm_l - norm_h[1])

LRef = norm_h >= norm_l[1] ? norm_c[1] - norm_l : norm_c[1] - norm_l - 0.5 * (norm_l[1] - norm_h)

trueRange = trailType == 'modified' ? math.max(HiLo, HRef, LRef) : math.max(norm_h - norm_l, math.abs(norm_h - norm_c[1]), math.abs(norm_l - norm_c[1]))

/////////// TRADE LOGIC ////////////////////////
loss = ATRFactor * Wild_ma(trueRange, ATRPeriod)

Up = norm_c - loss
Dn = norm_c + loss

TrendUp = Up
TrendDown = Dn
Trend = 1

TrendUp := norm_c[1] > TrendUp[1] ? math.max(Up, TrendUp[1]) : Up
TrendDown := norm_c[1] < TrendDown[1] ? math.min(Dn, TrendDown[1]) : Dn

Trend := norm_c > TrendDown[1] ? 1 : norm_c < TrendUp[1] ? -1 : nz(Trend[1], 1)
trail = Trend == 1 ? TrendUp : TrendDown

ex = 0.0
crossUnderCondition = ta.crossunder(Trend, 0)

ex := ta.crossover(Trend, 0) ? norm_h : crossUnderCondition ? norm_l : Trend == 1 ? math.max(ex[1], norm_h) : Trend == -1 ? math.min(ex[1], norm_l) : ex[1]

// //////// PLOT TP and SL /////////////
plot(trail, 'Trailingstop', style=plot.style_line, color=Trend == 1 ? #4caf50 : Trend == -1 ? #ff5252 : na)
plot(ex, 'Extremum', style=plot.style_circles, color=Trend == 1 ? #00e676 : Trend == -1 ? #e040fb : na)

////// FIBONACCI LEVELS ///////////
state = Trend == 1 ? 'long' : 'short'

fib1Level = 61.8
fib2Level = 78.6
fib3Level = 88.6

f1 = ex + (trail - ex) * fib1Level / 100
f2 = ex + (trail - ex) * fib2Level / 100
f3 = ex + (trail - ex) * fib3Level / 100
l100 = trail + 0

Fib1 = plot(f1, 'Fib 1', style=plot.style_line, color=#363a45)
Fib2 = plot(f2, 'Fib 2', style=plot.style_line, color=#363a45)
Fib3 = plot(f3, 'Fib 3', style=plot.style_line, color=#363a45)
L100 = plot(l100, 'l100', style=plot.style_line, color=#363a45)

fill(Fib1, Fib2, color=state == 'long' ? color.new(color.green, 90) : state == 'short' ? #ff52521a : na)
fill(Fib2, Fib3, color=state == 'long' ? color.new(color.green, 70) : state == 'short' ? #ff52524d : na)
fill(Fib3, L100, color=state == 'long' ? color.new(color.green, 60) : state == 'short' ? #ff525266 : na)

l1 = state[1] == 'long' and ta.crossunder(norm_c, f1[1])
l2 = state[1] == 'long' and ta.crossunder(norm_c, f2[1])
l3 = state[1] == 'long' and ta.crossunder(norm_c, f3[1])
s1 = state[1] == 'short' and ta.crossover(norm_c, f1[1])
s2 = state[1] == 'short' and ta.crossover(norm_c, f2[1])
s3 = state[1] == 'short' and ta.crossover(norm_c, f3[1])

atr = ta.sma(trueRange, 14)

/////////// FIB PLOTS /////////////////.
plotshape(show_fib_entries and l1 ? low - atr : na, 'LS1', style=shape.triangleup, location=location.belowbar, color=#ffeb3b, size=size.tiny)
plotshape(show_fib_entries and l2 ? low - 1.5 * atr : na, 'LS2', style=shape.triangleup, location=location.belowbar, color=#ffeb3b, size=size.tiny)
plotshape(show_fib_entries and l3 ? low - 2 * atr : na, 'LS3', style=shape.triangleup, location=location.belowbar, color=#ffeb3b, size=size.tiny)
plotshape(show_fib_entries and s1 ? high + atr : na, 'SS1', style=shape.triangledown, location=location.abovebar, color=#9c27b0, size=size.tiny)
plotshape(show_fib_entries and s2 ? high + 1.5 * atr : na, 'SS2', style=shape.triangledown, location=location.abovebar, color=#9c27b0, size=size.tiny)
plotshape(show_fib_entries and s3 ? high + 2 * atr : na, 'SS3', style=shape.triangledown, location=location.abovebar, color=#9c27b0, size=size.tiny)

//=====================================================================================================================================================//

// inputs for second configuration //
timeframe2 = input.timeframe('', 'Timeframe2')
trailType2 = input.string('modified', 'Trailtype2', options=['modified', 'unmodified'])
ATRPeriod2 = input(28, 'ATR Period2')
ATRFactor2 = input(4, 'ATR Factor2')
show_fib_entries2 = input(false, 'Show Fib Entries2?')

norm_o2 = request.security(ticker.new(syminfo.prefix, syminfo.ticker), timeframe2, open)
norm_h2 = request.security(ticker.new(syminfo.prefix, syminfo.ticker), timeframe2, high)
norm_l2 = request.security(ticker.new(syminfo.prefix, syminfo.ticker), timeframe2, low)
norm_c2 = request.security(ticker.new(syminfo.prefix, syminfo.ticker), timeframe2, close)

/////////// TRUE RANGE CALCULATIONS FOR SECOND CONFIGURATION /////////////////
HiLo2 = math.min(norm_h2 - norm_l2, 1.5 * nz(ta.sma(norm_h2 - norm_l2, ATRPeriod2)))

HRef2 = norm_l2 <= norm_h2[1] ? norm_h2 - norm_c2[1] : norm_h2 - norm_c2[1] - 0.5 * (norm_l2 - norm_h2[1])

LRef2 = norm_h2 >= norm_l2[1] ? norm_c2[1] - norm_l2 : norm_c2[1] - norm_l2 - 0.5 * (norm_l2[1] - norm_h2)

trueRange2 = trailType2 == 'modified' ? math.max(HiLo2, HRef2, LRef2) : math.max(norm_h2 - norm_l2, math.abs(norm_h2 - norm_c2[1]), math.abs(norm_l2 - norm_c2[1]))

/////////// TRADE LOGIC FOR SECOND CONFIGURATION ////////////////////////
loss2 = ATRFactor2 * Wild_ma(trueRange2, ATRPeriod2)

Up2 = norm_c2 - loss2
Dn2 = norm_c2 + loss2

TrendUp2 = Up2
TrendDown2 = Dn2
Trend2 = 1

TrendUp2 := norm_c2[1] > TrendUp2[1] ? math.max(Up2, TrendUp2[1]) : Up2
TrendDown2 := norm_c2[1] < TrendDown2[1] ? math.min(Dn2, TrendDown2[1]) : Dn2

Trend2 := norm_c2 > TrendDown2[1] ? 1 : norm_c2 < TrendUp2[1] ? -1 : nz(Trend2[1], 1)
trail2 = Trend2 == 1 ? TrendUp2 : TrendDown2

ex2 = 0.0
crossUnderCondition2 = ta.crossunder(Trend2, 0)

ex2 := ta.crossover(Trend2, 0) ? norm_h2 : crossUnderCondition2 ? norm_l2 : Trend2 == 1 ? math.max(ex2[1], norm_h2) : Trend2 == -1 ? math.min(ex2[1], norm_l2) : ex2[1]

// //////// PLOT TP and SL FOR SECOND CONFIGURATION /////////////
plot(trail2, 'Trailingstop2', style=plot.style_line, color=Trend2 == 1 ? #4caf50 : Trend2 == -1 ? #ff5252 : na)
plot(ex2, 'Extremum2', style=plot.style_circles, color=Trend2 == 1 ? #00e676 : Trend2 == -1 ? #e040fb : na)

////// FIBONACCI LEVELS FOR SECOND CONFIGURATION ///////////
state2 = Trend2 == 1 ? 'long' : 'short'

fib1Level2 = 61.8
fib2Level2 = 78.6
fib3Level2 = 88.6

f12 = ex2 + (trail2 - ex2) * fib1Level2 / 100
f22 = ex2 + (trail2 - ex2) * fib2Level2 / 100
f32 = ex2 + (trail2 - ex2) * fib3Level2 / 100
l1002 = trail2 + 0

Fib12 = plot(f12, 'Fib 12', style=plot.style_line, color=#363a45)
Fib22 = plot(f22, 'Fib 22', style=plot.style_line, color=#363a45)
Fib32 = plot(f32, 'Fib 32', style=plot.style_line, color=#363a45)
L1002 = plot(l1002, 'l1002', style=plot.style_line, color=#363a45)

fill(Fib12, Fib22, color=state2 == 'long' ? color.new(color.green, 90) : state2 == 'short' ? #ff52521a : na)
fill(Fib22, Fib32, color=state2 == 'long' ? color.new(color.green, 70) : state2 == 'short' ? #ff52524d : na)
fill(Fib32, L1002, color=state2 == 'long' ? color.new(color.green, 60) : state2 == 'short' ? #ff525266 : na)

l12 = state2[1] == 'long' and ta.crossunder(norm_c2, f12[1])
l22 = state2[1] == 'long' and ta.crossunder(norm_c2, f22[1])
l32 = state2[1] == 'long' and ta.crossunder(norm_c2, f32[1])
s12 = state2[1] == 'short' and ta.crossover(norm_c2, f12[1])
s22 = state2[1] == 'short' and ta.crossover(norm_c2, f22[1])
s32 = state2[1] == 'short' and ta.crossover(norm_c2, f32[1])

atr2 = ta.sma(trueRange2, 14)

/////////// FIB PLOTS FOR SECOND CONFIGURATION /////////////////.
plotshape(show_fib_entries2 and l12 ? low - atr2 : na, 'LS12', style=shape.triangleup, location=location.belowbar, color=#ffeb3b, size=size.tiny)
plotshape(show_fib_entries2 and l22 ? low - 1.5 * atr2 : na, 'LS22', style=shape.triangleup, location=location.belowbar, color=#ffeb3b, size=size.tiny)
plotshape(show_fib_entries2 and l32 ? low - 2 * atr2 : na, 'LS32', style=shape.triangleup, location=location.belowbar, color=#ffeb3b, size=size.tiny)
plotshape(show_fib_entries2 and s12 ? high + atr2 : na, 'SS12', style=shape.triangledown, location=location.abovebar, color=#9c27b0, size=size.tiny)
plotshape(show_fib_entries2 and s22 ? high + 1.5 * atr2 : na, 'SS22', style=shape.triangledown, location=location.abovebar, color=#9c27b0, size=size.tiny)
plotshape(show_fib_entries2 and s32 ? high + 2 * atr2 : na, 'SS32', style=shape.triangledown, location=location.abovebar, color=#9c27b0, size=size.tiny)

//////////// FIB ALERTS FOR SECOND CONFIGURATION /////////////////////
alertcondition(l12, title='cross over Fib12', message='Price crossed below Fib1 level in long trend')
alertcondition(l22, title='cross over Fib22', message='Price crossed below Fib2 level in long trend')
alertcondition(l32, title='cross over Fib32', message='Price crossed below Fib3 level in long trend')
alertcondition(s12, title='cross under Fib12', message='Price crossed above Fib1 level in short trend')
alertcondition(s22, title='cross under Fib22', message='Price crossed above Fib2 level in short trend')
alertcondition(s32, title='cross under Fib32', message='Price crossed above Fib3 level in short trend')

alertcondition(fixnan(f12) != fixnan(f12[1]), title='Stop Line Change2', message='Stop Line Change')

//======================================================================================================================================================//

// Define User Inputs
simple bool       showAtr                 =        input.bool(true, "Plot Dema?", group='EMA & ATR', inline="Show EMA's & ATR")
simple bool       haCandles               =        input.bool(false, "Use HA Candles?")
simple int        periodDema              =        input.int(4, "Dema Period", group = "Dema Atr")
series float      sourceDema              =        input.source(close, "Calculation Source", group = "Dema Atr")
simple int        periodAtr               =        input.int(36, "Period", group = "Dema Atr")
simple float      factorAtr               =        input.float(1.7, "Factor", step = 0.01, group = "Dema Atr")

simple color      longColour              =       #00ff00
simple color      shortColour             =       #ff0000
// Use HA Candles?
heikinashi_close = request.security(
 symbol = ticker.heikinashi(syminfo.tickerid),
 timeframe =  timeframe.period,
 expression = close, 
 gaps = barmerge.gaps_off, 
 lookahead = barmerge.lookahead_off
 )

var series float source = close
if haCandles == true
    source := heikinashi_close
if haCandles == false
    source := sourceDema 
// Function
DemaAtrWithBands(periodDema, source, lookback, atrFactor)=>
    ema1   = ta.ema(source,  periodDema)
    ema2   = ta.ema(ema1, periodDema)
    demaOut = 2 * ema1 - ema2

    atrValue = ta.atr(lookback)
    trueRangeValue = atrValue * atrFactor 

    DemaAtr = demaOut 
    DemaAtr := nz(DemaAtr[1], DemaAtr)

    trueRangeUpper = demaOut + trueRangeValue
    trueRangeLower  = demaOut - trueRangeValue 

    if trueRangeLower > DemaAtr 
        DemaAtr := trueRangeLower
    if trueRangeUpper < DemaAtr 
        DemaAtr := trueRangeUpper
    DemaAtr 

// Function Out
DemaAtr = DemaAtrWithBands(periodDema, source, periodAtr, factorAtr)
// Conditions
DemaAtrLong = DemaAtr > DemaAtr[1] 
DemaAtrShort = DemaAtr < DemaAtr[1]
// Colour Condtions
var color Trend3 = #ffffff
if DemaAtrLong
    Trend3 := longColour
if DemaAtrShort
    Trend3 := shortColour

// Plotting
plot(showAtr ? DemaAtr : na, "ATR", color=Trend3, linewidth=2)
// Alerts
alertcondition(DemaAtrLong, title="Dema ATR Trend Up", message="Dema ATR Trend Up - {{ticker}} - {{interval}}")
alertcondition(DemaAtrShort, title="Dema ATR Trend Down", message="Dema ATR Trend Down - {{ticker}} - {{interval}}")

//====================================================================================================================//