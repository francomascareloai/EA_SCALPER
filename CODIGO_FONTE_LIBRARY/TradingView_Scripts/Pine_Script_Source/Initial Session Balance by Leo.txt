// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © leandrolopezf1920

//@version=5

indicator('Initial Session Balance by Leo', overlay=true, max_boxes_count=100, max_lines_count=100,max_labels_count = 500)

// Función que establece las sesiones automáticamente
//@function
// @param session_type_input: input string con posibles valores: ['Custom', 'FX-Tokyo', 'FX-London', 'FX-New York', 'Overnight Session (ON)', 'Day Session (RTH)']
// @param custom_session_times_input: input session personalizado que se usará si 'Custom' es seleccionado
// @param syminfo_XXX: pasamos syminfo.XXX para el símbolo del gráfico
// @returns [session times for chart symbol, session timezone for chart symbol (only useful for Forex sessions)]

SetSessionTimes(simple string session_type_input, simple string custom_session_times_input, simple string syminfo_type = syminfo.type, simple string syminfo_root = syminfo.root, simple string syminfo_timezone = syminfo.timezone)=>
    ret_times = if session_type_input == 'Custom'
        custom_session_times_input
    else if syminfo_type == 'stock'
        ''
    else if session_type_input == 'FX-Tokyo'
        '0900-1800'
    else if session_type_input == 'FX-London'
        '0800-1600'
    else if session_type_input == 'FX-New York'
        '0830-1600'
    else if syminfo_type == 'futures'
        if syminfo_root == 'FESX' or syminfo_root == 'FDXM' or syminfo_root == 'FDAX' or syminfo_root == 'FDXS' or syminfo_root == 'FSXE'
            if session_type_input == 'Overnight Session (ON)'
                '1730-0900'
            else
                '0900-1730'
        else if syminfo_root == 'FGBL'
            if session_type_input == 'Overnight Session (ON)'
                '1715-0900'
            else
                '0900-1715'
        else if syminfo_root == 'ES' or syminfo_root == 'NQ' or syminfo_root == 'YM' or syminfo_root == 'RTY' or syminfo_root == 'MES' or syminfo_root == 'MNQ' or syminfo_root == 'MRTY'
            if session_type_input == 'Overnight Session (ON)'
                '1500-0830'
            else
                '0830-1500'
        else if syminfo_root == 'CL' or syminfo_root == 'MCL' or syminfo_root == 'RB' or syminfo_root == 'NG' or syminfo_root == 'YF'
            if session_type_input == 'Overnight Session (ON)'
                '1430-0900'
            else
                '0900-1430'
        else if syminfo_root == 'GC' or syminfo_root == 'MGC'
            if session_type_input == 'Overnight Session (ON)'
                '1330-0820'
            else
                '0820-1330'
        else if syminfo_root == 'SI'
            if session_type_input == 'Overnight Session (ON)'
                '1325-0825'
            else
                '0825-1325'
        else if syminfo_root == 'PL'
            if session_type_input == 'Overnight Session (ON)'
                '1305-0820'
            else
                '0820-1305'
        else if syminfo_root == 'HG'
            if session_type_input == 'Overnight Session (ON)'
                '1300-0810'
            else
                '0810-1300'
        else if syminfo_root == 'ZN' or syminfo_root == 'ZB' or syminfo_root == 'TN' or syminfo_root == 'UB'
            if session_type_input == 'Overnight Session (ON)'
                '1400-0720'
            else
                '0720-1400'
        else if syminfo_root == '6B' or syminfo_root == '6C' or syminfo_root == '6E' or syminfo_root == '6J'
            if session_type_input == 'Overnight Session (ON)'
                '1400-0720'
            else
                '0720-1400'
        else if syminfo_root == '6A'
            if session_type_input == 'Overnight Session (ON)'
                '1400-0700'
            else
                '0700-1400'
        else if syminfo_root == 'ZC' or syminfo_root == 'ZW' or syminfo_root == 'ZS' or syminfo_root == 'ZL' or syminfo_root == 'ZM'
            if session_type_input == 'Overnight Session (ON)'
                '1320-0830'
            else
                '0830-1320'
        else if syminfo_root == 'LE' or syminfo_root == 'HE'
            if session_type_input == 'Overnight Session (ON)'
                '1300-0830'
            else
                '0830-1300'
        else
            custom_session_times_input
    else
        custom_session_times_input
        
    ret_tz = session_type_input == 'FX-Tokyo' ? 'Asia/Tokyo' :
      session_type_input == 'FX-London' ? 'Europe/London' :
      session_type_input == 'FX-New York' ? 'America/New_York' :
      syminfo_timezone
    
    [ret_times, ret_tz]


//parameters
ib_duration = input.string(defval='30 MINS', options=['1 MIN', '5 MINS', '10 MINS', '30 MINS', '1 HOUR'], title='Initial Balance Duration', group='SESSION & INITIAL BALANCE')
session_type = input.string(defval='Day Session (RTH)', options=['Day Session (RTH)', 'Overnight Session (ON)', 'FX-Tokyo', 'FX-London', 'FX-New York', 'Custom'],
  title='Select Session Type (no need for stocks)', group='SESSION & INITIAL BALANCE',
  tooltip = '-For futures, select RTH or ETH and the script will auto load the corresponding session times for your contract\n-For Forex, select Tokyo, London or NY\n-Stocks will auto-set regardless of the selection here\n-Select Custom to override auto selection with the session times you select in the next parameter box.')
custom_session_times_inp = input.session(defval="0830-1500", title = 'Custom Session', group='SESSION & INITIAL BALANCE')

showIBlines = input.bool(title='Initial Balance Lines', defval=true, inline='ib', group='LINES, WIDTHS AND COLORS')
colorIBlines = input.color(title='', defval=#363a4580, inline='ib', group='LINES, WIDTHS AND COLORS')
widthIBlines = input.int(title='', defval=2, inline='ib', group='LINES, WIDTHS AND COLORS')
showIBbox = input.bool(title='Initial Balance Fill', defval=false, inline='ibbox', group='LINES, WIDTHS AND COLORS')
colorIBbox = input.color(title='', defval=color.new(color.blue, 93), inline='ibbox', group='LINES, WIDTHS AND COLORS')
showOpenRange = input.bool(title='Highlight Open Range (1st bar)', defval=true, inline='ibbox', group='LINES, WIDTHS AND COLORS')
colorOR = input.color(title='', defval=color.new(color.blue, 90), inline='ibbox', group='LINES, WIDTHS AND COLORS')
extendIBON = input.bool(title='Extend Initial Balance and Open Range Fills during Overnight session', defval=true, inline='ibboxON', group='LINES, WIDTHS AND COLORS')
colorIBON = input.color(title='', defval=color.new(color.gray, 96), inline='ibboxON', group='LINES, WIDTHS AND COLORS')

showMidLine = input.bool(title='Middle Initial Balance Line', defval=true, inline='ibmid', group='LINES, WIDTHS AND COLORS')
colorMidLine = input.color(title='', defval=#363a4580, inline='ibmid', group='LINES, WIDTHS AND COLORS')
widthMidLine = input.int(title='', defval=1, inline='ibmid', group='LINES, WIDTHS AND COLORS')

show50extLines = input.bool(title='50% IB-range extension lines', defval=false, inline='50ext', group='LINES, WIDTHS AND COLORS')
color50extLine = input.color(title='', defval=color.black, inline='50ext', group='LINES, WIDTHS AND COLORS')
width50extLines = input.int(title='', defval=1, inline='50ext', group='LINES, WIDTHS AND COLORS')

show100extLines = input.bool(title='100% IB-range extension lines', defval=true, inline='100ext', group='LINES, WIDTHS AND COLORS')
color100extLine = input.color(title='', defval=#363a4580, inline='100ext', group='LINES, WIDTHS AND COLORS')
width100extLines = input.int(title='', defval=1, inline='100ext', group='LINES, WIDTHS AND COLORS')

show200extLines = input.bool(title='200% IB-range extension lines', defval=true, inline='200ext', group='LINES, WIDTHS AND COLORS')
color200extLine = input.color(title='', defval=#363a4580, inline='200ext', group='LINES, WIDTHS AND COLORS')
width200extLines = input.int(title='', defval=1, inline='200ext', group='LINES, WIDTHS AND COLORS')

showLabels = input.bool(true, title='Show Labels', inline='labels', group='MORE SETTINGS')
label_size = input.string('small', options=['auto', 'tiny', 'small', 'normal', 'large', 'huge'], title='- size', inline='labels', group='MORE SETTINGS')
showOnlyLastLabels = input.bool(false, title='Only today\'s labels', inline='labels', group='MORE SETTINGS')
display_value = input.bool(true, title='Show Price Values in Labels', group='MORE SETTINGS')
nbarsforward = input.int(title='Offset labels N bars to the right', defval=20, group='MORE SETTINGS')
ndays = input.int(title='Show extensions & labels only for N days', defval=5, group='MORE SETTINGS')

// Rounding levels to min tick
nround(x) =>
    n = math.round(x / syminfo.mintick) * syminfo.mintick
    n
    
//variable definition
float ib_hi = na
float ib_lo = na
float or_hi = na
float or_lo = na
float range_1 = na
var startLastIB = time
var ib_duration_ms = ib_duration == '1 MIN' ? 60000 :
  ib_duration == '5 MINS' ? 300000 :
  ib_duration == '10 MINS' ? 600000 :
  ib_duration == '30 MINS' ? 1800000 :
  3600000

var label_prefix = session_type == 'Day Session (RTH)' ? 'TP' : 
   session_type == 'Overnight Session (ON)' ? 'on' :
   session_type == 'FX-Tokyo' ? 'jp' :
   session_type == 'FX-London' ? 'uk' :
   session_type == 'FX-New York' ? 'us' :
   ''
var line ib_hi_line = na
var line ib_lo_line = na
var line ib_hi_line_ON = na
var line ib_lo_line_ON = na
var line ib_mid_line_ON = na
var line ib_mid_line = na
var line ib_hi_50_line = na
var line ib_hi_100_line = na
var line ib_hi_200_line = na
var line ib_lo_50_line = na
var line ib_lo_100_line = na
var line ib_lo_200_line = na
var box ib_box = na
var box or_box = na
var box ib_box_ON = na
var box or_box_ON = na
var label label_ibhi = na
var label label_iblo = na
var label label_ibmid = na
var label label_ibhiext100 = na
var label label_ibloext100 = na
var label label_ibhiext200 = na
var label label_ibloext200 = na
var hiline_ids = array.new_line(ndays)
var loline_ids = array.new_line(ndays)
var ibbox_ids = array.new_box(ndays)
var orbox_ids = array.new_box(ndays)
var ibboxON_ids = array.new_box(ndays)
var orboxON_ids = array.new_box(ndays)
var midline_ids = array.new_line(ndays)
var ext50hiline_ids = array.new_line(ndays)
var ext100hiline_ids = array.new_line(ndays)
var ext200hiline_ids = array.new_line(ndays)
var ext50loline_ids = array.new_line(ndays)
var ext100loline_ids = array.new_line(ndays)
var ext200loline_ids = array.new_line(ndays)
nShownLines = 0
nShownLabels = showLabels ? 2 : 0

if showMidLine
    nShownLabels += showLabels ? 1 : 0
    
if show50extLines
    nShownLines += 2

if show100extLines
    nShownLines += 2
    nShownLabels += showLabels ? 2 : 0

if show200extLines
    nShownLines += 2
    nShownLabels += showLabels ? 2 : 0

nShownLabels := showOnlyLastLabels ? nShownLabels : ndays * nShownLabels
var labels_ids = array.new_label(nShownLabels)
var lines_ids = array.new_line(nShownLines * ndays)


//SET SESSION TIMES AND EVENTUALLY ALSO TIMEZONE
[session_times, session_timezone] = SetSessionTimes(session_type, custom_session_times_inp, syminfo.type, syminfo.root, syminfo.timezone)


//DEFINE WHETHER THE MARKET IS INSIDE SESSION
session = na(time(timeframe.period, session_times, session_timezone)) ? false : true
//stocks are a special case
//detect whether chart is showing extended session and we are outside RTH session
if syminfo.type == 'stock' and syminfo.session == session.extended and not session.ismarket
    session := false
//stocks are usually plotted only during RTH, so there is no Extended Hours to reset the initial balance. Flag the start of a new day
stock_changed_day = syminfo.type == 'stock' and syminfo.session == session.regular and ta.change(time('D')) ? true : false


//IF SESSION JUST FINISHED (OR DAY CHANGED FOR STOCKS RTHs) FINISH IB LINES AND BOXES AND CREATE THE EXTENDED VERSIONS IF SET IN PARAMS
if ((not session and session[1]) or stock_changed_day) and timeframe.isintraday
    //finish RTH lines and boxes
    box.set_right(ib_box, bar_index )
    box.set_extend(ib_box, extend.none)
    box.set_right(or_box, bar_index)
    box.set_extend(or_box, extend.none)
    //manually finish ib_hi and ib_lo lines
    line.set_x2(ib_hi_line, bar_index)
    line.set_extend(ib_hi_line, extend.none)
    line.set_x2(ib_lo_line, bar_index)
    line.set_extend(ib_lo_line, extend.none)
    line.set_x2(ib_mid_line, bar_index)
    line.set_extend(ib_mid_line, extend.none)
    //automatically finish rest of yesterday's lines
    if array.size(lines_ids) > 0
        for i = array.size(lines_ids) - 1 to array.size(lines_ids) - nShownLines by 1
            linee = array.get(lines_ids, i)
            line.set_x2(linee, bar_index)
            line.set_extend(linee, extend.none)
    
    //move the extension labels to the left, because these will not be extended
    label.set_x(label_ibhiext100, bar_index-nbarsforward/2)
    label.set_x(label_ibloext100, bar_index-nbarsforward/2)
    label.set_x(label_ibhiext200, bar_index-nbarsforward/2)
    label.set_x(label_ibloext200, bar_index-nbarsforward/2)
    
    if not extendIBON
        label.set_x(label_ibhi, bar_index-nbarsforward/2)
        label.set_x(label_iblo, bar_index-nbarsforward/2)
        label.set_x(label_ibmid, bar_index-nbarsforward/2)
        
    //create new lines and boxes for the overnight session
    if extendIBON and (syminfo.type != 'stock' or (syminfo.type == 'stock' and syminfo.session == session.extended) )
        if showIBbox
            ib_box_ON := box.new(bar_index, ib_hi[1], bar_index, ib_lo[1], border_color=colorIBON, bgcolor=colorIBON, extend=extend.right)
        if showOpenRange
            or_box_ON := box.new(bar_index, or_hi[1], bar_index, or_lo[1], border_color=colorIBON, bgcolor=colorIBON, extend=extend.right)
        ib_hi_line_ON := line.new(bar_index, ib_hi[1], bar_index + 1, ib_hi[1], style=line.style_dashed, color=color.new(colorIBlines, 50), width=1, extend=extend.right)
        ib_lo_line_ON := line.new(bar_index, ib_lo[1], bar_index + 1, ib_lo[1], style=line.style_dashed, color=color.new(colorIBlines, 50), width=1, extend=extend.right)
        ib_mid_line_ON := line.new(bar_index, (ib_hi[1] + ib_lo[1]) / 2, bar_index + 1,  (ib_hi[1] + ib_lo[1]) / 2, style=line.style_dashed, color=color.new(colorIBlines, 50), width=1, extend=extend.right)

    
//IF INSIDE SESSION
if session and timeframe.isintraday
    //if this is the first bar of session, new lines will be created now
    if not session[1] or stock_changed_day
        //finish ON boxes
        if extendIBON
            box.set_right(ib_box_ON, bar_index)
            box.set_extend(ib_box_ON, extend.none)
            box.set_right(or_box_ON, bar_index)
            box.set_extend(or_box_ON, extend.none)
            line.set_x2(ib_hi_line_ON, bar_index)
            line.set_extend(ib_hi_line_ON, extend.none)
            line.set_x2(ib_lo_line_ON, bar_index)
            line.set_extend(ib_lo_line_ON, extend.none)
            line.set_x2(ib_mid_line_ON, bar_index)
            line.set_extend(ib_mid_line_ON, extend.none)
        
        //move the now old IB labels to the left to make room for the new ones, if they have been extended outside of session times
        if extendIBON
            label.set_x(label_ibhi, bar_index-nbarsforward/2)
            label.set_x(label_iblo, bar_index-nbarsforward/2)
            label.set_x(label_ibmid, bar_index-nbarsforward/2)
        
        //create new Initial Balance lines, boxes and labels and save their ids for deletion afterwards
        ib_hi := high
        ib_lo := low
        or_hi := high
        or_lo := low
        startLastIB := time
        
        if showIBlines
            ib_hi_line := line.new(bar_index, ib_hi, bar_index + 1, ib_hi, color=colorIBlines, width=widthIBlines, extend=extend.right)
            ib_lo_line := line.new(bar_index, ib_lo, bar_index + 1, ib_lo, color=colorIBlines, width=widthIBlines, extend=extend.right)
        
        if showMidLine
            ib_mid_line := line.new(bar_index, 0, bar_index + 1, 0, color=colorMidLine, width=widthMidLine, style=line.style_dashed, extend=extend.right)
            label_ibmid := label.new(bar_index + nbarsforward, 0, text= label_prefix + '.IB.mid', style=label.style_none, textcolor=colorIBlines, textalign = text.align_left, size=label_size)
            array.push(labels_ids, label_ibmid)
            
        if showIBbox
            ib_box := box.new(bar_index, ib_hi, bar_index + 1, ib_lo, border_color=colorIBbox, bgcolor=colorIBbox, extend=extend.right)
        if showOpenRange
            or_box := box.new(bar_index, or_hi, bar_index + 1, or_lo, border_color=colorOR, bgcolor=colorOR, extend=extend.right)
            
        label_ibhi := label.new(bar_index + nbarsforward, 0, text= label_prefix + '.IB.hi', style=label.style_none, textcolor=colorIBlines, textalign = text.align_left, size=label_size)
        label_iblo := label.new(bar_index + nbarsforward, 0, text= label_prefix + '.IB.lo', style=label.style_none, textcolor=colorIBlines, textalign = text.align_left, size=label_size)
        array.push(labels_ids, label_ibhi)
        array.push(labels_ids, label_iblo)
        
        //create extra lines and labels, which will be deletable after nDays
        if show50extLines
            ib_hi_50_line := line.new(bar_index, 0, bar_index + 1, 0, color=color50extLine, width=width50extLines, extend=extend.right)
            ib_lo_50_line := line.new(bar_index, 0, bar_index + 1, 0, color=color50extLine, width=width50extLines, extend=extend.right)
            array.push(lines_ids, ib_hi_50_line)
            array.push(lines_ids, ib_lo_50_line)
            
        if show100extLines
            ib_hi_100_line := line.new(bar_index, 0, bar_index + 1, 0, color=color100extLine, width=width100extLines, extend=extend.right)
            ib_lo_100_line := line.new(bar_index, 0, bar_index + 1, 0, color=color100extLine, width=width100extLines, extend=extend.right)
            array.push(lines_ids, ib_hi_100_line)
            array.push(lines_ids, ib_lo_100_line)
            
            label_ibhiext100 := label.new(bar_index + nbarsforward, 0, text= label_prefix + '.IB+1x', style=label.style_none, textcolor=color.lime, textalign = text.align_left, size=label_size)
            label_ibloext100 := label.new(bar_index + nbarsforward, 0, text= label_prefix + '.IB-1x', style=label.style_none, textcolor=color.red, textalign = text.align_left, size=label_size)
            array.push(labels_ids, label_ibhiext100)
            array.push(labels_ids, label_ibloext100)
            
        if show200extLines
            ib_hi_200_line := line.new(bar_index, 0, bar_index + 1, 0, color=color200extLine, width=width200extLines, extend=extend.right)
            ib_lo_200_line := line.new(bar_index, 0, bar_index + 1, 0, color=color200extLine, width=width200extLines, extend=extend.right)
            array.push(lines_ids, ib_hi_200_line)
            array.push(lines_ids, ib_lo_200_line)
            
            label_ibhiext200 := label.new(bar_index + nbarsforward, 0, text= label_prefix + '.IB+2x', style=label.style_none, textcolor=color.lime, textalign = text.align_left, size=label_size)
            label_ibloext200 := label.new(bar_index + nbarsforward, 0, text= label_prefix + '.IB-2x', style=label.style_none, textcolor=color.red, textalign = text.align_left, size=label_size)
            array.push(labels_ids, label_ibhiext200)
            array.push(labels_ids, label_ibloext200) 
            
        //delete old graphic elements on start of new session
        if array.size(labels_ids) > nShownLabels
            for i = 1 to array.size(labels_ids) - nShownLabels by 1
                label.delete(array.shift(labels_ids))
        if array.size(lines_ids) > nShownLines * ndays
            for i = 1 to array.size(lines_ids) - nShownLines * ndays by 1
                line.delete(array.shift(lines_ids))
                
    //check to see if we are still within Initial Balance duration and in that case check to see if a new hi or low has been set
    ib = time - startLastIB < ib_duration_ms ? true : false
    ib_hi := ib and (not session[1] or stock_changed_day or high > ib_hi[1]) ? high : ib_hi[1]
    ib_lo := ib and (not session[1] or stock_changed_day or low < ib_lo[1]) ? low : ib_lo[1]
    //or_hi := session[1] and not stock_changed_day ? or_hi[1] : high
    //or_lo := session[1] and not stock_changed_day ? or_lo[1] : low
    range_1 := ib_hi - ib_lo
    
    //if IB hi or low have changed, set levels accordingly and update price labels
    if range_1 != range_1[1] or not session[1] 
        line.set_y1(ib_hi_line, ib_hi)
        line.set_y2(ib_hi_line, ib_hi)
        label.set_y(label_ibhi, ib_hi)
        
        line.set_y1(ib_lo_line, ib_lo)
        line.set_y2(ib_lo_line, ib_lo)
        label.set_y(label_iblo, ib_lo)
        
        box.set_top(ib_box, ib_hi)
        box.set_bottom(ib_box, ib_lo)
        
        if showMidLine
            line.set_y1(ib_mid_line, ib_hi - range_1 / 2)
            line.set_y2(ib_mid_line, ib_hi - range_1 / 2)
            label.set_y(label_ibmid, ib_hi - range_1 / 2)
        if show50extLines
            line.set_y1(ib_hi_50_line, ib_hi + range_1 / 2)
            line.set_y2(ib_hi_50_line, ib_hi + range_1 / 2)
            line.set_y1(ib_lo_50_line, ib_lo - range_1 / 2)
            line.set_y2(ib_lo_50_line, ib_lo - range_1 / 2)
        if show100extLines
            line.set_y1(ib_hi_100_line, ib_hi + range_1)
            line.set_y2(ib_hi_100_line, ib_hi + range_1)
            line.set_y1(ib_lo_100_line, ib_lo - range_1)
            line.set_y2(ib_lo_100_line, ib_lo - range_1)
            label.set_y(label_ibhiext100, ib_hi + range_1)
            label.set_y(label_ibloext100, ib_lo - range_1)
            
        if show200extLines
            line.set_y1(ib_hi_200_line, ib_hi + 2 * range_1)
            line.set_y2(ib_hi_200_line, ib_hi + 2 * range_1)
            line.set_y1(ib_lo_200_line, ib_lo - 2 * range_1)
            line.set_y2(ib_lo_200_line, ib_lo - 2 * range_1)
            label.set_y(label_ibhiext200, ib_hi + 2 * range_1)
            label.set_y(label_ibloext200, ib_lo - 2 * range_1)
        if display_value
            label.set_text(label_ibhi,  ' ' + str.tostring(nround(ib_hi)))
            label.set_text(label_iblo, ' ' + str.tostring(nround(ib_lo)))
            label.set_text(label_ibmid, ' ' + str.tostring(nround(ib_hi - range_1 / 2)))
            label.set_text(label_ibhiext100, label_prefix + '.1 ' + str.tostring(nround(ib_hi + range_1)))
            label.set_text(label_ibloext100, label_prefix + '.1 ' + str.tostring(nround(ib_lo - range_1)))
            label.set_text(label_ibhiext200, label_prefix + '.2 ' + str.tostring(nround(ib_hi + 2*range_1)))
            label.set_text(label_ibloext200, label_prefix + '.2 ' + str.tostring(nround(ib_lo - 2*range_1)))
            
    //offset extension labels to the right only during session
    label.set_x(label_ibhiext100, bar_index + nbarsforward)
    label.set_x(label_ibloext100, bar_index + nbarsforward)
    label.set_x(label_ibhiext200, bar_index + nbarsforward)
    label.set_x(label_ibloext200, bar_index + nbarsforward)

//MOVE IB LABELS ALWAYS (if selected)
if extendIBON
    label.set_x(label_ibhi, bar_index + nbarsforward)
    label.set_x(label_iblo, bar_index + nbarsforward)
    label.set_x(label_ibmid, bar_index + nbarsforward)



// Configuración de parámetros
cmp_sym = input.symbol("CME_MINI:NQ1!", title = "Compare Symbol", group = "Compare Symbol")
ch_Session = input.session("0830-0930", "IB Session")

// Configuración para el tiempo de las velas
enb_candle_curtf = input.bool(true, "Need candles of ", tooltip = "Enable", inline = "Current TF", group = "Entry Trade")
cnt_candle_curtf = input.int(2, "", tooltip = "How many candles need to close below/above IB level to trigger possible trade", inline = "Current TF", group = "Entry Trade")
tf_candle_curtf = input.timeframe("", "At", tooltip = "Timeframe", inline = "Current TF", group = "Entry Trade")

enb_candle_csttf = input.bool(true, "Need candles of ", tooltip = "Enable", inline = "Custom TF", group = "Entry Trade")
cnt_candle_csttf = input.int(2, "", tooltip = "How many candles need to close below/above IB level to trigger possible trade", inline = "Custom TF", group = "Entry Trade")
tf_candle_csttf = input.timeframe("5", "At", tooltip = "Timeframe", inline = "Custom TF", group = "Entry Trade")

// Variables para los precios del rango de la sesión
var float ch_top_price = na
var float ch_bot_price = na
var float ch_mid_price = na
var int ch_session_id = 0
var line ch_top_line = na
var line ch_bot_line = na
var line ch_mid_line = na
var label _1_bull_label = na
var label _2_bull_label = na
var label _1_bear_label = na
var label _2_bear_label = na

// Tiempo de la sesión
ch_time = time(timeframe.period, ch_Session)

// Solicitar datos de comparación
[cm_open, cm_high, cm_low, cm_close] = request.security(cmp_sym, timeframe.period, [open, high, low, close])

// Fondo gris para la sesión
bgcolor(ch_time != 0 ? color.new(color.gray, 90) : na)

// Reiniciar precios al inicio de la sesión
if na(ch_time[1]) and not na(ch_time)
    ch_top_price := na
    ch_bot_price := na
    ch_mid_price := na
    ch_session_id := bar_index

// Actualizar precios de la sesión
if not na(ch_time)
    if barstate.isconfirmed
        if ch_top_price < high or na(ch_top_price)
            ch_top_price := high
            ch_mid_price := (ch_top_price + ch_bot_price) / 2
        if ch_bot_price > low or na(ch_bot_price)
            ch_bot_price := low
            ch_mid_price := (ch_top_price + ch_bot_price) / 2

// Contadores de velas por encima/por debajo del rango
ch_below_count_curtf = ta.barssince(low > ch_bot_price)
ch_above_count_curtf = ta.barssince(high < ch_top_price)

// Señales de compra y venta
if ta.crossover(close, ch_bot_price)
    if (not enb_candle_curtf) or (ch_below_count_curtf > cnt_candle_curtf)
        label.delete(_1_bull_label)
        _1_bull_label := label.new(bar_index, low, "Bullish Signal", style = label.style_label_up, color=color.rgb(76, 175, 79), size=size.small, textcolor = color.white)

if ta.crossunder(close, ch_top_price)
    if (not enb_candle_curtf) or (ch_above_count_curtf > cnt_candle_curtf)
        label.delete(_1_bear_label)
        _1_bear_label := label.new(bar_index, high, "Bearish Signal", style = label.style_label_down, color=color.rgb(255, 82, 82), size=size.small, textcolor = color.white)

// Visualización de los niveles de IB
if na(ch_time) and not na(ch_time[1])
    ch_top_line := line.new(ch_session_id, ch_top_price, bar_index, ch_top_price, color=color.new(color.lime, 50), width=2)
    ch_bot_line := line.new(ch_session_id, ch_bot_price, bar_index, ch_bot_price, color=color.new(color.lime, 50), width=2)
    ch_mid_line := line.new(ch_session_id, ch_mid_price, bar_index, ch_mid_price, color=color.new(color.aqua, 50), width=2, style=line.style_dashed)

if not na(ch_session_id) and ch_top_price > 0
    if not na (ch_top_line)
        ch_top_line.set_x2(bar_index)

    if not na (ch_bot_line)
        ch_bot_line.set_x2(bar_index)

    if not na (ch_mid_line)
        ch_mid_line.set_x2(bar_index)
        
if not na(ch_time)
    if barstate.isconfirmed
        if ch_top_price < high or na(ch_top_price)
            ch_top_price := high
            ch_mid_price := (ch_top_price + ch_bot_price) / 2
        if ch_bot_price > low or na(ch_bot_price)
            ch_bot_price := low
            ch_mid_price := (ch_top_price + ch_bot_price) / 2

//////DELTA EMX AI V11///////

// ============================================ Session and time filter
useCustomTimezone = input.bool(false, 'Custom Timezone', inline='tz', group='Session Entry Filter')
timezoneStr = input.string("UTC", "", ["UTC-10", "UTC-8", "UTC-7", "UTC-6", "UTC-5", "UTC-4", "UTC-3",
                                         "UTC", "UTC+1", "UTC+2", "UTC+3", "UTC+3:30", "UTC+4", "UTC+5", "UTC+5:30", "UTC+5:45",
                                         "UTC+6", "UTC+6:30", "UTC+7", "UTC+8", "UTC+9", "UTC+9:30", "UTC+10", "UTC+11", "UTC+12", "UTC+12:45", "UTC+13"], inline='tz', group='Session Entry Filter',
                                         tooltip='Use custom timezone. If not selected, default chart timezone is used')
 
filterBySession4 = input.bool(true, 'Session 4', inline='s4', group='Session Entry Filter')
session4 = input.session("0000-0000", '', inline='s4', group='Session Entry Filter', tooltip = 'Filter by custom session option4')
 
// forceExitOutsideSession = input.bool(true, 'Force Exit Outside Session Filter')
timezoneToUse = useCustomTimezone? timezoneStr : syminfo.timezone
allowEntry = (
             (not na(time(timeframe.period, session4, timezoneToUse))?filterBySession4:false)
             ) 

// ============================================ User Inputs 
lower_tf  = input.timeframe("15", "Lower Timeframe" )  
higher_tf = input.timeframe("60", "Higher Timeframe")  
enable_ss1 = true
ss1 = syminfo.tickerid
// ============================================ Function to Calculate Volume Delta 

// ============================================ ss1 Delta
[OPEN1, CLOSE1, VOLUME1]   = request.security(ss1, lower_tf, [open[barstate.isconfirmed ? 0 : 1] , close[barstate.isconfirmed ? 0 : 1], volume[barstate.isconfirmed ? 0 : 1]], lookahead=barmerge.lookahead_on)

DELTA1 = 0.0
if CLOSE1 >= OPEN1 
    DELTA1 := VOLUME1
else if CLOSE1 < OPEN1
    DELTA1 := -VOLUME1


// ============================================ HTF ss1 Delta
[OPEN1_HTF, CLOSE1_HTF, VOLUME1_HTF]  = request.security(ss1, higher_tf,  [open[barstate.isconfirmed ? 0 : 1],close[barstate.isconfirmed ? 0 : 1], volume[barstate.isconfirmed ? 0 : 1]] , lookahead=barmerge.lookahead_on)

DELTA1_HTF = 0.0
if CLOSE1_HTF >= OPEN1_HTF //and barstate.isconfirmed
    DELTA1_HTF := VOLUME1_HTF
    // test = label.new(bar_index, high, color= color.white)
else if CLOSE1_HTF < OPEN1_HTF// and barstate.isconfirmed
    DELTA1_HTF := -VOLUME1_HTF

// ============================================ HTF ss1 Delta labels conditions

var float highest_up_delta1_HTF = na
var float highest_down_delta1_HTF = na

if DELTA1_HTF >= 0
    highest_up_delta1_HTF := (na(highest_up_delta1_HTF) or DELTA1_HTF > highest_up_delta1_HTF) ? DELTA1_HTF : highest_up_delta1_HTF
    // test = label.new(bar_index, high, color= color.white, text = str.tostring(highest_up_delta1_HTF[1]) , textcolor= color.black)
else
    highest_up_delta1_HTF := na  // Reset if trend changes to down

if DELTA1_HTF < 0
    highest_down_delta1_HTF := (na(highest_down_delta1_HTF) or math.abs(DELTA1_HTF) > math.abs(highest_down_delta1_HTF)) ? DELTA1_HTF : highest_down_delta1_HTF
else
    highest_down_delta1_HTF := na  // Reset if trend changes to up


new_high_up1_HTF = not na(highest_up_delta1_HTF[1]) and DELTA1_HTF > highest_up_delta1_HTF[1]
new_high_down1_HTF = not na(highest_down_delta1_HTF[1]) and DELTA1_HTF < highest_down_delta1_HTF[1]

var string lastSignal1_HTF = "NONE"  

longEntry1_HTF = false
shortEntry1_HTF = false

if new_high_up1_HTF and DELTA1_HTF > 0 and lastSignal1_HTF != "BUY" 
    longEntry1_HTF := true
    lastSignal1_HTF := "BUY"

if new_high_down1_HTF and DELTA1_HTF < 0 and lastSignal1_HTF != "SELL" 
    shortEntry1_HTF := true
    lastSignal1_HTF := "SELL"

// ============================================ LTF ss1 Delta labels conditions

var float highest_up_delta1 = na
var float highest_down_delta1 = na

if DELTA1 > 0
    highest_up_delta1 := (na(highest_up_delta1) or DELTA1 > highest_up_delta1) ? DELTA1 : highest_up_delta1
else
    highest_up_delta1 := na  // Reset if trend changes to down

if DELTA1 < 0
    highest_down_delta1 := (na(highest_down_delta1) or math.abs(DELTA1) > math.abs(highest_down_delta1)) ? DELTA1 : highest_down_delta1
else
    highest_down_delta1 := na  // Reset if trend changes to up


new_high_up1 = not na(highest_up_delta1[1]) and DELTA1 > highest_up_delta1[1]
new_high_down1 = not na(highest_down_delta1[1]) and DELTA1 < highest_down_delta1[1]

var string lastSignal1 = "NONE"  

longEntry1 = false
shortEntry1 = false

if new_high_up1 and DELTA1 > 0 and lastSignal1 != "BUY" //and DELTA1_HTF == 1
    longEntry1 := true
    lastSignal1 := "BUY"

if new_high_down1 and DELTA1 < 0 and lastSignal1 != "SELL" //and DELTA1_HTF == -1
    shortEntry1 := true
    lastSignal1 := "SELL"

// ============================================ HTF ON/Off buy and sell ---(For All Symbols)
buy_switch_HTF  = input.bool(true, "High Buy Switch" , group = "Label & Alert On/off")
sell_switch_HTF = input.bool(true, "High Sell Switch", group = "Label & Alert On/off")
// ============================================ ON/Off buy and sell ---(For All Symbols)
buy_switch  = input.bool(true, "Buy Switch" , group = "Label & Alert On/off")
sell_switch = input.bool(true, "Sell Switch", group = "Label & Alert On/off")


var bool LastUpLabel1 = na
var bool LastDoLabel1 = na
var bool LastUpLabel1_HTF = na
var bool LastDoLabel1_HTF = na
var bool allowLTFlabel = na
// ============================================ Labels
if  longEntry1  and allowEntry and buy_switch and LastUpLabel1_HTF and allowLTFlabel 
    label.new(bar_index, low, lastSignal1, style=label.style_label_up, color=#2195f3b2, textcolor=color.white, size=size.small, yloc=yloc.belowbar)
    LastUpLabel1 := true
    LastDoLabel1 := false
    allowLTFlabel := false
if  shortEntry1 and allowEntry and sell_switch and LastDoLabel1_HTF and allowLTFlabel 
    label.new(bar_index, high,lastSignal1, style=label.style_label_down, color=#9b27b0b2, textcolor=color.white, size=size.small, yloc=yloc.abovebar)
    LastUpLabel1 := false
    LastDoLabel1 := true
    allowLTFlabel := false
// ============================================ HTF Labels
if  longEntry1_HTF  and allowEntry and buy_switch_HTF
    label.new(bar_index, low, lastSignal1_HTF+"-High", style=label.style_label_up, color=#2195f3b2, textcolor=color.white, size=size.small, yloc=yloc.belowbar)
    LastUpLabel1_HTF := true
    LastDoLabel1_HTF := false
    allowLTFlabel := true
if  shortEntry1_HTF and allowEntry and sell_switch_HTF
    label.new(bar_index, high,lastSignal1_HTF+"-High", style=label.style_label_down, color=#9b27b0b2, textcolor=color.white, size=size.small, yloc=yloc.abovebar)
    LastUpLabel1_HTF := false
    LastDoLabel1_HTF := true
    allowLTFlabel := true
