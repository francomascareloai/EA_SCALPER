//@version=5
indicator("Session Open Range (Custom TF) by Leo", overlay=true, max_lines_count=500)

// === INPUTS ===
tf_or = input.timeframe("15", title="Open Range Timeframe")
tzone = "America/Chicago"
Asia_High_Low = input.color(color.orange, title = "Asia High/Low")
Asia_Medium = input.color(color.red, title = "Asia Medium")
London_High_Low = input.color(color.lime, title = "London High/Low")
London_Medium = input.color(color.teal, title = "London Medium")
NY_High_Low = input.color(color.aqua, title = "New York High/Low")
NY_Medium = input.color(color.blue, title = "New York Medium")

// === TIME DECIMAL FORMAT ===
or_time = hour(time, tzone) + minute(time, tzone) * 0.01

// === GET HIGH/LOW FROM SELECTED TF ===
l_high = request.security(syminfo.tickerid, tf_or, high)
l_low  = request.security(syminfo.tickerid, tf_or, low)

// === GET OR LEVELS ===
get_or(_time) =>
    hi = ta.valuewhen(or_time == _time, l_high, 0)
    lo = ta.valuewhen(or_time == _time, l_low, 0)
    [hi, lo]

// === SESSION START TIMES ===
asn = 17.00
eur = 2.00
ny  = 8.30

[asn_h, asn_l] = get_or(asn)
[eur_h, eur_l] = get_or(eur)
[ny_h, ny_l]   = get_or(ny)

asn_m = math.avg(asn_h, asn_l)
eur_m = math.avg(eur_h, eur_l)
ny_m  = math.avg(ny_h, ny_l)

// === LÍNEAS DE SESIÓN ===
var line la_asn_h = na
var line la_asn_m = na
var line la_asn_l = na
var line la_eur_h = na
var line la_eur_m = na
var line la_eur_l = na
var line la_ny_h  = na
var line la_ny_m  = na
var line la_ny_l  = na

// === FUNCIONES PARA ACTUALIZAR LÍNEAS ===
update_line(_line_id, _price, _color) =>
    if not na(_price)
        if na(_line_id)
            line.new(x1=bar_index-50, y1=_price, x2=bar_index+1, y2=_price, color=_color, width=1)
        else
            line.set_xy1(_line_id, bar_index-50, _price)
            line.set_xy2(_line_id, bar_index+1, _price)
            _line_id
    else
        _line_id


la_asn_h := update_line(la_asn_h, asn_h, _color=Asia_High_Low)
la_asn_m := update_line(la_asn_m, asn_m, _color=Asia_Medium)
la_asn_l := update_line(la_asn_l, asn_l, _color=Asia_High_Low)

la_eur_h := update_line(la_eur_h, eur_h, _color=London_High_Low)
la_eur_m := update_line(la_eur_m, eur_m, _color=London_Medium)
la_eur_l := update_line(la_eur_l, eur_l, _color=London_High_Low)

la_ny_h  := update_line(la_ny_h, ny_h, _color=NY_High_Low)
la_ny_m  := update_line(la_ny_m, ny_m, _color=NY_Medium)
la_ny_l  := update_line(la_ny_l, ny_l, _color=NY_High_Low)

// === LABELS ===
lab(_text, _color, _value) =>
    var label lab_inst = na
    if not na(_value)
        lab_inst := label.new(bar_index + 1, _value, style=label.style_label_left, color=color.rgb(0, 0, 0, 100), textcolor=_color, text=str.tostring(_value, "##.00"), tooltip=_text, size=size.small)
        label.delete(lab_inst[1])

lab("Asia-High", Asia_High_Low, asn_h)
lab("Asia-Medium", Asia_Medium, asn_m)
lab("Asia-Low", Asia_High_Low, asn_l)

lab("London-High", London_High_Low, eur_h)
lab("London-Medium", London_Medium, eur_m)
lab("London-Low", London_High_Low, eur_l)

lab("NY-High", NY_High_Low, ny_h)
lab("NY-Medium", NY_Medium, ny_m)
lab("NY-Low", NY_High_Low, ny_l)

// === TARGETS ===
t_tog   = input.bool(true, title="Display RTH Targets", group="Targets")
t_perc  = input.float(50, title="Target %", group="Targets", inline="1") * 0.01
t_color = input.color(color.new(color.black, 50), title="", group="Targets", inline="1")
t_style = input.string("___", title="Style", options=["___", "- - -", ". . .", "none"], group="Targets", inline="2")
t_width = input.int(1, minval=1, title="Width", group="Targets", inline="2")

linestyle(_input) =>
    (_input == "___"   ? line.style_solid :
     _input == "- - -" ? line.style_dashed :
     _input == ". . ." ? line.style_dotted :
     line.style_solid)

reset  = or_time == ny
width  = ny_h - ny_l
value  = math.max(width * t_perc, syminfo.mintick)
var float roof  = na
var float floor = na

if reset
    roof := ny_h
    floor := ny_l

if t_tog and not na(roof) and not na(floor)
    if close < floor
        down_count = math.ceil((floor - close) / value)
        for i = 1 to down_count
            line.new(bar_index, floor - (i * value), bar_index+10, floor - (i * value), color=t_color, width=t_width, style=linestyle(t_style))
        floor := floor - (down_count * value)

    if close > roof
        up_count = math.ceil((close - roof) / value)
        for i = 1 to up_count
            line.new(bar_index, roof + (i * value), bar_index+10, roof + (i * value), color=t_color, width=t_width, style=linestyle(t_style))
        roof := roof + (up_count * value)
