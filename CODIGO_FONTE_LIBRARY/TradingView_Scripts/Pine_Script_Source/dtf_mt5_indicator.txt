#property copyright "DAY TRADING FOREX"
#property link      ""
#property version   "1.00"
#property indicator_chart_window
#property indicator_buffers 3
#property indicator_plots   3

#property indicator_label1  "Bull Signal"
#property indicator_type1   DRAW_ARROW
#property indicator_color1  clrDodgerBlue
#property indicator_style1  STYLE_SOLID
#property indicator_width1  1

#property indicator_label2  "Bear Signal"
#property indicator_type2   DRAW_ARROW
#property indicator_color2  clrRed
#property indicator_style2  STYLE_SOLID
#property indicator_width2  1

#property indicator_label3  "Stop Signal"
#property indicator_type3   DRAW_ARROW
#property indicator_color3  clrRed
#property indicator_style3  STYLE_SOLID
#property indicator_width3  1

// Input parameters
input group "Indicator Settings"
input bool Verbose = false;
input int MinRange = 5;
input int MaxRange = 30;
input int HighLowFilter = 10;
input int MaxHistoryBars = 5000;

input group "Trade Analysis"
input string AN_Ex2 = ">> Analyzes the performance of signals";
input bool AnalysisEnabled = true;
input bool DisplayProfits = true;
input color AnalysisColor = clrMagenta;
input color AnalysisLabel = clrAqua;

input group "Drawing Boxes"
input color BullRectangle = clrLightSkyBlue;
input color BearRectangle = clrTomato;

input group "Alerts"
input string AlertCaption = "My Alert";
input bool DisplayAlerts = false;
input bool EmailAlerts = false;
input bool SoundAlerts = false;
input string SoundFile = "alert.wav";

// Indicator buffers
double G_ibuf_188[];
double G_ibuf_192[];
double G_ibuf_196[];
double G_ibuf_200[];
double G_ibuf_204[];

// Global variables
bool Gi_208 = false;
double Gd_212;
double G_close_220 = 0.0;
double G_close_228 = 0.0;
datetime G_datetime_236 = 0;
datetime G_datetime_240 = 0;
datetime G_time_244;
bool Gi_248 = true;
double G_high_252;
double G_low_260 = 0.0;
datetime G_time_268;
datetime G_time_272 = 0;
int G_count_276;
int G_count_280;
int Gi_284;
int G_count_288 = 0;
double Gd_292 = 0.0;
datetime Gi_300 = 0;

int OnInit()
{
   // Set indicator buffers
   SetIndexBuffer(0, G_ibuf_188, INDICATOR_DATA);
   SetIndexBuffer(1, G_ibuf_192, INDICATOR_DATA);
   SetIndexBuffer(2, G_ibuf_196, INDICATOR_DATA);
   SetIndexBuffer(3, G_ibuf_204, INDICATOR_CALCULATIONS);
   SetIndexBuffer(4, G_ibuf_200, INDICATOR_CALCULATIONS);
   
   // Set arrow codes
   PlotIndexSetInteger(0, PLOT_ARROW, 233);
   PlotIndexSetInteger(1, PLOT_ARROW, 234);
   PlotIndexSetInteger(2, PLOT_ARROW, 167); // Stop sign equivalent
   
   // Set empty values
   PlotIndexSetDouble(0, PLOT_EMPTY_VALUE, EMPTY_VALUE);
   PlotIndexSetDouble(1, PLOT_EMPTY_VALUE, EMPTY_VALUE);
   PlotIndexSetDouble(2, PLOT_EMPTY_VALUE, EMPTY_VALUE);
   
   // Initialize variables
   G_high_252 = 0;
   G_low_260 = 0;
   G_time_268 = 0;
   G_time_272 = 0;
   G_count_276 = 0;
   G_count_280 = 0;
   Gi_284 = 0;
   G_count_288 = 0;
   G_close_220 = 0;
   G_close_228 = 0;
   G_datetime_236 = 0;
   G_datetime_240 = 0;
   Gd_292 = 0;
   Gi_300 = 0;
   
   IndicatorSetString(INDICATOR_SHORTNAME, "DAY TRADING FOREX");
   IndicatorSetInteger(INDICATOR_DIGITS, _Digits);
   
   f0_12();
   return(INIT_SUCCEEDED);
}

void OnDeinit(const int reason)
{
   f0_12();
}

int f0_12()
{
   string name_0;
   int objs_total_8 = ObjectsTotal(0);
   for(int Li_12 = objs_total_8 - 1; Li_12 >= 0; Li_12--)
   {
      name_0 = ObjectName(0, Li_12);
      if(StringFind(name_0, "PZDT") != -1) 
         ObjectDelete(0, name_0);
   }
   return(0);
}

int OnCalculate(const int rates_total,
                const int prev_calculated,
                const datetime &time[],
                const double &open[],
                const double &high[],
                const double &low[],
                const double &close[],
                const long &tick_volume[],
                const long &volume[],
                const int &spread[])
{
   if(!Gi_208)
   {
      if(!TerminalInfoInteger(TERMINAL_CONNECTED)) return(0);
      Gi_208 = true;
   }
   if(!Gi_208) return(0);
   
   int Li_92 = 1;
   int limit = rates_total - prev_calculated;
   if(limit > MaxHistoryBars) limit = MaxHistoryBars;
   if(prev_calculated > 0) limit++;
   
   ArraySetAsSeries(time, true);
   ArraySetAsSeries(open, true);
   ArraySetAsSeries(high, true);
   ArraySetAsSeries(low, true);
   ArraySetAsSeries(close, true);
   ArraySetAsSeries(G_ibuf_188, true);
   ArraySetAsSeries(G_ibuf_192, true);
   ArraySetAsSeries(G_ibuf_196, true);
   ArraySetAsSeries(G_ibuf_200, true);
   ArraySetAsSeries(G_ibuf_204, true);
   
   for(int Li_104 = limit - 1; Li_104 >= Li_92; Li_104--)
   {
      if(Li_104 <= MaxHistoryBars)
      {
         double Ld_4 = f0_1(Li_104, HighLowFilter, high, time);
         double Ld_12 = f0_8(Li_104, HighLowFilter, low, time);
         
         double iatr_array[];
         ArrayResize(iatr_array, 1);
         if(CopyBuffer(iATR(_Symbol, _Period, 50), 0, Li_104, 1, iatr_array) <= 0)
            continue;
         double iatr_20 = iatr_array[0];
         
         Gd_212 = iatr_20 / 100.0;
         double Ld_28 = 8.0 * Gd_212;
         double Ld_36 = f0_14(Li_104, open, close);
         double Ld_44 = f0_2(Li_104, open, close, low);
         double Ld_52 = f0_9(Li_104, open, close, high);
         
         G_ibuf_204[Li_104] = G_ibuf_204[Li_104 + 1];
         G_ibuf_200[Li_104] = EMPTY_VALUE;
         double close_76 = close[Li_104];
         int Ld_84 = 1;
         
         for(int Li_108 = MinRange; Li_108 <= MaxRange; Li_108++)
         {
            double Ld_60 = f0_1(Li_104, Li_108, high, time);
            double Ld_68 = f0_8(Li_104, Li_108, low, time);
            
            if(f0_16(Li_104, Li_108, open, close, high, low, time) && Verbose && G_ibuf_204[Li_104] == 0.0 && 
               (Ld_60 >= Ld_4 || high[Li_104] >= Ld_4))
            {
               if(!(f0_0(Li_104, Li_108 + 1, BullRectangle, 0, 0, open, close, high, low, time))) break;
               G_ibuf_200[Li_104] = 0;
               G_ibuf_204[Li_104] = 0;
               break;
            }
            
            if(f0_7(Li_104, Li_108, open, close, high, low, time) && Verbose && G_ibuf_204[Li_104] == 1.0 && 
               (Ld_68 <= Ld_12 || low[Li_104] <= Ld_4))
            {
               if(!(f0_0(Li_104, Li_108 + 1, BearRectangle, 0, 0, open, close, high, low, time))) break;
               G_ibuf_200[Li_104] = 1;
               G_ibuf_204[Li_104] = 1;
               break;
            }
            
            if(f0_16(Li_104, Li_108, open, close, high, low, time) && 
               ((G_ibuf_204[Li_104] != 0.0) || (G_ibuf_204[Li_104] == 0.0 && G_close_220 > close_76)) && 
               (Ld_68 <= Ld_12 || low[Li_104] <= Ld_4))
            {
               if(G_ibuf_204[Li_104] == 0.0 && G_close_220 > close_76) Ld_84 = 0;
               else Ld_84 = 1;
               if(!(f0_0(Li_104, Li_108 + 1, BullRectangle, 1, Ld_84, open, close, high, low, time))) break;
               f0_5();
               G_close_220 = close_76;
               G_ibuf_200[Li_104] = 0;
               G_ibuf_204[Li_104] = 0;
               break;
            }
            
            if(f0_7(Li_104, Li_108, open, close, high, low, time) && 
               ((G_ibuf_204[Li_104] != 1.0) || (G_ibuf_204[Li_104] == 1.0 && G_close_228 < close_76)) && 
               (Ld_60 >= Ld_4 || high[Li_104] >= Ld_4))
            {
               if(G_ibuf_204[Li_104] == 1.0 && G_close_228 < close_76) Ld_84 = 0;
               else Ld_84 = 1;
               if(!(f0_0(Li_104, Li_108 + 1, BearRectangle, 1, Ld_84, open, close, high, low, time))) break;
               f0_5();
               G_close_228 = close_76;
               G_ibuf_200[Li_104] = 1;
               G_ibuf_204[Li_104] = 1;
               break;
            }
            
            if(f0_17(Li_104, Li_108, open, close, high, low, time) && 
               ((G_ibuf_204[Li_104] != 0.0) || (G_ibuf_204[Li_104] == 0.0 && G_close_220 > close_76)) && 
               (Ld_68 <= Ld_12 || low[Li_104] <= Ld_4))
            {
               if(G_ibuf_204[Li_104] == 0.0 && G_close_220 > close_76) Ld_84 = 0;
               else Ld_84 = 1;
               if(!(f0_0(Li_104, Li_108 + 1, BullRectangle, 1, Ld_84, open, close, high, low, time))) break;
               f0_5();
               G_close_220 = close_76;
               G_ibuf_200[Li_104] = 0;
               G_ibuf_204[Li_104] = 0;
               break;
            }
            
            if(f0_13(Li_104, Li_108, open, close, high, low, time) && 
               ((G_ibuf_204[Li_104] != 1.0) || (G_ibuf_204[Li_104] == 1.0 && G_close_228 < close_76)) && 
               (Ld_60 >= Ld_4 || high[Li_104] >= Ld_4))
            {
               if(G_ibuf_204[Li_104] == 1.0 && G_close_228 < close_76) Ld_84 = 0;
               else Ld_84 = 1;
               if(!(f0_0(Li_104, Li_108 + 1, BearRectangle, 1, Ld_84, open, close, high, low, time))) break;
               f0_5();
               G_close_228 = close_76;
               G_ibuf_200[Li_104] = 1;
               G_ibuf_204[Li_104] = 1;
               break;
            }
         }
         if(AnalysisEnabled) f0_3(Li_104, high, low, time);
      }
   }
   
   // Alert handling
   if(G_time_244 != time[0])
   {
      if(G_ibuf_200[1] == 0.0 && Gi_248 == false)
      {
         if(DisplayAlerts == true) Alert("DAY TRADING FOREX" + " (" + AlertCaption + ") [" + _Symbol + "] Bullish Breakout");
         if(EmailAlerts == true) SendMail("DAY TRADING FOREX" + " (" + AlertCaption + ") [" + _Symbol + "]", "[" + _Symbol + "] Bullish Breakout");
         if(SoundAlerts == true) PlaySound(SoundFile);
      }
      else
      {
         if(G_ibuf_200[1] == 1.0 && Gi_248 == false)
         {
            if(DisplayAlerts == true) Alert("DAY TRADING FOREX" + " (" + AlertCaption + ") [" + _Symbol + "] Bearish Breakout");
            if(EmailAlerts == true) SendMail("DAY TRADING FOREX" + " (" + AlertCaption + ") [" + _Symbol + "]", "[" + _Symbol + "] Bearish Breakout");
            if(SoundAlerts == true) PlaySound(SoundFile);
         }
      }
      G_time_244 = time[0];
      Gi_248 = false;
   }
   
   return(rates_total);
}

void f0_5()
{
   G_high_252 = 0;
   G_low_260 = 0;
   f0_4();
}

void f0_4()
{
   int Li_0, Li_4, Li_8, Li_12, Li_16;
   double Ld_20 = G_count_276 + G_count_280;
   if(Ld_20 != 0.0)
   {
      Li_0 = (int)MathFloor(Ld_20);
      Li_4 = (int)MathCeil(100.0 * (G_count_276 / Ld_20));
      Li_8 = (int)MathFloor(100.0 * (G_count_280 / Ld_20));
      Li_12 = (int)MathCeil(Gi_284 / G_count_288);
      Li_16 = (int)SymbolInfoInteger(_Symbol, SYMBOL_SPREAD);
      Comment("Copyright © DAY TRADING FOREX \n" + "Winning Trades: " + IntegerToString(Li_4) + "% (" + IntegerToString(G_count_276) + " of " + IntegerToString(Li_0) + ") \n" + 
              "Losing Trades: " + IntegerToString(Li_8) + "% (" + IntegerToString(G_count_280) + " of " + IntegerToString(Li_0) + ") \n" + 
              "Average Signal: +" + IntegerToString(Li_12) + " pts \n" + "Spread: " + IntegerToString(Li_16) + " pts");
   }
}

void f0_3(int Ai_0, const double &high[], const double &low[], const datetime &time[])
{
   if(high[Ai_0] > G_high_252 || G_high_252 == 0.0)
   {
      G_high_252 = high[Ai_0];
      G_time_268 = time[Ai_0];
   }
   if(low[Ai_0] < G_low_260 || G_low_260 == 0.0)
   {
      G_low_260 = low[Ai_0];
      G_time_272 = time[Ai_0];
   }
}

int f0_13(int Ai_0, int Ai_4, const double &open[], const double &close[], const double &high[], const double &low[], const datetime &time[])
{
   double Ld_8 = MathAbs(high[Ai_0] - low[Ai_0]);
   if(f0_11(Ai_0, open, close) && close[Ai_0] < f0_8(Ai_0, Ai_4, low, time) && f0_6(Ai_0 + Ai_4 + 1, open, close)) return(1);
   return(0);
}

int f0_17(int Ai_0, int Ai_4, const double &open[], const double &close[], const double &high[], const double &low[], const datetime &time[])
{
   double Ld_8 = MathAbs(high[Ai_0] - low[Ai_0]);
   if(f0_6(Ai_0, open, close) && close[Ai_0] > f0_1(Ai_0, Ai_4, high, time) && f0_11(Ai_0 + Ai_4 + 1, open, close)) return(1);
   return(0);
}

int f0_16(int Ai_0, int Ai_4, const double &open[], const double &close[], const double &high[], const double &low[], const datetime &time[])
{
   double Ld_8 = MathAbs(high[Ai_0] - low[Ai_0]);
   if(f0_6(Ai_0, open, close) && close[Ai_0] > f0_1(Ai_0, Ai_4, high, time) && 
      open[Ai_0] < close[Ai_0 + Ai_4 + 1] && close[Ai_0] > high[Ai_0 + Ai_4 + 1]) return(1);
   return(0);
}

int f0_7(int Ai_0, int Ai_4, const double &open[], const double &close[], const double &high[], const double &low[], const datetime &time[])
{
   double Ld_8 = MathAbs(high[Ai_0] - low[Ai_0]);
   if(f0_11(Ai_0, open, close) && close[Ai_0] < f0_8(Ai_0, Ai_4, low, time) && 
      open[Ai_0] > close[Ai_0 + Ai_4 + 1] && close[Ai_0] < low[Ai_0 + Ai_4 + 1]) return(1);
   return(0);
}

double f0_9(int Ai_0, const double &open[], const double &close[], const double &high[])
{
   if(close[Ai_0] > open[Ai_0]) return(MathAbs(high[Ai_0] - close[Ai_0]));
   return(MathAbs(high[Ai_0] - open[Ai_0]));
}

double f0_2(int Ai_0, const double &open[], const double &close[], const double &low[])
{
   if(close[Ai_0] < open[Ai_0]) return(MathAbs(close[Ai_0] - low[Ai_0]));
   return(MathAbs(open[Ai_0] - low[Ai_0]));
}

void f0_10(string A_text_0, int Ai_8, int Ai_12, color A_color_16, int Ai_20, const datetime &time[])
{
   datetime time_24, time_28;
   double price_32;
   string name_40;
   if(DisplayProfits)
   {
      time_24 = time[Ai_8];
      time_28 = time[Ai_8 + 1];
      if(Ai_12 == 0) price_32 = time[Ai_8] - Gd_212 * Ai_20;
      else price_32 = time[Ai_8] + Gd_212 * Ai_20;
      name_40 = "PZDT" + "-" + A_text_0 + "-" + TimeToString(time_28);
      ObjectCreate(0, name_40, OBJ_TEXT, 0, time_24, price_32);
      ObjectSetString(0, name_40, OBJPROP_TEXT, A_text_0);
      ObjectSetInteger(0, name_40, OBJPROP_FONTSIZE, 7);
      ObjectSetString(0, name_40, OBJPROP_FONT, "Tahoma");
      ObjectSetInteger(0, name_40, OBJPROP_COLOR, A_color_16);
      ObjectSetInteger(0, name_40, OBJPROP_BACK, true);
   }
}

void f0_15(string A_name_0, datetime A_datetime_8, datetime A_datetime_12, double A_price_16, double A_price_24, 
           color A_color_32, int A_style_36, int A_width_40, bool A_bool_44)
{
   if(ObjectFind(0, A_name_0) != -1) ObjectDelete(0, A_name_0);
   ObjectCreate(0, A_name_0, OBJ_TREND, 0, A_datetime_8, A_price_16, A_datetime_12, A_price_24);
   ObjectSetInteger(0, A_name_0, OBJPROP_RAY, A_bool_44);
   ObjectSetInteger(0, A_name_0, OBJPROP_STYLE, A_style_36);
   ObjectSetInteger(0, A_name_0, OBJPROP_WIDTH, A_width_40);
   ObjectSetInteger(0, A_name_0, OBJPROP_COLOR, A_color_32);
   ObjectSetInteger(0, A_name_0, OBJPROP_BACK, true);
}

bool f0_0(int Ai_0, int Ai_4, color A_color_8, bool Ai_12 = true, bool Ai_16 = true, 
          const double &open[], const double &close[], const double &high[], const double &low[], const datetime &time[])
{
   string Ls_20;
   int Li_28, shift_32, shift_36, shift_40;
   datetime time_44 = time[Ai_0];
   datetime time_48 = time[Ai_0 + Ai_4 - 1];
   string name_52 = "PZDT" + "Rect-" + IntegerToString(Ai_4) + TimeToString(time_48);
   
   if((A_color_8 == BullRectangle && time_48 <= G_datetime_240) || time_48 > time_44) return(false);
   if((A_color_8 == BearRectangle && time_48 <= G_datetime_236) || time_48 > time_44) return(false);
   
   if(AnalysisEnabled && Ai_16 && Gi_300 > 0 && Gd_292 > 0.0)
   {
      Ls_20 = name_52 + "-res";
      Li_28 = 0;
      shift_32 = iBarShift(_Symbol, _Period, Gi_300, true);
      shift_36 = iBarShift(_Symbol, _Period, G_time_268, true);
      shift_40 = iBarShift(_Symbol, _Period, G_time_272, true);
      
      if(G_ibuf_204[Ai_0] == 0.0)
      {
         if(G_high_252 > high[shift_32])
         {
            Li_28 = (int)MathAbs(G_high_252 - Gd_292) / _Point;
            f0_15(Ls_20, Gi_300, G_time_268, Gd_292, G_high_252, AnalysisColor, STYLE_DOT, 1, false);
            f0_10("+" + IntegerToString(Li_28), shift_36, 1, AnalysisLabel, 25, time);
            Gi_284 += Li_28;
            G_count_276++;
         }
         else
         {
            G_ibuf_196[shift_32] = high[shift_32];
            G_count_280++;
         }
      }
      else
      {
         if(G_low_260 < low[shift_32])
         {
            Li_28 = (int)MathAbs(Gd_292 - G_low_260) / _Point;
            f0_15(Ls_20, Gi_300, G_time_272, Gd_292, G_low_260, AnalysisColor, STYLE_DOT, 1, false);
            f0_10("+" + IntegerToString(Li_28), shift_40, 0, AnalysisLabel, 5, time);
            Gi_284 += Li_28;
            G_count_276++;
         }
         else
         {
            G_ibuf_196[shift_32] = low[shift_32];
            G_count_280++;
         }
      }
   }
   
   if(AnalysisEnabled && Ai_12)
   {
      Gi_300 = time_44;
      Gd_292 = close[Ai_0];
   }
   
   int Li_60 = Ai_0 + Ai_4;
   int highest_idx = 0, lowest_idx = 0;
   double ihigh_64 = high[ArrayMaximum(high, Ai_0 + 1, Ai_4 - 1, highest_idx)];
   double ilow_72 = low[ArrayMinimum(low, Ai_0 + 1, Ai_4 - 1, lowest_idx)];
   
   ObjectCreate(0, name_52, OBJ_RECTANGLE, 0, time_44, ilow_72, time_48, ihigh_64);
   ObjectSetInteger(0, name_52, OBJPROP_COLOR, A_color_8);
   ObjectSetInteger(0, name_52, OBJPROP_BACK, false);
   
   if(A_color_8 == BullRectangle)
   {
      G_ibuf_188[Ai_0] = ilow_72;
      G_datetime_240 = time_48;
   }
   else
   {
      G_ibuf_192[Ai_0] = ihigh_64;
      G_datetime_236 = time_48;
   }
   G_count_288++;
   return(true);
}

double f0_14(int Ai_0, const double &open[], const double &close[])
{
   if(close[Ai_0] < open[Ai_0]) return(MathAbs(close[Ai_0] - open[Ai_0]));
   return(MathAbs(open[Ai_0] - close[Ai_0]));
}

int f0_6(int Ai_0, const double &open[], const double &close[])
{
   if(close[Ai_0] > open[Ai_0]) return(1);
   return(0);
}

int f0_11(int Ai_0, const double &open[], const double &close[])
{
   if(close[Ai_0] < open[Ai_0]) return(1);
   return(0);
}

double f0_1(int Ai_0, int Ai_4, const double &high[], const datetime &time[])
{
   int highest_idx = 0;
   return(high[ArrayMaximum(high, Ai_0 + 1, Ai_4, highest_idx)]);
}

double f0_8(int Ai_0, int Ai_4, const double &low[], const datetime &time[])
{
   int lowest_idx = 0;
   return(low[ArrayMinimum(low, Ai_0 + 1, Ai_4, lowest_idx)]);
}