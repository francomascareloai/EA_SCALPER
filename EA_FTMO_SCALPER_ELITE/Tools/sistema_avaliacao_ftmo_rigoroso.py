#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üî• SISTEMA DE AVALIA√á√ÉO FTMO ULTRA RIGOROSO

Baseado na an√°lise cr√≠tica dos metadados existentes.
Escala 0-10 com crit√©rios extremamente rigorosos.

Autor: Classificador_Trading
Vers√£o: 3.0 - Ultra Cr√≠tico
Data: 2025-01-12
"""

import os
import sys
import json
import hashlib
import re
import chardet
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Tuple, Optional, Any
import logging

class AvaliadorFTMORigoroso:
    """Sistema de avalia√ß√£o FTMO ultra rigoroso baseado em prop firms reais"""
    
    def __init__(self):
        self.setup_logging()
        
        # CRIT√âRIOS FTMO ULTRA RIGOROSOS (Escala 0-10)
        self.criterios_ftmo = {
            # CRIT√âRIOS OBRIGAT√ìRIOS (Eliminat√≥rios)
            'stop_loss_obrigatorio': {
                'peso': 3.0,
                'patterns': [r'stoploss', r'sl\s*=', r'stop\s*loss', r'orderstoploss'],
                'eliminatorio': True,
                'descricao': 'Stop Loss obrigat√≥rio em todas as opera√ß√µes'
            },
            'sem_grid_martingale': {
                'peso': 3.0,
                'patterns_proibidos': [r'grid', r'martingale', r'recovery', r'double\s*down', r'lot\s*multiply'],
                'eliminatorio': True,
                'descricao': 'Proibi√ß√£o absoluta de Grid/Martingale'
            },
            'daily_loss_protection': {
                'peso': 2.0,
                'patterns': [r'daily\s*loss', r'max\s*daily', r'equity\s*protection', r'account\s*balance'],
                'eliminatorio': True,
                'descricao': 'Prote√ß√£o de perda di√°ria m√°xima (5%)'
            },
            
            # CRIT√âRIOS DE ALTA PRIORIDADE
            'risk_management': {
                'peso': 1.5,
                'patterns': [r'risk', r'lot\s*size', r'money\s*management', r'account\s*percent'],
                'descricao': 'Gest√£o de risco por percentual da conta'
            },
            'take_profit': {
                'peso': 1.0,
                'patterns': [r'takeprofit', r'tp\s*=', r'take\s*profit', r'ordertakeprofit'],
                'descricao': 'Take Profit definido'
            },
            'max_drawdown_protection': {
                'peso': 1.5,
                'patterns': [r'drawdown', r'max\s*dd', r'equity\s*curve', r'balance\s*protection'],
                'descricao': 'Prote√ß√£o contra drawdown excessivo'
            },
            
            # CRIT√âRIOS COMPLEMENTARES
            'session_filter': {
                'peso': 0.5,
                'patterns': [r'session', r'time\s*filter', r'trading\s*hours', r'market\s*hours'],
                'descricao': 'Filtro de sess√£o de trading'
            },
            'news_filter': {
                'peso': 0.5,
                'patterns': [r'news', r'economic', r'calendar', r'high\s*impact'],
                'descricao': 'Filtro de not√≠cias econ√¥micas'
            },
            'trailing_stop': {
                'peso': 0.5,
                'patterns': [r'trailing', r'trail', r'move\s*stop'],
                'descricao': 'Trailing Stop implementado'
            }
        }
        
        # PENALIDADES SEVERAS (Redu√ß√£o direta do score)
        self.penalidades_criticas = {
            'grid_trading': {
                'penalidade': -10.0,  # Eliminat√≥rio
                'patterns': [r'grid', r'averaging', r'add\s*position'],
                'descricao': 'Grid Trading - PROIBIDO em FTMO'
            },
            'martingale': {
                'penalidade': -10.0,  # Eliminat√≥rio
                'patterns': [r'martingale', r'double\s*down', r'lot\s*multiply', r'recovery'],
                'descricao': 'Martingale - PROIBIDO em FTMO'
            },
            'hedge_trading': {
                'penalidade': -8.0,
                'patterns': [r'hedge', r'opposite\s*position', r'buy\s*sell\s*same'],
                'descricao': 'Hedge Trading - N√£o permitido'
            },
            'no_stop_loss': {
                'penalidade': -5.0,
                'descricao': 'Aus√™ncia de Stop Loss'
            },
            'high_risk_lot': {
                'penalidade': -3.0,
                'patterns': [r'lot\s*=\s*[0-9]*\.[5-9]', r'lot\s*=\s*[1-9]'],
                'descricao': 'Lot size muito alto (>0.5)'
            },
            'no_risk_management': {
                'penalidade': -4.0,
                'descricao': 'Aus√™ncia de gest√£o de risco'
            },
            'scalping_excessivo': {
                'penalidade': -2.0,
                'patterns': [r'tp\s*=\s*[1-5]', r'takeprofit\s*=\s*[1-5]'],
                'descricao': 'Scalping com TP muito baixo (<5 pips)'
            }
        }
        
        # CLASSIFICA√á√ÉO FTMO RIGOROSA
        self.classificacao_ftmo = {
            (9.0, 10.0): 'FTMO_ELITE',
            (7.5, 8.9): 'FTMO_READY',
            (6.0, 7.4): 'FTMO_CONDICIONAL',
            (4.0, 5.9): 'ALTO_RISCO',
            (2.0, 3.9): 'INADEQUADO',
            (0.0, 1.9): 'PROIBIDO_FTMO'
        }
        
        # ESTRAT√âGIAS AUTOMATICAMENTE PROIBIDAS
        self.estrategias_proibidas = {
            'Grid_Martingale': -10.0,
            'Martingale': -10.0,
            'Grid_Trading': -10.0,
            'Hedge_Trading': -8.0,
            'Recovery_Trading': -9.0
        }
    
    def setup_logging(self):
        """Configura logging rigoroso"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s'
        )
        self.logger = logging.getLogger(__name__)
    
    def analisar_ftmo_ultra_rigoroso(self, content: str, filename: str, estrategia: str) -> Dict[str, Any]:
        """An√°lise FTMO ultra rigorosa com crit√©rios de prop firms reais"""
        content_lower = content.lower()
        filename_lower = filename.lower()
        
        # Inicializar an√°lise
        analise = {
            'score_bruto': 0.0,
            'score_final': 0.0,
            'criterios_atendidos': {},
            'penalidades_aplicadas': {},
            'riscos_detectados': [],
            'ajustes_necessarios': [],
            'status_ftmo': 'PROIBIDO_FTMO',
            'eliminatorio': False,
            'observacoes': [],
            'componentes_uteis': [],
            'snippets_detectados': []
        }
        
        # 1. VERIFICAR ESTRAT√âGIAS AUTOMATICAMENTE PROIBIDAS
        if estrategia in self.estrategias_proibidas:
            penalidade = self.estrategias_proibidas[estrategia]
            analise['score_final'] = max(0.0, penalidade)
            analise['eliminatorio'] = True
            analise['riscos_detectados'].append(f'ESTRAT√âGIA PROIBIDA: {estrategia}')
            analise['ajustes_necessarios'].append(f'INCOMPAT√çVEL COM FTMO - Estrat√©gia {estrategia} √© proibida')
            analise['observacoes'].append(f'EA automaticamente reprovado por usar {estrategia}')
            
            # MESMO SENDO PROIBIDO, EXTRAIR COMPONENTES √öTEIS
            analise['componentes_uteis'] = self._extrair_componentes_uteis_martingale(content)
            analise['snippets_detectados'] = self._detectar_snippets_reutilizaveis(content, filename)
            
            return analise
        
        # 2. AVALIAR CRIT√âRIOS OBRIGAT√ìRIOS
        score_positivo = 0.0
        
        for criterio, config in self.criterios_ftmo.items():
            atendido = False
            
            # Verificar padr√µes positivos
            if 'patterns' in config:
                for pattern in config['patterns']:
                    if re.search(pattern, content_lower) or re.search(pattern, filename_lower):
                        atendido = True
                        break
            
            # Verificar padr√µes proibidos (para crit√©rios negativos)
            if 'patterns_proibidos' in config:
                for pattern in config['patterns_proibidos']:
                    if re.search(pattern, content_lower):
                        atendido = False  # Falha no crit√©rio
                        analise['riscos_detectados'].append(f'PADR√ÉO PROIBIDO DETECTADO: {pattern}')
                        break
                else:
                    atendido = True  # Passou no teste (n√£o tem padr√µes proibidos)
            
            analise['criterios_atendidos'][criterio] = atendido
            
            if atendido:
                score_positivo += config['peso']
                self.logger.info(f"‚úÖ Crit√©rio atendido: {criterio} (+{config['peso']})")
            else:
                self.logger.warning(f"‚ùå Crit√©rio N√ÉO atendido: {criterio}")
                if config.get('eliminatorio', False):
                    analise['eliminatorio'] = True
                    analise['ajustes_necessarios'].append(f"CR√çTICO: {config['descricao']}")
        
        analise['score_bruto'] = score_positivo
        
        # 3. APLICAR PENALIDADES SEVERAS
        score_com_penalidades = score_positivo
        
        for penalidade_nome, config in self.penalidades_criticas.items():
            penalidade_aplicada = False
            
            if 'patterns' in config:
                for pattern in config['patterns']:
                    if re.search(pattern, content_lower):
                        penalidade_aplicada = True
                        break
            elif penalidade_nome == 'no_stop_loss':
                # Verificar aus√™ncia de stop loss
                if not analise['criterios_atendidos'].get('stop_loss_obrigatorio', False):
                    penalidade_aplicada = True
            elif penalidade_nome == 'no_risk_management':
                # Verificar aus√™ncia de gest√£o de risco
                if not analise['criterios_atendidos'].get('risk_management', False):
                    penalidade_aplicada = True
            
            if penalidade_aplicada:
                score_com_penalidades += config['penalidade']
                analise['penalidades_aplicadas'][penalidade_nome] = config['penalidade']
                analise['riscos_detectados'].append(config['descricao'])
                self.logger.error(f"üö´ Penalidade aplicada: {penalidade_nome} ({config['penalidade']})")
        
        # 4. NORMALIZAR SCORE FINAL (0-10)
        analise['score_final'] = max(0.0, min(10.0, score_com_penalidades))
        
        # 5. DETERMINAR STATUS FTMO
        for (min_score, max_score), status in self.classificacao_ftmo.items():
            if min_score <= analise['score_final'] <= max_score:
                analise['status_ftmo'] = status
                break
        
        # 6. VERIFICAR CRIT√âRIOS ELIMINAT√ìRIOS
        if analise['eliminatorio'] or analise['score_final'] < 4.0:
            analise['status_ftmo'] = 'PROIBIDO_FTMO'
        
        # 7. GERAR AJUSTES NECESS√ÅRIOS
        if analise['score_final'] < 7.5:
            if not analise['criterios_atendidos'].get('stop_loss_obrigatorio', False):
                analise['ajustes_necessarios'].append('OBRIGAT√ìRIO: Implementar Stop Loss em todas as opera√ß√µes')
            if not analise['criterios_atendidos'].get('daily_loss_protection', False):
                analise['ajustes_necessarios'].append('OBRIGAT√ìRIO: Implementar prote√ß√£o de perda di√°ria (5%)')
            if not analise['criterios_atendidos'].get('risk_management', False):
                analise['ajustes_necessarios'].append('OBRIGAT√ìRIO: Implementar gest√£o de risco por percentual')
            if not analise['criterios_atendidos'].get('max_drawdown_protection', False):
                analise['ajustes_necessarios'].append('RECOMENDADO: Implementar prote√ß√£o de drawdown m√°ximo')
        
        # 8. EXTRAIR COMPONENTES √öTEIS E SNIPPETS
        analise['componentes_uteis'] = self._extrair_componentes_uteis_martingale(content)
        analise['snippets_detectados'] = self._detectar_snippets_reutilizaveis(content, filename)
        
        # 9. OBSERVA√á√ïES FINAIS
        if analise['score_final'] >= 9.0:
            analise['observacoes'].append('EA de excel√™ncia - Pronto para FTMO Challenge')
        elif analise['score_final'] >= 7.5:
            analise['observacoes'].append('EA adequado para FTMO com pequenos ajustes')
        elif analise['score_final'] >= 6.0:
            analise['observacoes'].append('EA requer ajustes significativos para FTMO')
        elif analise['score_final'] >= 4.0:
            analise['observacoes'].append('EA de alto risco - N√£o recomendado para FTMO')
        else:
            analise['observacoes'].append('EA inadequado/proibido para FTMO')
        
        return analise
    
    def gerar_relatorio_critico(self, analises: List[Dict[str, Any]]) -> Dict[str, Any]:
        """Gera relat√≥rio cr√≠tico das an√°lises"""
        total_arquivos = len(analises)
        
        # Estat√≠sticas por status
        status_count = {}
        scores = []
        
        for analise in analises:
            status = analise.get('status_ftmo', 'UNKNOWN')
            status_count[status] = status_count.get(status, 0) + 1
            scores.append(analise.get('score_final', 0.0))
        
        # An√°lise cr√≠tica
        ftmo_ready = status_count.get('FTMO_READY', 0) + status_count.get('FTMO_ELITE', 0)
        taxa_aprovacao = (ftmo_ready / total_arquivos * 100) if total_arquivos > 0 else 0
        
        relatorio = {
            'timestamp': datetime.now().isoformat(),
            'total_arquivos': total_arquivos,
            'estatisticas': {
                'score_medio': sum(scores) / len(scores) if scores else 0.0,
                'score_maximo': max(scores) if scores else 0.0,
                'score_minimo': min(scores) if scores else 0.0,
                'taxa_aprovacao_ftmo': taxa_aprovacao
            },
            'distribuicao_status': status_count,
            'analise_critica': {
                'perspectiva_trader': self._analise_perspectiva_trader(analises, taxa_aprovacao),
                'perspectiva_engenheiro': self._analise_perspectiva_engenheiro(analises),
                'recomendacoes': self._gerar_recomendacoes(analises, taxa_aprovacao)
            },
            'detalhes_arquivos': analises
        }
        
        return relatorio
    
    def _analise_perspectiva_trader(self, analises: List[Dict[str, Any]], taxa_aprovacao: float) -> List[str]:
        """An√°lise cr√≠tica do ponto de vista do trader"""
        observacoes = []
        
        if taxa_aprovacao < 20:
            observacoes.append("üö® CR√çTICO: Taxa de aprova√ß√£o FTMO extremamente baixa (<20%)")
            observacoes.append("üìâ Biblioteca cont√©m muitos EAs inadequados para prop firms")
        elif taxa_aprovacao < 50:
            observacoes.append("‚ö†Ô∏è ATEN√á√ÉO: Taxa de aprova√ß√£o FTMO baixa (<50%)")
            observacoes.append("üîß Necess√°ria revis√£o e otimiza√ß√£o dos EAs")
        else:
            observacoes.append("‚úÖ Taxa de aprova√ß√£o FTMO aceit√°vel")
        
        # An√°lise de riscos
        grid_martingale_count = sum(1 for a in analises if 'GRID' in str(a.get('riscos_detectados', [])).upper() or 'MARTINGALE' in str(a.get('riscos_detectados', [])).upper())
        if grid_martingale_count > 0:
            observacoes.append(f"üö´ {grid_martingale_count} EAs com estrat√©gias proibidas (Grid/Martingale)")
        
        no_stop_loss_count = sum(1 for a in analises if not a.get('criterios_atendidos', {}).get('stop_loss_obrigatorio', False))
        if no_stop_loss_count > 0:
            observacoes.append(f"‚ö†Ô∏è {no_stop_loss_count} EAs sem Stop Loss obrigat√≥rio")
        
        return observacoes
    
    def _analise_perspectiva_engenheiro(self, analises: List[Dict[str, Any]]) -> List[str]:
        """An√°lise cr√≠tica do ponto de vista do engenheiro"""
        observacoes = []
        
        # An√°lise de qualidade de c√≥digo
        eliminatorios = sum(1 for a in analises if a.get('eliminatorio', False))
        if eliminatorios > 0:
            observacoes.append(f"üîß {eliminatorios} EAs com problemas eliminat√≥rios")
        
        # An√°lise de padr√µes
        sem_risk_mgmt = sum(1 for a in analises if not a.get('criterios_atendidos', {}).get('risk_management', False))
        if sem_risk_mgmt > 0:
            observacoes.append(f"üìä {sem_risk_mgmt} EAs sem gest√£o de risco adequada")
        
        observacoes.append("‚úÖ Sistema de avalia√ß√£o ultra rigoroso aplicado")
        observacoes.append("üìã Crit√©rios baseados em prop firms reais")
        
        return observacoes
    
    def _gerar_recomendacoes(self, analises: List[Dict[str, Any]], taxa_aprovacao: float) -> List[str]:
        """Gera recomenda√ß√µes baseadas na an√°lise"""
        recomendacoes = []
        
        if taxa_aprovacao < 30:
            recomendacoes.append("üéØ PRIORIDADE M√ÅXIMA: Revisar e corrigir EAs com estrat√©gias proibidas")
            recomendacoes.append("üõ°Ô∏è Implementar Stop Loss obrigat√≥rio em todos os EAs")
            recomendacoes.append("üìâ Adicionar prote√ß√£o de perda di√°ria em todos os EAs")
        
        recomendacoes.append("üîç Focar em EAs com score ‚â•7.5 para FTMO")
        recomendacoes.append("‚ö° Eliminar completamente estrat√©gias Grid/Martingale")
        recomendacoes.append("üìä Implementar gest√£o de risco por percentual da conta")
        
        return recomendacoes
    
    def _extrair_componentes_uteis_martingale(self, content: str) -> List[str]:
        """Extrai componentes √∫teis mesmo de EAs Martingale proibidos"""
        componentes = []
        content_lower = content.lower()
        
        # L√≥gicas de entrada potencialmente √∫teis
        if re.search(r'rsi|stochastic|macd|bollinger|ema|sma', content_lower):
            componentes.append('Indicadores t√©cnicos para entrada')
        
        if re.search(r'time\s*filter|session|trading\s*hours', content_lower):
            componentes.append('Filtro de hor√°rio/sess√£o')
        
        if re.search(r'spread\s*check|spread\s*filter', content_lower):
            componentes.append('Filtro de spread')
        
        if re.search(r'news\s*filter|economic\s*calendar', content_lower):
            componentes.append('Filtro de not√≠cias')
        
        if re.search(r'volatility\s*filter|atr', content_lower):
            componentes.append('Filtro de volatilidade')
        
        if re.search(r'trend\s*detection|trend\s*filter', content_lower):
            componentes.append('Detec√ß√£o de tend√™ncia')
        
        if re.search(r'support\s*resistance|s\&r', content_lower):
            componentes.append('Detec√ß√£o de suporte/resist√™ncia')
        
        if re.search(r'breakout|break\s*out', content_lower):
            componentes.append('L√≥gica de breakout')
        
        return componentes
    
    def _detectar_snippets_reutilizaveis(self, content: str, filename: str) -> List[Dict[str, str]]:
        """Detecta snippets de c√≥digo reutiliz√°veis"""
        snippets = []
        
        # Fun√ß√µes de gest√£o de risco
        if re.search(r'double\s+CalculateLotSize|double\s+GetLotSize', content, re.IGNORECASE):
            snippets.append({
                'tipo': 'Risk_Management',
                'nome': 'CalculateLotSize',
                'descricao': 'Fun√ß√£o de c√°lculo de lot size',
                'categoria': 'FTMO_Tools'
            })
        
        # Fun√ß√µes de trailing stop
        if re.search(r'void\s+TrailingStop|bool\s+TrailStop', content, re.IGNORECASE):
            snippets.append({
                'tipo': 'Order_Management',
                'nome': 'TrailingStop',
                'descricao': 'Fun√ß√£o de trailing stop',
                'categoria': 'Risk_Management'
            })
        
        # Fun√ß√µes de detec√ß√£o de tend√™ncia
        if re.search(r'bool\s+IsTrend|int\s+GetTrend', content, re.IGNORECASE):
            snippets.append({
                'tipo': 'Market_Analysis',
                'nome': 'TrendDetection',
                'descricao': 'Fun√ß√£o de detec√ß√£o de tend√™ncia',
                'categoria': 'Market_Structure'
            })
        
        # Fun√ß√µes de filtro de tempo
        if re.search(r'bool\s+IsTimeToTrade|bool\s+TimeFilter', content, re.IGNORECASE):
            snippets.append({
                'tipo': 'Time_Filter',
                'nome': 'TimeFilter',
                'descricao': 'Fun√ß√£o de filtro de hor√°rio',
                'categoria': 'FTMO_Tools'
            })
        
        # Fun√ß√µes de prote√ß√£o de drawdown
        if re.search(r'bool\s+CheckDrawdown|double\s+GetDrawdown', content, re.IGNORECASE):
            snippets.append({
                'tipo': 'Risk_Management',
                'nome': 'DrawdownProtection',
                'descricao': 'Fun√ß√£o de prote√ß√£o de drawdown',
                'categoria': 'FTMO_Tools'
            })
        
        # Fun√ß√µes de order blocks (SMC)
        if re.search(r'bool\s+DetectOrderBlock|void\s+FindOrderBlock', content, re.IGNORECASE):
            snippets.append({
                'tipo': 'SMC_Analysis',
                'nome': 'OrderBlockDetection',
                'descricao': 'Fun√ß√£o de detec√ß√£o de order blocks',
                'categoria': 'Market_Structure'
            })
        
        # Fun√ß√µes de volume analysis
        if re.search(r'double\s+GetVolume|bool\s+VolumeFilter', content, re.IGNORECASE):
            snippets.append({
                'tipo': 'Volume_Analysis',
                'nome': 'VolumeAnalysis',
                'descricao': 'Fun√ß√£o de an√°lise de volume',
                'categoria': 'Volume_Analysis'
            })
        
        return snippets

if __name__ == '__main__':
    avaliador = AvaliadorFTMORigoroso()
    print("üî• Sistema de Avalia√ß√£o FTMO Ultra Rigoroso - Pronto!")
    print("üìä Escala: 0-10 (Crit√©rios extremamente rigorosos)")
    print("üö´ Grid/Martingale = Score 0 (Eliminat√≥rio)")
    print("‚úÖ FTMO_Ready ‚â• 7.5 pontos")
    print("üîß Extra√ß√£o de componentes √∫teis e snippets ativada")